<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_vmw_cloudservice.CASDaoUtil</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>All Glide Record Call in VMware vRealize Automation ITSM Application8.1</description>
        <name>CASDaoUtil</name>
        <script><![CDATA[var CASDaoUtil = Class.create();
CASDaoUtil.prototype = {
    initialize: function() {
        this.appUtil = new CASAppUtil();
        this.clientscriptorder = 0;
    },

    portalCapitalize: function(str1) {
        try {
            CASLogger.debug('Inside  CASDaoUtil.portalCapitalize: Used for capitalizing the string');
            var parsedStr = str1.split('.');
            parsedStr = parsedStr[parsedStr.length - 1];
            var arr = parsedStr.split('_');
            var str = '';
            for (var i = 0; i < arr.length; i++) {
                str += arr[i].charAt(0).toUpperCase() + arr[i].slice(1) + ' ';
                if (str.startsWith("U ")) {
                    str = str.replace("U ", "");
                } else if (str.startsWith("Sc "))
                    str = str.replace("Sc", "");
                else if (str.startsWith("Vra"))
                    str = str.replace("Vra", "vRA");
            }
            return str;
        } catch (e) {
            CASLogger.error("Exception caught Inside CASDaoUtil.portalCapitalize   " + e);
        }
    },


    insertDeploymentActionTable: function(current) {
        try {
            CASLogger.debug('Inside  CASDaoUtil.insertDeploymentActionTable: Insert Into Deployment Action Table');
            var queueDeploymentId = current.request;
            var deploymentId = '';
            var obj = this.appUtil.parse(current.response);
            var objLength = obj.length;
            var Actions = gs.getProperty(this.appUtil.configuration.properties.actions);
            var gr = new GlideRecord(this.appUtil.configuration.table.deployments);
            gr.addQuery("deployment_id", queueDeploymentId);
            gr.query();
            if (gr.next()) {
                deploymentId = gr.sys_id;
            }
            for (i = 0; i < objLength; i++) {
                var check = Actions.indexOf(obj[i].name);
                if (check > -1) {

                    var vr = new GlideRecord(this.appUtil.configuration.table.action);
                    vr.addQuery("deployment", deploymentId);
                    vr.addQuery("action_id", obj[i].id);
                    vr.query();
                    if (vr.next()) {

                        vr.action_id = obj[i].id;
                        vr.name = obj[i].name;
                        vr.valid = obj[i].valid;
                        vr.deployment = deploymentId;
                        vr.description = obj[i].description + ' .';
                        vr.display_name = obj[i].displayName;
                        vr.action_type = obj[i].actionType;
                        //vr.setForceUpdae(true);
                        vr.setWorkflow(true);
                        vr.update();



                    } else {
                        vr.initialize();
                        vr.action_id = obj[i].id;
                        vr.name = obj[i].name;
                        vr.valid = obj[i].valid;
                        vr.deployment = deploymentId;
                        vr.description = obj[i].description + '.';
                        vr.display_name = obj[i].displayName;
                        vr.action_type = obj[i].actionType;
                        vr.setWorkflow(true);
                        vr.insert();


                    }
                }

            }
        } catch (e) {
            CASLogger.error("Exception caught Inside CASDaoUtil.insertDeploymentActionTable.   " + e);
        }
    },


    insertResourceActionTable: function(current) {
        try {
            CASLogger.debug('Inside  CASDaoUtil.insertResourceActionTable: Insert Into Resource Action Table');
            var queueMachineId = current.request;
            var machineId = '';
            var obj = this.appUtil.parse(current.response);
            var objLength = obj.length;
            var Actions = gs.getProperty(this.appUtil.configuration.properties.actions);
            var gr = new GlideRecord(this.appUtil.configuration.table.machines);
            gr.addQuery("machine_id", queueMachineId);
            gr.query();
            if (gr.next()) {
                machineId = gr.sys_id;
            }
            for (i = 0; i < objLength; i++) {
                var check = Actions.indexOf(obj[i].name);
                if (check > -1) {

                    var vr = new GlideRecord(this.appUtil.configuration.table.action);
                    vr.addQuery("machine", machineId);
                    vr.addQuery("action_id", obj[i].id);
                    vr.query();
                    if (vr.next()) {

                        vr.action_id = obj[i].id;
                        vr.name = obj[i].name;
                        vr.valid = obj[i].valid;
                        vr.machine = machineId;
                        vr.description = obj[i].description + ' .';
                        vr.display_name = obj[i].displayName;
                        vr.action_type = obj[i].actionType;
                        //vr.setForceUpdate(true);
                        vr.setWorkflow(true);
                        vr.update();

                    } else {
                        vr.initialize();
                        vr.action_id = obj[i].id;
                        vr.name = obj[i].name;
                        vr.valid = obj[i].valid;
                        vr.machine = machineId;
                        vr.description = obj[i].description + '.';
                        vr.display_name = obj[i].displayName;
                        vr.action_type = obj[i].actionType;
                        vr.setWorkflow(true);
                        vr.insert();


                    }
                }
            }
        } catch (e) {
            CASLogger.error("Exception caught inside CASDaoUtil.insertResourceActionTable  " + e);
        }
    },

    insertActionChoice: function(response, variable) {
        try {
            CASLogger.debug('Inside  CASDaoUtil.insertActionChoice');
            var gr = new GlideRecord(this.appUtil.configuration.table.choice);
            gr.initialize();
            gr.text = response;
            gr.value = response;
            gr.question = variable;
            gr.insert();

        } catch (e) {
            CASLogger.error("Exception Caught inside CASDaoUtil.insertActionChoice " + e);
        }
    },

    insertActionChoiceString: function(title, value, variable) {
        try {
            CASLogger.debug('Inside  CASDaoUtil.insertActionChoiceString');
            var grChoice = new GlideRecord(this.appUtil.configuration.table.choice);
            grChoice.addQuery('text', title);
            grChoice.addQuery('question', variable);
            grChoice.query();
            if (grChoice.next()) {
                grChoice.value = value;
                grChoice.update();
            } else {
                grChoice.initialize();
                grChoice.text = title;
                grChoice.value = value;
                grChoice.question = variable;
                grChoice.insert();
            }


        } catch (e) {
            CASLogger.error("Exception Caught inside CASDaoUtil.insertActionChoiceString " + e);
        }
    },


    activeDeactiveCMDB: function(deploymentId, choice, resourceId, ActionName) {
        try {

            var DeactiveDeployment = new GlideRecord(this.appUtil.configuration.table.deployments);
            DeactiveDeployment.addQuery("deployment_id", deploymentId);
            DeactiveDeployment.addQuery("operational_status", "1");
            DeactiveDeployment.query();
            if (DeactiveDeployment.next()) {


                var DeactiveResource = new GlideRecord(this.appUtil.configuration.table.machines);
                DeactiveResource.addQuery("deploymentid", deploymentId);
                DeactiveResource.query();
                while (DeactiveResource.next()) {
                    if ((resourceId == '' && ActionName == 'Delete') || (resourceId != '' && ActionName == 'Delete')) {
                        if (resourceId != '' && resourceId != DeactiveResource.machine_id + '')
                            continue;
                        DeactiveResource.operational_status = '6';
                    }

                    DeactiveResource.active = choice;
                    DeactiveResource.update();
                }
                if (resourceId == '' && ActionName == 'Delete') {

                    DeactiveDeployment.operational_status = '6';
                }
                DeactiveDeployment.active = choice;
                DeactiveDeployment.update();
            }
        } catch (e) {
            CASLogger.error("Exception Caught inside CASDaoUtil.activeDeactiveCMDB " + e);
        }
    },


    deleteItemOptionRecord: function(actionID) {
        try {
            CASLogger.debug('Inside  CASDaoUtil.deleteItemOptionRecord : Deletion of Item Option Record');
            var gr = new GlideRecord(this.appUtil.configuration.table.variable);
            gr.addQuery("x_vmw_cloudservice_vra_action", actionID);
            gr.query();
            while (gr.next()) {
                var item = new sn_sc.CatalogItemVariable(gr.sys_id);
                item.deleteRecord('true');
                //gr.active=false;
                //gr.update();
                //gr.deeleteMultile() ;
            }


        } catch (e) {
            CASLogger.error("Exception caught inside CASDaoUtil.deleteItemOptionRecord  " + e);
        }
    },




    reconcileDeployment: function(List, current)

    {
        try {
            CASLogger.debug('Inside  CASDaoUtil.reconcileDeployment: reconcile of Deployment');
            var gr = new GlideRecord(this.appUtil.configuration.table.deployments);
            gr.addEncodedQuery("u_project.organization=" + current.organization);
            gr.query();
            while (gr.next()) {
                var check = List.indexOf(gr.deployment_id + '');
                if (check > -1) {
                    CASLogger.debug('The record exists in the list deployment  ' + gr.name);

                } else {
                    var vr = new GlideRecord(this.appUtil.configuration.table.action);
                    vr.addQuery("deployment.deployment_id", gr.deployment_id);
                    vr.query();
                    while (vr.next()) {

                        vr.deleteMultiple();

                    }
                    gr.operational_status = '6';
                    gr.install_status = '7';
                    gr.update();

                }
            }

            gr = new GlideRecord(this.appUtil.configuration.table.machines);
            gr.addEncodedQuery("project.organization=" + current.organization);
            gr.query();
            while (gr.next()) {
                var check = List.indexOf(gr.deploymentid + '');
                if (check > -1) {
                    CASLogger.debug('The record exists in the list Resource  ' + gr.name);

                } else {
                    var vr = new GlideRecord(this.appUtil.configuration.table.action);
                    vr.addQuery("machine.deploymentid", gr.deployment_id);
                    vr.query();
                    while (vr.next()) {

                        vr.deleteMultiple();

                    }
                    gr.operational_status = '6';
                    gr.install_status = '7';
                    gr.update();
                }
            }

        } catch (e) {
            CASLogger.error("Exception caught inside CASDaoUtil.reconcileDeployment  " + e);
        }
    },




    reconcileResource: function(machineList, current) {
        try {
            CASLogger.debug('Inside  CASDaoUtil.reconcileResource: reconcile of Resource');
            gr = new GlideRecord(this.appUtil.configuration.table.machines);
            gr.addEncodedQuery("project.organization=" + current.organization);
            gr.query();
            while (gr.next()) {
                var Check = machineList.indexOf(gr.machine_id);

                if (Check > -1) {

                    CASLogger.debug('The record exists in the list machine' + gr.name);
                } else {
                    var vr = new GlideRecord(this.appUtil.configuration.table.action);
                    vr.addQuery("machine.machine_id", gr.machine_id);
                    vr.query();
                    while (vr.next()) {

                        vr.deleteMultiple();

                    }
                    gr.operational_status = '6';
                    gr.install_status = '7';
                    gr.update();
                }
            }
        } catch (e) {
            CASLogger.error("Exception caught inside CASDaoUtil.reconcileResource  " + e);
        }
    },


    // 	ActionReconcileResource: function(machineList, current) {
    //     try {
    //         gr = new GlideRecord(this.appUtil.configuration.table.machines);
    //         gr.addEncodedQuery("project.organization=" + current.organization);
    //         gr.query();
    //         while (gr.next()) {
    //             var Check = machineList.indexOf(gr.machine_id);

    //             if (Check > -1) {

    //                 CASLogger.debug('The record exists in the list machine' + gr.name);
    //             } else {
    //                 var vr = new GlideRecord(this.appUtil.configuration.table.action);
    //                 vr.addQuery("machine.machine_id", gr.machine_id);  
    //                 vr.query;
    //                 while (vr.next()) {

    //                     vr.deleteMultiple();

    //                 }
    //                 gr.operational_status = '6';
    //                 gr.install_status = '7';
    //                 gr.update();
    //             }
    //         }
    //     } catch (e) {
    //         CASLogger.error("Exception caught inside CASDaoUtil.ActionReconcileResource  " + e) ;
    //     }
    // },


    updateActionRequest: function(current, response) {
        try {
            CASLogger.debug('Inside  CASDaoUtil.updateActionRequest: update of Action Request');
            var obj = this.appUtil.parse(response);
            var gr = new GlideRecord(this.appUtil.configuration.table.actionRequests);
            gr.addQuery("sys_id", current.sys_id);
            gr.query();
            if (gr.next()) {
                var count = gr.description;
                gr.description = count + 1;
                if (gr.description == '111111111111111111111111111') {
                    gr.status = 'FAILED';
                    gr.state = 'Closed Incomplete';
                }
                gr.action_name = obj.name;
                if (obj.statusDetails != null) {
                    gr.comment = obj.statusDetails;
                }
                gr.requestedby = obj.requestedBy;
                gr.requester = obj.requester;
                gr.request_id = obj.id;
                gr.status = obj.status;
                if (gr.status == "PENDING" || gr.status == 'INPROGRESS' || gr.status == 'CHECKING_APPROVAL' || gr.status == 'APPROVAL_PENDING' || gr.status == 'INITIALIZATION') {
                    gr.state = 'INPROGRESS';
                }
                if (gr.status == 'FAILED' || gr.status == 'ABORTED') {
                    gr.state = 'Closed Incomplete';
                }
                if (gr.status == "SUCCESSFUL" || gr.status == "COMPLETION") {
                    gr.state = 'Closed Complete';
                }

                gr.update();

            }

        } catch (e) {
            CASLogger.error("Exception caught inside CASDaoUtil.updateActionRequest  " + e);
        }
    },
    getProjectId: function(deploymentid) {
        try {
            CASLogger.debug('Inside  CASDaoUtil.getProjectId');
            var gr = new GlideRecord(this.appUtil.configuration.table.deployments);
            gr.addQuery("deployment_id", deploymentid);
            gr.addEncodedQuery('operational_status=1');
            gr.query();
            while (gr.next()) {
                var projectsysid = gr.u_project;
                return projectsysid;
            }
        } catch (e) {
            CASLogger.error("Exception caught inside CASDaoUtil.getProjectId  " + e);

        }

    },
    insertResource: function(current) {
        try {
            CASLogger.debug('Inside  CASDaoUtil.insertResource: insert of Resource');
            var obj = this.appUtil.parse(current.response);
            var gr = new GlideRecord(this.appUtil.configuration.table.machineImport);
            gr.initialize();
            var keys = Object.keys(obj);
            for (var k in keys) {
                var par = obj[keys[k]];
                if (par)
                    gr[keys[k].toLowerCase()] = (par.constructor === Array || par.constructor === Object) ? JSON.stringify(par) : par;
            }
            gr.organization = current.organization;
            gr.deploymentid = current.request;
            gr.insert();
        } catch (e) {
            CASLogger.error("Exception caugth inside CASDaoUtil.insertResource " + e);
        }
    },

    insertCMDBData: function(current) {
        try {

            CASLogger.debug('Inside  CASDaoUtil.insertCMDBData:insert of CMDB Data');
            var obj = this.appUtil.parse(current.response);
            var inputs = this.appUtil.stringify(obj.inputs);
            var expense = this.appUtil.stringify(obj.expense);
            var gr = new GlideRecord(this.appUtil.configuration.table.deploymentImport);
            gr.initialize();
            gr.deployment_id = obj.id;
            gr.u_name = obj.name;
            gr.orgid = obj.orgId;
            gr.organization = current.organization;
            if (obj.catalogItemId != null) {
                gr.catalog_item_id = obj.catalogItemId;
            }
            if (obj.catalogItemVersion != null) {
                gr.catalog_item_version = obj.catalogItemVersion;
            }

            gr.blueprintid = obj.blueprintId;
            if (obj.blueprintVersion != null) {
                gr.blueprint_version = obj.blueprintVersion;
            }

            gr.deployment_createdat = obj.createdAt;
            gr.deployment_createdby = obj.createdBy;
            gr.deployment_lastupdatedat = obj.lastUpdatedAt;
            gr.deploymebt_lastupdatedby = obj.lastUpdatedBy;
            gr.deployment_stimulated = obj.simulated;
            gr.deployment_inputs = inputs;
            gr.expense = expense;
            if (obj.description != null) {
                gr.description = obj.description;
            }
            gr.projectid = obj.projectId;
            if (obj.status != null) {
                gr.deployment_status = obj.status;
            }
            if (obj.leaseExpireAt !== null) {
                gr.expires_on = obj.leaseExpireAt;
            }
            gr.insert();

        } catch (e) {
            CASLogger.error("Exception caugth inside CASDaoUtil.insertCMDBData " + e);
        }


    },

    transformProjectCheck: function(projectId, organization) {
        try {
            CASLogger.debug('Inside  CASDaoUtil.transformProjectCheck:');
            var gr = new GlideRecord(this.appUtil.configuration.table.project);
            gr.addQuery("project_id", projectId);
            gr.addQuery('organization', organization);
            gr.query();
            while (gr.next()) {

                var projectSysId = gr.sys_id;
                return projectSysId;
            }
        } catch (e) {
            CASLogger.error("Exception caugth inside CASDaoUtil.transformProjectCheck " + e);
        }
    },



    ScheduleJobForCMDB: function() {
        try {
            this.appUtil = new CASAppUtil();

            var runPostUpgradeScript = gs.getProperty(this.appUtil.configuration.properties.runPostUpgradeScript);
            if (runPostUpgradeScript + '' != 'true') {
                var gr = new GlideRecord(this.appUtil.configuration.table.register_cas);
                gr.addQuery("active", "true");
                gr.query();
                while (gr.next()) {
                    var g = new vRAAvoidParallelScheduleJobs();
                    var check = g.checkQueueEmpty('CMDB Import', gr.sys_id);
                    if (check == true) {
                        this.insert("StartImportCMDB", " ", " ", gr.sys_id + '');
                        this.insert("reconcileCMDB", " ", " ", gr.sys_id);
                    }
                    if (check == false) {
                        CASLogger.info('Schedule Job is already running for CMDB Import');
                    }
                }
            }
        } catch (e) {
            CASLogger.error("Exception caught inside CASDaoUtil.ScheduleJobForCMDB" + e);
        }
    },

    runPostUpgradeScript: function() {
        try {
            var checkEntitlement = '';
            this.appUtil = new CASAppUtil();
            var resource = new GlideRecord(this.appUtil.configuration.table.machines);
            resource.addQuery('operational_status', 1);
            resource.query();
            while (resource.next()) {
                if (resource.object_id == '') {
                    resource.object_id = resource.machine_id;
                }
                if (resource.discovery_source == '') {
                    resource.discovery_source = 'ITSM 8.x';
                }
                resource.setWorkflow(false);
                resource.update();
            }

            var checkEnt = new GlideRecord(this.appUtil.configuration.table.entitlement);
            checkEnt.query();
            if (checkEnt.next()) {
                checkEntitlement = 'true';
            }



            var projectGR = new GlideRecord(this.appUtil.configuration.table.project);
            projectGR.query();
            while (projectGR.next()) {
                projectGR.sc_catalog = gs.getProperty(this.appUtil.configuration.properties.catalogSysID);
                projectGR.parent = gs.getProperty(this.appUtil.configuration.properties.parentCategorySysID);
                projectGR.update();
            }
			if(checkEntitlement=='true')
				{
            var usercriteria = '';
            var usercriteriaGR = new GlideRecord('user_criteria');
            usercriteriaGR.addEncodedQuery('name=vRA default entitlement');
            usercriteriaGR.query();
            if (usercriteriaGR.next()) {
                usercriteria = usercriteriaGR.sys_id;
            }
            var catalogGR = new GlideRecord(this.appUtil.configuration.table.catalogItem);
            //catalogGR.addEncodedQuery('organisation_nameISNOTEMPTY');
            catalogGR.query();
            while (catalogGR.next()) {
                var catalog = catalogGR.sys_id;
                var mtomGR = new GlideRecord(this.appUtil.configuration.table.user_criteria_mtom);
                mtomGR.initialize();
                mtomGR.sys_scope = gs.getProperty(this.appUtil.configuration.properties.applicationSysID);
                mtomGR.sc_cat_item = catalog;
                mtomGR.user_criteria = usercriteria;
                mtomGR.insert();

            }

            var appUtil = new CASAppUtil();
            var deployment = '';
            var machine = '';
            var app_scope = gs.getProperty(appUtil.configuration.properties.applicationSysID);
            var gr = new GlideRecord(appUtil.configuration.table.entitlement);
            gr.addEncodedQuery('deployment_actionsISNOTEMPTY^ORmachine_actionsISNOTEMPTY');
            gr.query();
            while (gr.next()) {

                var UserCriteria = new sn_uc.UserCriteria();
                var attributes = {
                    'sys_scope': app_scope,
                    'name': gr.name + '_vRACS_day2Actions',
                    'user': gr.entitled_users + '',
                    'group': gr.entitled_groups + ''
                };
                var inserted_record_id = UserCriteria.create(attributes, true);

                if (gr.deployment_actions) {
                    deployment = gr.deployment_actions;
                }
                if (gr.machine_actions) {
                    machine = gr.machine_actions;
                }
                var id = deployment + ',' + machine;
                var deployment_name = '';
                var machine_name = '';
                var dayGR = new GlideRecord(appUtil.configuration.table.actionEntitlement);
                dayGR.addEncodedQuery('sys_idIN' + id);

                dayGR.query();
                while (dayGR.next()) {
                    if (dayGR.type == 'Deployment') {
                        deployment_name = deployment_name + dayGR.display_name + ',';
                    }
                    if (dayGR.type == 'Resource') {
                        machine_name = machine_name + dayGR.display_name + ',';
                    }
                }
                var catGR = new GlideRecord(appUtil.configuration.table.catalogItem);
                var deploymentCategory = gs.getProperty(appUtil.configuration.properties.deploymentCategory);
                catGR.addEncodedQuery('category=' + deploymentCategory + '^nameIN' + deployment_name);
                catGR.query();
                while (catGR.next()) {
                    var catalog = catGR.sys_id;
                    var mtomGR = new GlideRecord(this.appUtil.configuration.table.user_criteria_mtom);
                    mtomGR.initialize();
                    mtomGR.sys_scope = gs.getProperty(appUtil.configuration.properties.applicationSysID);
                    mtomGR.sc_cat_item = catalog;
                    mtomGR.user_criteria = inserted_record_id;
                    mtomGR.insert();

                }
                var catGR1 = new GlideRecord(appUtil.configuration.table.catalogItem);
                var resourceCategory = gs.getProperty(appUtil.configuration.properties.machineCategory);
                catGR1.addEncodedQuery('category=' + resourceCategory + '^nameIN' + machine_name);
                catGR1.query();
                while (catGR1.next()) {
                    var catalog = catGR1.sys_id;
                    var mtomGR = new GlideRecord(this.appUtil.configuration.table.user_criteria_mtom);
                    mtomGR.initialize();
                    mtomGR.sys_scope = gs.getProperty(appUtil.configuration.properties.applicationSysID);
                    mtomGR.sc_cat_item = catalog;
                    mtomGR.user_criteria = inserted_record_id;
                    mtomGR.insert();



                }

                //}

            }
				}


            gs.setProperty(this.appUtil.configuration.properties.runPostUpgradeScript, false);

        } catch (e) {
            CASLogger.error("Exception caught inside CASDaoUtil.ScheduleJobForCMDB" + e);
        }
    },


    ScheduledJobProjectImport: function() {
        try {
            this.appUtil = new CASAppUtil();
            var gr = new GlideRecord(this.appUtil.configuration.table.register_cas);
            gr.addQuery("active", "true");
            gr.query();
            while (gr.next()) {

                var g = new vRAAvoidParallelScheduleJobs();
                var check = g.checkQueueEmpty('Project Import', gr.sys_id);
                if (check == true) {
                    this.insert("StartImportProject", " ", " ", gr.sys_id + '');
                    this.insert("ReconcileImportProject", " ", " ", gr.sys_id + '');
                }

                if (check == false) {
                    CASLogger.info('Schedule job is already running for Project Import');
                }


            }
        } catch (e) {
            CASLogger.error("Exception caught inside CASDaoUtil.ScheduledJobProjectImport" + e);
        }

    },


    ScheduledJobCatalogImport: function() {
        try {
            this.appUtil = new CASAppUtil();
            var gr = new GlideRecord(this.appUtil.configuration.table.register_cas);
            gr.addQuery("active", "true");
            gr.query();
            while (gr.next()) {
                var g = new vRAAvoidParallelScheduleJobs();
                var check = g.checkQueueEmpty('Catalog Import', gr.sys_id);
                if (check == true) {
                    this.insert("ScheduledImportCatalog", " ", "", gr.sys_id + '');
                    this.insert("ReconcileImportCatalog", " ", " ", gr.sys_id + '');
                }
                if (check == false) {

                    CASLogger.info('Schedule job is already running for Catalog Import');
                }
            }
        } catch (e) {
            CASLogger.error("Exception caught inside CASDaoUtil.ScheduledJobCatalogImport" + e);
        }

    },


    ScheduledJobForDeleteQueue: function() {
        try {
            this.appUtil = new CASAppUtil();
            var gr = new GlideRecord(this.appUtil.configuration.table.queue);
            var duration = gs.getProperty(this.appUtil.configuration.properties.duration);
            gr.addEncodedQuery("sys_created_on<=javascript:gs.endOfThisWeek(" + duration + ")");
            gr.deleteMultiple();
            CASLogger.info('Inside CASDaoUtil: Record Deleted from CAS Queue');
        } catch (e) {
            CASLogger.error('Exception caught inside CASDaoUtil.ScheduledJobForDeleteQueue: ' + e);
            this.errorHandler.notify("Exception caught inside CASDaoUtil.ScheduledJobForDeleteQueue: " + e);
        }
    },

    UpdateApiToken: function() {
        try {
            this.appUtil = new CASAppUtil();
            var runPostUpgradeScript = gs.getProperty(this.appUtil.configuration.properties.runPostUpgradeScript);
            if (runPostUpgradeScript + '' == 'true') {
                this.runPostUpgradeScript();
            }
            var gr = new GlideRecord(this.appUtil.configuration.table.register_cas);
            gr.addQuery("active", "true");
            gr.query();
            while (gr.next()) {

                var updateToken = new vRARegistervRA().generateApiToken(gr);
                if (updateToken != "")
                    gr.api_token = updateToken;
                gr.update();
            }
        } catch (e) {
            CASLogger.error("Exception caught inside CASDaoUtil.updateApiToken" + e);
        }
    },



    insert: function(topic, response, request, selectedOrganization) {
        try {
            CASLogger.debug('Inside  CASDaoUtil.insert');
            this.appUtil = new CASAppUtil();
            var gr = new GlideRecord(this.appUtil.configuration.table.queue);
            gr.initialize();
            gr.topic = topic;
            gr.state = 'Ready';
            gr.response = response;
            gr.request = request;
            gr.organization = selectedOrganization;
            gr.insert();

        } catch (e) {
            CASLogger.error("Exception caught inside CASDaoUtil.InsertIntoQueueTable" + e);
        }

    },

    GetOrganizationId: function(selectedProjects) {

        try {
            CASLogger.debug('Inside  CASDaoUtil.GetOrganizationId : getting of organizationId');
            this.appUtil = new CASAppUtil();
            var gr = new GlideRecord(this.appUtil.configuration.table.project);
            gr.addQuery("sys_id", selectedProjects);
            gr.query();
            while (gr.next()) {

                //return gr.organization;
                return gr;
            }
        } catch (e) {
            CASLogger.error("Exception caught inside CASDaoUtil.GetOrganizationId" + e);
        }
    },



    SelectedOrganizationCheck: function(selectedOrganization) {
        try {
            CASLogger.debug('Inside  CASDaoUtil.SelectedOrganizationCheck');
            this.appUtil = new CASAppUtil();
            var gr = new GlideRecord(this.appUtil.configuration.table.register_cas);
            gr.addQuery("sys_id", selectedOrganization);
            gr.query();
            if (gr.next()) {

                return true;
            }
        } catch (e) {
            CASLogger.error("Exception caught inside CASDaoUtil.SelectedOrganizationCheck" + e);
        }
    },

    createProject: function(current) {
        try {
            CASLogger.debug('Inside  CASDaoUtil.createProject');
            this.appUtil = new CASAppUtil();
            //by Manish.
            var queueResponse = this.appUtil.parse(current.response);
            var organization = current.organization;
            //var casHost=this.appUtil.configuration.api.hostname;

            var endPoint = '';
            var midserver = '';
            var token = '';
            var numOfDeploy = '';

            //for cas.
            if (organization.select_automation_service == 'vRealiseAutomationCloud') {
                token = current.organization.api_token.getDecryptedValue().toString();
                endPoint = organization.cas_url + "/deployment/api/projects/" + queueResponse.id + "/deployment-count";
            }

            //for vra.
            if (organization.select_automation_service == 'vrealizeAutomationService') {

                endPoint = organization.hostname + "/deployment/api/projects/" + queueResponse.id + "/deployment-count";
                midserver = organization.mid_server.name;
                token = current.organization.api_token.getDecryptedValue().toString();
            }
            var response1 = this.appUtil.makeApiCall(endPoint, 'get', '', midserver, "application/json", "application/json", 'Bearer ' + token);

            if (response1.haveError()) {
                CASLogger.error('REST call error found inside CASDaoUtil.createProject: ' + response.getErrorMessage());
                return;

            } else {
                var responsebody = response1.getBody();
                var obj1 = this.appUtil.parse(responsebody);

                numOfDeploy = obj1.totalElements;
            }


            var obj = this.appUtil.parse(current.response);
            var gr = new GlideRecord(this.appUtil.configuration.table.project);
            gr.addQuery("project_id", obj.id);
            gr.addQuery('organization', organization);
            gr.query();
            if (gr.next()) {
                gr.sys_scope = gs.getProperty(this.appUtil.configuration.properties.applicationSysID);
                gr.sc_catalog = gs.getProperty(this.appUtil.configuration.properties.catalogSysID);
                gr.parent = gs.getProperty(this.appUtil.configuration.properties.parentCategorySysID);
                gr.title = obj.name;
                gr.project_name = obj.name;
                gr.project_description = obj.description;
                gr.project_id = obj.id;
                gr.organization_id = obj.orgId;
                gr.administrator_user = obj.administrators;
                gr.member_user = obj.members;
                gr.cost = obj.cost + " " + obj.costUnit;
                gr.organization = current.organization;
                //by Manish
                gr.u_deployments = numOfDeploy;
                //
                gr.update();

            } else {
                gr.initialize();
                gr.sys_scope = gs.getProperty(this.appUtil.configuration.properties.applicationSysID);
                gr.sc_catalog = gs.getProperty(this.appUtil.configuration.properties.catalogSysID);
                gr.parent = gs.getProperty(this.appUtil.configuration.properties.parentCategorySysID);
                gr.title = obj.name;
                gr.project_name = obj.name;
                gr.project_description = obj.description;
                gr.project_id = obj.id;
                gr.organization_id = obj.orgId;
                gr.administrator_user = obj.administrators;
                gr.member_user = obj.members;
                gr.cost = obj.cost + " " + obj.costUnit;
                gr.organization = current.organization;
                //by Manish
                gr.u_deployments = numOfDeploy;
                //
                gr.insert();
            }
        } catch (e) {
            CASLogger.error("Exception Caught inside CASDaoUtil.createProject" + e);
        }

    },



    /*
															USAGE: This function is used to create catalog categories for catalog
															PARAM: catalog-> Contains the sysid of the catalog.
															parsedCatalogItem -> json for all the categories(projects)
 															*/
    insertCatalolgCategory: function(catalog, parsedCatalogItem) {
        try {
            CASLogger.debug("Inside CASDaoUtil.insertCatalolgCategoory");
            var categoryid = '';
            var app_scope = gs.getProperty(this.appUtil.configuration.properties.applicationSysID);

            for (var i = 0; i < parsedCatalogItem.projects.length; i++) {
                var grCategory = new GlideRecord(this.appUtil.configuration.table.project);
                grCategory.addQuery('project_id', parsedCatalogItem.projects[i].id);
                grCategory.query();
                if (grCategory.next()) {
                    //categoryid = categoryid + grCategory.sys_id + ',';


                    var grCatCategory = new GlideRecord(this.appUtil.configuration.table.catalogCategory);
                    grCatCategory.addQuery("sc_category", grCategory.sys_id);
                    grCatCategory.addQuery('sc_cat_item', catalog);
                    grCatCategory.query();
                    if (grCatCategory.next()) {
                        grCatCategory.sys_scope = app_scope;
                        grCatCategory.sc_category = grCategory.sys_id;
                        grCatCategory.sc_cat_item = catalog;
                        grCatCategory.update();
                    } else {

                        grCatCategory.initialize();
                        grCatCategory.sys_scope = app_scope;
                        grCatCategory.sc_category = grCategory.sys_id;
                        grCatCategory.sc_cat_item = catalog;
                        grCatCategory.insert();
                    }


                }
            }

            //return categoryid.slice(0,-1);
        } catch (e) {
            CASLogger.error("Exception Caught inside CASDaoUtil.insertCatalolgCategoory " + e);
        }
    },

    reconcileCatalogCategory: function(catalog, parsedCatalogItem) {
        try {
            CASLogger.debug("Inside CASDaoUtil.reconcileCatalogCategory");
            var categorySysID = '';
            for (var i = 0; i < parsedCatalogItem.projects.length; i++) {
                var grCategory = new GlideRecord(this.appUtil.configuration.table.project);
                grCategory.addQuery('project_id', parsedCatalogItem.projects[i].id);
                grCategory.query();
                while (grCategory.next()) {
                    categorySysID = categorySysID + grCategory.sys_id + ',';
                }
            }
            var grCatCategory = new GlideRecord(this.appUtil.configuration.table.catalogCategory);
            grCatCategory.addQuery('sc_cat_item', catalog);
            grCatCategory.query();
            while (grCatCategory.next()) {
                var checkId = categorySysID.indexOf(grCatCategory.sc_category);
                if (checkId > -1) {
                    CASLogger.debug("The Record Exist in the list");
                } else {
                    grCatCategory.deleteRecord();
                }
            }
        } catch (e) {
            CASLogger.error("Exception Caught inside CASDaoUtil.reconcileCatalogCategory " + e);
        }
    },



    checkIREPluginAccess: function() {
        try {
            var pMgr = new GlidePluginManager();
            var isActive = pMgr.isActive('com.snc.cmdb.scoped');
            if (isActive) {
                return false;
            }

        } catch (e) {
            CASLogger.error("Exception Caught inside CASDaoUtil.checkIREPluginAccess " + e);
        }

    },

    checkUserCriteriaPluginAccess: function() {
        try {
            var pMgr = new GlidePluginManager();
            var isActive = pMgr.isActive('com.glideapp.user_criteria.scoped.api');
            if (isActive) {
                return false;
            }
        } catch (e) {
            CASLogger.error("Exception Caught inside CASDaoUtil.checkUserCriteriaPluginAccess " + e);
        }
    },




    checkUserCriteriaTableAccess: function() {
        try {
            var table_array_string = "sc_cat_item_user_criteria_mtom";
            var query_string = 'nameIN' + table_array_string;
            var db_objectGR = new GlideRecord('sys_db_object');
            db_objectGR.addEncodedQuery(query_string);
            db_objectGR.query();
            if (db_objectGR.next()) {
                if (db_objectGR.read_access == true && db_objectGR.create_access == true && db_objectGR.update_access == true) {
                    return false;
                }
            }
        } catch (e) {
            CASLogger.error("Exception Caught inside CASDaoUtil.checkUserCriteriaTableAccess " + e);
        }

    },

    checkQuestionChoiceTableAccess: function() {
        try {
            var table_array_string = "question_choice";
            var query_string = 'nameIN' + table_array_string;
            var db_objectGR = new GlideRecord('sys_db_object');
            db_objectGR.addEncodedQuery(query_string);
            db_objectGR.query();
            if (db_objectGR.next()) {
                if (db_objectGR.read_access == true && db_objectGR.create_access == true && db_objectGR.update_access == true && db_objectGR.delete_access == true) {
                    return false;
                }
            }
        } catch (e) {
            CASLogger.error("Exception Caught inside CASDaoUtil.checkQuestionChoiceTableAccess " + e);
        }
    },

    checkCatalogCategoryTableAccess: function() {
        try {
            var table_array_string = "sc_cat_item_category";

            var query_string = 'nameIN' + table_array_string;
            var db_objectGR = new GlideRecord('sys_db_object');
            db_objectGR.addEncodedQuery(query_string);
            db_objectGR.query();
            if (db_objectGR.next()) {
                if (db_objectGR.read_access == true && db_objectGR.create_access == true && db_objectGR.update_access == true && db_objectGR.delete_access == true) {
                    return false;
                }
            }
        } catch (e) {
            CASLogger.error("Exception Caught inside CASDaoUtil.checkCatalogCategoryTableAccess " + e);
        }
    },

    checkIREConfiguration: function() {
        try {
            var gr = new GlideRecord('sys_choice');
            gr.addQuery('label', 'ITSM 8.x');
            gr.addQuery('value', 'ITSM 8.x');
            gr.query();
            if (gr.next()) {
                return false;
            }
        } catch (e) {
            CASLogger.error("Exception Caught inside CASDaoUtil.checkIREConfiguration " + e);
        }
    },



    checkJSUtilConfiguration: function() {
        try {
            var gr = new GlideRecord('sys_script_include');
            gr.addQuery('name', 'JSUtil');
            gr.addQuery('access', 'public');
            gr.query();
            if (gr.next()) {
                return false;
            }
        } catch (e) {
            CASLogger.error("Exception Caught inside CASDaoUtil.checkJSUtilConfiguration " + e);
        }
    },


    /*This function will check for all pre-configurations
      required in ITSM plugin.
      Error message displayed for every missed configuration is generated from
      sys_ui_message table.. */
    checkConfigurations: function() {
        try {
            var missingConfiguration = [];

            var checkIREPlugin = this.checkIREPluginAccess();
            if (checkIREPlugin != false) {
                missingConfiguration.push('IREPluginAccess');
            }
            var checkUserCriteriaPlugin = this.checkUserCriteriaPluginAccess();
            if (checkUserCriteriaPlugin != false) {
                missingConfiguration.push('UserCriteriaPluginAccess');
            }
            var checkUserCriteriaAccess = this.checkUserCriteriaTableAccess();
            if (checkUserCriteriaAccess != false) {
                missingConfiguration.push('UserCriteriaTableAccess');
            }

            var checkQuestionChoiceAccess = this.checkQuestionChoiceTableAccess();
            if (checkQuestionChoiceAccess != false) {
                missingConfiguration.push('QuestionChoiceTableAccess');
            }

            var checkCatalogCategoryAccess = this.checkCatalogCategoryTableAccess();
            if (checkCatalogCategoryAccess != false) {
                missingConfiguration.push('CatalogCategoryTableAccess');
            }

            var checkIREConfig = this.checkIREConfiguration();
            if (checkIREConfig != false) {
                missingConfiguration.push('IREConfiguration');
            }

            var checkJSUtil = this.checkJSUtilConfiguration();
            if (checkJSUtil != false) {
                missingConfiguration.push('JSUtilConfiguration');
            }

            if (missingConfiguration.length > 0) {
                return missingConfiguration.toString();
            } else {
                return true;
            }
        } catch (e) {
            CASLogger.error("Exception Caught inside CASDaoUtil.checkConfigurations " + e);
        }
    },




    RegisterRecordCheck: function(current) {
        try {
            CASLogger.debug('Inside  CASDaoUtil.RegisterRecordCheck : Check of Registered Record');
            var nme = current.name.trim();
            var gr = new GlideRecord(current.getTableName());

            if (current.select_automation_service == 'vRealiseAutomationCloud') {
                //gr.addQuery("select_automation_service", current.select_automation_service);
                //gr.addQuery('name',current.name);
                //gr.addQuery("refresh_key",current.refresh_key.getDecryptedValue());
                gr.addEncodedQuery('refresh_key=' + current.refresh_key + '^ORname=' + current.name.trim());
                //refresh_key=Tq9/lZ0rS6FmtO9GD3ERMKS5//dXQjKaqdxZVOBcP6hsP7dSjISf2mo3EvSpIulWLXl4vI8VyLBxSd/kKTJCTXsxpJr4TKMY^name=CAS
                //refresh_key=Tq9/lZ0rS6FmtO9GD3ERMKS5//dXQjKaqdxZVOBcP6hsP7dSjISf2mo3EvSpIulWLXl4vI8VyLBxSd/kKTJCTXsxpJr4TKMY^ORname=CAS
            }
            if (current.select_automation_service == 'vrealizeAutomationService') {
                gr.addEncodedQuery('name=' + current.name.trim() + '^ORhostname=' + current.hostname.trim());
                //+'^ORusername='+current.username.trim()
                //gr.addQuery('name',current.name);
                //gr.addQuery("hostname",current.hostname);
                //gr.addQuery("mid_server",current.mid_server);
                //gr.addQuery("username",current.username);
                //VRA registration process.
            }
            gr.query();
            //matching the conditions. - shivraj.
            if (gr.next()) {
                return true;
                /*
																		if(current.select_automation_service == 'vRealiseAutomationCloud'){
																			CASLogger.error('gr.name '+gr.name );
																			CASLogger.error('name '+nme);
																			if(gr.name == nme)
																				{
																				CASLogger.error("Inside name loop");
																				return true;
																			}
																			else if(gr.refresh_key.getDecryptedValue()==current.refresh_key.getDecryptedValue())
																				{
																				CASLogger.error("Inside rkey loop");
																				return true;
																			}
																		}

																		else{
																			if(current.select_automation_service == 'vrealizeAutomationService'){
																				if(gr.hostname == current.hostname.trim()){
																					return true;
																				}
																				else if(gr.mid_server == current.mid_server.trim()){
																					return true;
																				}
																				else if(gr.username == current.username.trim()){
																					return true;
																				}
																			}
																		}
 																		*/

                // 			var gr = new GlideRecord(current.getTableName());
                // 			gr.query();
                // 			while (gr.next()) {


                // 				if(gr.name==current.name.trim())
                // 					{

                // 					return true;
                // 				}


                // 				if (gr.refresh_key.getDecryptedValue()==current.refresh_key.getDecryptedValue())
                // 					{

                // 					return false;
                // 				}

                // 			}


            }
        } catch (e) {
            CASLogger.error("Exception caught inside CASDaoUtil.RegisterRecordCheck" + e);
        }


    },

    reconcileProjectCheck: function(projectId, current) {
        try {
            CASLogger.debug('Inside  CASDaoUtil.reconcileProjectCheck : Check of reconcile project');
            this.appUtil = new CASAppUtil();
            var gr = new GlideRecord(this.appUtil.configuration.table.project);
            gr.addQuery("organization", current.organization);
            gr.query();
            while (gr.next()) {
                var checkId = projectId.indexOf(gr.project_id);
                if (checkId > -1) {

                    CASLogger.debug("The Record Exist in the list" + gr.name);
                } else {
                    var Catalog = new GlideRecord(this.appUtil.configuration.table.catalogCategory);
                    Catalog.addEncodedQuery("sc_category", gr.sys_id);
                    Catalog.query();
                    while (Catalog.next()) {
                        Catalog.deleteRecord();
                    }
                    gr.deleteRecord();
                }
            }
        } catch (e) {
            CASLogger.error("Exception Caught inside CASDaoUtil.reconcileProjectCheck " + e);
        }

    },

    reconcileCatalogCheck: function(catalogId, current) {
        try {
            CASLogger.debug('Inside  CASDaoUtil.reconcileCatalogCheck : Check of reconcile catalog Items');
            this.appUtil = new CASAppUtil();
            var gr = new GlideRecord(this.appUtil.configuration.table.catalogItem);
            gr.addQuery("organisation_name", current.organization);
            gr.query();
            while (gr.next()) {
                var checkId = catalogId.indexOf(gr.cas_uid);
                if (checkId > -1) {

                    CASLogger.debug("The Record Exist in the list catalog item" + gr.name);
                } else {
                    var vr = new GlideRecord(this.appUtil.configuration.table.entitlement);
                    vr.addQuery('endpoint', current.organization);
                    vr.query();
                    while (vr.next()) {

                        var entitledSysIds = vr.select_catalog_items.split(',');

                        var sysIds = '';
                        for (var i = 0; i < entitledSysIds.length; i++) {
                            if (entitledSysIds[i] != gr.sys_id) {
                                sysIds = sysIds + entitledSysIds[i] + ',';
                            }

                        }
                        vr.select_catalog_items = sysIds;
                        vr.update();

                    }
                    var zr = new GlideRecord(this.appUtil.configuration.table.variable);
                    zr.addQuery('cat_item', gr.sys_id);
                    zr.query();
                    while (zr.next()) {

                        var item = new sn_sc.CatalogItemVariable(zr.sys_id);
                        item.deleteRecord('true');
                    }
                    var catItem = new sn_sc.CatItem(gr.sys_id);
                    catItem.deleteRecord('true');
                    //gr.deleteRecord();
                }
            }


        } catch (e) {
            CASLogger("Exception Caught inside CASDaoUtil.reconcileCatalogCheck " + e);
        }

    },

    //reports
    getReportData: function(tablename, group_by, filter) {
        try {
            CASLogger.debug('Inside  CASDaoUtil.getReportData');
            var gr = new GlideAggregate(tablename);
            gr.addEncodedQuery(filter);
            gr.addAggregate('COUNT');
            gr.groupBy(group_by);
            gr.query();
            //gs.addInfoMessage('tab'+tablename+gr.getRowCount())
            var inputdata = [];
            while (gr.next()) {
                inputdata.push({
                    'name': (gr[options.group_by + '']) ? gr[options.group_by + ''].getDisplayValue() : '',
                    'value': gr.getAggregate('COUNT')

                });
            }
            return inputdata;
        } catch (e) {
            CASLogger.error("Exception caught inside CASDaoUtil.getReportData  " + e);
        }
    },

    fetchRequestReportList: function(tablename, limit, group_by, filter) {
        try {
            CASLogger.debug('Inside  CASDaoUtil.fetchRequestReportList');
            var arr = [];
            var appUtil = new CASAppUtil();
            var gr1 = new GlideRecord(tablename);
            gr1.setLimit(limit);
            gr1.addEncodedQuery(filter);
            gr1.orderByDesc('sys_created_on');
            gr1.query();
            while (gr1.next()) {
                arr.push({
                    "item": (gr1.cat_item.name) ? gr1.cat_item.name + '' : '',
                    "name": (gr1.number) ? gr1.number + '' : '',
                    "createdAt": (gr1.sys_created_on) ? gr1.sys_created_on + '' : '',
                    "status": (gr1[group_by + ''].getDisplayValue()) ? gr1[group_by + ''].getDisplayValue() : '',
                    "link": "/" + gs.getProperty(appUtil.configuration.properties.portalPrefix) + "?id=" + appUtil.configuration.page.activitiesForm + "&table=" + appUtil.configuration.table.requests + "&sysId=" + gr1.getUniqueValue() + "&order=6"
                });
            }
            return arr;
        } catch (e) {
            CASLogger.error("Exception caught inside CASDaoUtil.fetchRequestReportList  " + e);
        }
    },

    fetchDeploymentReportList: function(tablename, limit, group_by, filter) {
        try {
            CASLogger.debug('Inside  CASDaoUtil.fetchDeploymentReportList');
            var arr = [];
            var appUtil = new CASAppUtil();
            var gr1 = new GlideRecord(tablename);
            gr1.setLimit(limit);
            gr1.addEncodedQuery(filter);
            gr1.orderByDesc('created_at');
            gr1.query();
            while (gr1.next()) {
                arr.push({
                    "name": (gr1.name) ? gr1.name + '' : '',
                    "createdAt": (gr1.created_at) ? gr1.created_at + '' : '',
                    "status": (gr1[group_by + ''].getDisplayValue()) ? gr1[group_by + ''].getDisplayValue() + '' : '',
                    "link": "/" + gs.getProperty(appUtil.configuration.properties.portalPrefix) + "?id=" + appUtil.configuration.page.deploymentDetail + "&sysId=" + gr1.getUniqueValue() + "&list=false"
                });
            }
            return arr;
        } catch (e) {
            CASLogger.error("Exception caught inside CASDaoUtil.fetchDeploymentReportList  " + e);

        }
    },

    fetchExpiredDeploymentReportList: function(tablename, limit, filter) {
        try {
            CASLogger.debug('Inside  CASDaoUtil.fetchExpiredDeploymentReportList');
            var arr = [];
            var appUtil = new CASAppUtil();
            var gr1 = new GlideRecord(tablename);
            gr1.setLimit(limit);
            gr1.addEncodedQuery(filter);
            gr1.orderBy('expires_on');

            gr1.query();
            while (gr1.next()) {
                arr.push({
                    "name": (gr1.name) ? gr1.name + '' : '',
                    "project": (gr1.u_project.getDisplayValue()) ? gr1.u_project.getDisplayValue() + '' : '',
                    "createdAt": (gr1.expires_on) ? gr1.expires_on + '' : '',
                    //"status":gr1[group_by+''].getDisplayValue(),
                    "link": "/" + gs.getProperty(appUtil.configuration.properties.portalPrefix) + "?id=" + appUtil.configuration.page.deploymentDetail + "&sysId=" + gr1.getUniqueValue()
                });
            }
            return arr;
        } catch (e) {
            CASLogger.error("Exception caught inside CASDaoUtil.fetchExpiredDeploymentReportList  " + e);
        }
    },

    fetchApprovalReportList: function(tablename, limit) {
        try {
            CASLogger.debug('Inside  CASDaoUtil.fetchApprovalReportList');
            var arr = [];
            var appUtil = new CASAppUtil();
            var assignment_group = gs.getProperty(this.appUtil.configuration.properties.assignment_group);
            var gr1 = new GlideRecord(tablename);
            gr1.setLimit(limit);
            //gr1.addQuery('state=requested^group.assignment_group='+assignment_group+'^approverDYNAMIC90d1921e5f510100a9ad2572f2b477fe');
            gr1.addQuery('state=requested^group.assignment_group.nameIN' + assignment_group + '^approverDYNAMIC90d1921e5f510100a9ad2572f2b477fe');
            gr1.orderByDesc('sys_created_on');
            gr1.query();
            while (gr1.next()) {
                arr.push({
                    //"item":(gr1.sysapproval.cat_item.getDisplayValue())?gr1.sysapproval.cat_item.getDisplayValue()+'':'',
                    "name": (gr1.sysapproval.getDisplayValue()) ? gr1.sysapproval.getDisplayValue() + '' : '',
                    "createdAt": (gr1.sys_created_on) ? gr1.sys_created_on + '' : '',
                    "link": "/" + gs.getProperty(appUtil.configuration.properties.portalPrefix) + "?id=" + appUtil.configuration.page.activitiesForm + "&table=" + appUtil.configuration.table.approvals + "&sysId=" + gr1.getUniqueValue() + "&order=7&filter=Awaiting Approval"
                });

            }
            return arr;
        } catch (e) {
            CASLogger.error("Exception caught inside CASDaoUtil.fetchApprovalReportList  " + e);

        }
    },

    getTotalRecordCount: function(tablename, filter) {
        try {
            CASLogger.debug('Inside  CASDaoUtil.getTotalRecordCount');
            /*	
			var gr=new GlideRecord(tablename);
			if(filter!='')
				gr.addEncodedQuery(filter);
			gr.query();
			return gr.getRowCount();
*/
            var gr = new GlideAggregate(tablename);
            if (filter != '')
                gr.addEncodedQuery(filter);
            gr.addAggregate('COUNT');
            //gs.addErrorMessage('que '+gr.getEncodedQuery())

            gr.query();
            if (gr.next())
                return gr.getAggregate('COUNT');



        } catch (e) {
            CASLogger.error("Exception caught inside CASDaoUtil.getTotalRecordCount  " + e);
        }

    },

    fetchEntitledCategory: function(org_sys_id, category) {
        //gs.addInfoMessage(org_sys_id+" "+category);
        var ent = new GlideRecordSecure(this.appUtil.configuration.table.entitlement);
        ent.addEncodedQuery('endpoint=' + org_sys_id);
        ent.addEncodedQuery('entitled_usersDYNAMIC90d1921e5f510100a9ad2572f2b477fe^ORentitled_groupsDYNAMICd6435e965f510100a9ad2572f2b47744^active=true');
        ent.query();
        while (ent.next()) {
            //gs.addInfoMessage("while ke ander");
            var projects = ent.select_projects.split(',');
            if (projects.indexOf(category) != -1) {
                return true;
            }
        }
        //gs.addInfoMessage("false  ho gaya.");
        return false;

    },


    fetchCatalogItems: function(paramObject) {

        try {
            CASLogger.debug('Inside the CASDaoUtil.fetchCatalogItems');
            var appUtil = new CASAppUtil();
            var gr = new GlideRecord(paramObject.table);

            if (paramObject && paramObject.query) {
                if (paramObject.query.includes('category=')) {
                    var newQuery = paramObject.query.split('^');
                    gr.addEncodedQuery(newQuery[0] + '^' + newQuery[2]);
                } else {
                    gr.addEncodedQuery(paramObject.query);
                }

            }

            if (paramObject.hasAdminRole == 'true') {
                gr.chooseWindow(paramObject.lowerWindow, paramObject.upperWindow);
                gr.addEncodedQuery('active=true^cas_uidISNOTEMPTY');
                gr.orderBy('name');
            }

            gr.query();
            var gr1 = new GlideRecord(this.appUtil.configuration.table.catalogItem);
            var catlog_items_arr = [];
            var heading;
            var entitled_sys_ids = '';


            if (paramObject.hasAdminRole == 'true') {

                if ((paramObject.query) && paramObject.query.includes('category=')) {

                    var curCategory = newQuery[1].replace('category=', '');
                    var newGr = new GlideRecord('sc_cat_item_category');
                    newGr.addEncodedQuery('sc_category=' + curCategory);
                    newGr.chooseWindow(paramObject.lowerWindow, paramObject.upperWindow);
                    newGr.orderBy('sc_cat_item');
                    newGr.query();
                    while (newGr.next()) {
                        catlog_items_arr.push({
                            "item_name": (newGr.sc_cat_item.name) ? (newGr.sc_cat_item.name) + '' : '',
                            "parent_name": (newGr.sc_category) ? newGr.sc_category.getDisplayValue() + '' : '',
                            "icon": "",
                            "description": (newGr.sc_cat_item.short_description) ? newGr.sc_cat_item.short_description + '' : 'No Description',
                            "deploymentLink": '/' + gs.getProperty(appUtil.configuration.properties.portalPrefix) + '?id=' + appUtil.configuration.page.deploymentCard + '&catalogSysId=' + newGr.sc_cat_item,
                            "item_id": newGr.sc_cat_item + '',
                            "parent_id": (newGr.sc_cat_item.category) ? newGr.sc_cat_item.category + '' : '',
                            "org_id": (newGr.sc_cat_item.category) ? newGr.sc_cat_item.category.organization + '' + '' : '',
                            "deployment_count": this.fetchPortalDeployments({
                                'catalogSysId': newGr.sc_cat_item,
                                'getCount': true
                            }) //this.fetchDeploymentCount(gr.getUniqueValue())
                        });
                    }

                }
            }

            while (gr.next()) {

                if (paramObject.hasAdminRole == 'true') {

                    if ((paramObject.query) && paramObject.query.includes('category=')) {
                        heading = (gr.category) ? gr.category.getDisplayValue() + ' - ' + 'Catalog Items' : '';
                    } else {
                        heading = (gr.organisation_name) ? gr.organisation_name.getDisplayValue() + ' - ' + 'Catalog Items' : '';

                        var categories = '';
                        var cat = new GlideRecord('sc_cat_item_category');
                        cat.addEncodedQuery('sc_cat_item=' + gr.sys_id);
                        cat.query();
                        while (cat.next()) {
                            categories += cat.sc_category.getDisplayValue() + ', ';
                        }

                        catlog_items_arr.push({
                            "item_name": (gr.name) ? (gr.name) + '' : '',
                            "parent_name": (gr.category) ? categories.replace(/,\s*$/, "") + '' : '',
                            "icon": "",
                            "description": (gr.short_description) ? gr.short_description + '' : 'No Description',
                            "deploymentLink": '/' + gs.getProperty(appUtil.configuration.properties.portalPrefix) + '?id=' + appUtil.configuration.page.deploymentCard + '&catalogSysId=' + gr.getUniqueValue(),
                            "item_id": gr.getUniqueValue() + '',
                            "parent_id": (gr.category) ? gr.category + '' : '',
                            "org_id": (gr.category) ? gr.category.organization + '' + '' : '',
                            "deployment_count": this.fetchPortalDeployments({
                                'catalogSysId': gr.getUniqueValue(),
                                'getCount': true
                            }) //this.fetchDeploymentCount(gr.getUniqueValue())
                        });
                    }

                }
                //not admin
                else if (paramObject.hasAdminRole == 'false') {
                    var entitlement = new GlideRecord(this.appUtil.configuration.table.entitlement);
                    var sysId = gr.user_criteria.name.split('_')[0] + '';
                    entitlement.addQuery('sys_id', sysId);
                    entitlement.query();
                    if (entitlement.next()) {
                        if (entitlement.active) {
                            entitled_sys_ids += gr.sc_cat_item + ',';
                        }
                    }
                }
            }

            if (paramObject.hasAdminRole == 'false') {
                var pageId = paramObject.pageId.split('/');
                gr1.addQuery('sys_idIN' + entitled_sys_ids);
                if (pageId[0] == 'organization') {
                    gr1.addQuery('organisation_name=' + pageId[1]);
                }
                if (pageId[0] == 'project') {
                    gr1.addQuery('^organisation_name=' + pageId[1]);
                }
                gr1.addEncodedQuery('active=true');
                gr1.orderBy('name');
                if (pageId[0] != 'project')
                    gr1.chooseWindow(paramObject.lowerWindow, paramObject.upperWindow);

                gr1.query();
                if (pageId[0] == 'project') {

                    var newGr1 = new GlideRecord('sc_cat_item_category');
                    newGr1.addEncodedQuery('sc_category=' + pageId[2]);
                    newGr1.addEncodedQuery('sc_cat_item.sys_idIN' + entitled_sys_ids);
                    newGr1.chooseWindow(paramObject.lowerWindow, paramObject.upperWindow);
                    newGr1.orderBy('sc_cat_item');
                    newGr1.query();
                    while (newGr1.next()) {
                        catlog_items_arr.push({
                            "item_name": (newGr1.sc_cat_item.name) ? (newGr1.sc_cat_item.name) + '' : '',
                            "parent_name": (newGr1.sc_cat_item.category) ? newGr1.sc_category.getDisplayValue() + '' : '',
                            "icon": "",
                            "description": (newGr1.sc_cat_item.short_description) ? newGr1.sc_cat_item.short_description + '' : 'No Description',
                            "deploymentLink": '/' + gs.getProperty(appUtil.configuration.properties.portalPrefix) + '?id=' + appUtil.configuration.page.deploymentCard + '&catalogSysId=' + newGr1.sc_cat_item,
                            "item_id": newGr1.sc_cat_item + '',
                            "parent_id": (newGr1.sc_cat_item.category) ? newGr1.sc_cat_item.category + '' : '',
                            "org_id": (newGr1.sc_cat_item.category) ? newGr1.sc_cat_item.category.organization + '' + '' : '',
                            "deployment_count": this.fetchPortalDeployments({
                                'catalogSysId': newGr1.sc_cat_item,
                                'getCount': true
                            }) //this.fetchDeploymentCount(gr.getUniqueValue())
                        });
                    }
                }

                while (gr1.next()) {
                    if (pageId[0] == 'project') {
                        heading = (gr1.category) ? gr1.category.getDisplayValue() + ' - ' + 'Catalog Items' : '';

                    } else {
                        heading = (gr1.organisation_name) ? gr1.organisation_name.getDisplayValue() + ' - ' + 'Catalog Items' : '';

                        var categories = '';
                        var cat = new GlideRecord('sc_cat_item_category');
                        cat.addEncodedQuery('sc_cat_item=' + gr1.sys_id);
                        cat.query();
                        while (cat.next()) {
                            if (this.fetchEntitledCategory(gr1.organisation_name, cat.sc_category.toString())) {
                                categories += cat.sc_category.getDisplayValue() + ', ';
                            }

                        }

                        catlog_items_arr.push({
                            "item_name": (gr1.name) ? (gr1.name) + '' : '',
                            "parent_name": (gr1.category) ? categories.replace(/,\s*$/, "") + '' : '',
                            "icon": "",
                            "description": (gr1.short_description) ? gr1.short_description + '' : 'No description',
                            "deploymentLink": '/' + gs.getProperty(appUtil.configuration.properties.portalPrefix) + '?id=' + appUtil.configuration.page.deploymentCard + '&catalogSysId=' + gr1.getUniqueValue(),
                            "item_id": gr1.getUniqueValue() + '',
                            "parent_id": (gr1.category) ? gr1.category + '' : '',
                            "org_id": (gr1.category) ? gr1.category.organization + '' + '' : '',
                            "deployment_count": this.fetchPortalDeployments({
                                'catalogSysId': gr1.getUniqueValue(),
                                'getCount': true
                            }) //this.fetchDeploymentCount(gr.getUniqueValue())
                        });
                    }

                }
            }


            return catlog_items_arr;
        } catch (e) {
            CASLogger.error('Exception caught inside CASDoaUtil.fetchCatalogItems: ' + e);
        }
    },

    fetchCatalogClientScripts: function(cat_id) {
        try {
            CASLogger.debug('Inside  CASDaoUtil.fetchCatalogClientScripts');
            var catGR = new GlideRecord(this.appUtil.configuration.table.clientScript);
            catGR.addEncodedQuery('cat_item=' + cat_id);
            catGR.addEncodedQuery('active=true');
            catGR.query();
            var scripts = {};
            while (catGR.next()) {
                if (catGR.type == 'onLoad') {

                    if (catGR.description.toString().split('__')[0] == 'getVersions' || catGR.description.toString().split('__')[0] == 'getProjects') {

                        if (typeof scripts[catGR.type] == 'undefined') {
                            scripts[catGR.type] = [];
                        }
                        scripts[catGR.type].push({
                            "label": catGR.name + '',
                            "description": catGR.description + ''
                        });
                    }
                } else if (catGR.type == 'onChange') {
                    // if(typeof scripts[catGR.type]=='undefined'){
                    // 	scripts[catGR.type]={};
                    // }
                    // var desc=catGR.description.split("__");
                    // var fun=desc[0];
                    // var field=desc[1];
                    // var arr=JSON.parse(desc[2]);
                    // for(var m=0;m<arr.length;m++){
                    // 	if(typeof scripts[catGR.type][arr[m]]=='undefined'){
                    // 		scripts[catGR.type][arr[m]]=[];
                    // 	}
                    // 	scripts[catGR.type][arr[m]].push({"label":catGR.name+'',"description":catGR.description+''});
                    // }
                }

            }
            return scripts;
        } catch (e) {

            CASLogger.error("Exception caught inside CASDaoUtil.fetchCatalogClientScripts  " + e);
        }
    },

    fetchCatalogFieldOptions: function(field_id) {
        try {
            CASLogger.debug('Inside  CASDaoUtil.fetchCatalogFieldOptions');
            var choiceGR = new GlideRecord(this.appUtil.configuration.table.choice);
            choiceGR.addQuery('question=' + field_id);
            choiceGR.orderBy('order');
            choiceGR.query();
            var isEmpty = true;
            var choice_arr = [];
            while (choiceGR.next()) {
                choice_arr.push({
                    "label": choiceGR.text + '',
                    "value": choiceGR.value + ''
                });
                isEmpty = false;
            }
            if (isEmpty) {
                choice_arr = [{
                    "label": "",
                    "value": ""
                }];
            }

            return choice_arr;
        } catch (e) {
            CASLogger.error("Exception caught inside CASDaoUtil.fetchCatalogFieldOptions  " + e);
        }

    },

    fetchCatalogFieldClientScripts: function(cat_id) {
        try {
            CASLogger.debug('Inside  CASDaoUtil.fetchCatalogFieldClientScripts');
            var catGR = new GlideRecord(this.appUtil.configuration.table.variable);
            catGR.addEncodedQuery('cat_item=' + cat_id);
            catGR.addEncodedQuery("active=true");
            catGR.orderBy('order');
            catGR.query();
            var i = 0,
                parent, scriptCount = 0;
            var clientScripts = [];
            while (catGR.next()) {

                if (catGR.type == 19) {
                    parent = i;
                    clientScripts.push({
                        "OnLoad": [],
                        "OnChange": [],
                        "dep": {},
                        "containerId": catGR.getUniqueValue() + '',
                        "order": parent,
                        "version": catGR.x_vmw_cloudservice_versions.getDisplayValue().replace(',', ''),
                        "executed": false
                    });
                    i++;
                } else {
                    if (clientScripts.length > 0 && (catGR.x_vmw_cloudservice_vra_default_value_client_script != '' || catGR.x_vmw_cloudservice_vra_value_client_script != '')) {
                        var defualtVS = catGR.x_vmw_cloudservice_vra_default_value_client_script + '';
                        var ValueS = catGR.x_vmw_cloudservice_vra_value_client_script + '';
                        if (ValueS != '') {
                            var splitScript2 = ValueS.split('__');
                            var obj = {
                                "type": splitScript2[0],
                                "uri": splitScript2[1],
                                "datasource": splitScript2[2],
                                "parameter": splitScript2[3],
                                "field_name": catGR.name.getDisplayValue(),
                                "operation": 'Values',
                                "refType": (splitScript2[5]) ? splitScript2[5] : '',
                                "field_type": (catGR.x_vmw_cloudservice_datatype) ? catGR.x_vmw_cloudservice_datatype.getDisplayValue() : ''
                            }

                            if (splitScript2[0] == 'OnLoad') {
                                scriptCount++;
                                clientScripts[parent].dep[catGR.name.getDisplayValue()] = (splitScript2[3] != 'Nodata') ? JSON.parse(splitScript2[3]) : [];
                                clientScripts[parent]['OnLoad'].push(obj);
                            } else if (splitScript2[0] == 'OnChange') {
                                scriptCount++;
                                clientScripts[parent].dep[catGR.name.getDisplayValue()] = (splitScript2[3] != 'Nodata') ? JSON.parse(splitScript2[3]) : [];
                                clientScripts[parent]['OnChange'].push(obj);
                            }

                        }

                        if (defualtVS != '') {
                            var splitScript = defualtVS.split('__');
                            var obj = {
                                "type": splitScript[0],
                                "uri": splitScript[1],
                                "datasource": splitScript[2],
                                "parameter": splitScript[3],
                                "field_name": catGR.name.getDisplayValue(),
                                "operation": 'Default Values',
                                "refType": (splitScript[5]) ? splitScript[5] : '',
                                "field_type": (catGR.x_vmw_cloudservice_datatype) ? catGR.x_vmw_cloudservice_datatype.getDisplayValue() : ''
                            }

                            if (splitScript[0] == 'OnLoad') {
                                scriptCount++;
                                clientScripts[parent].dep[catGR.name.getDisplayValue()] = (splitScript[3] != 'Nodata') ? JSON.parse(splitScript[3]) : [];
                                clientScripts[parent]['OnLoad'].push(obj);
                            } else if (splitScript[0] == 'OnChange') {
                                scriptCount++;
                                clientScripts[parent].dep[catGR.name.getDisplayValue()] = (splitScript[3] != 'Nodata') ? JSON.parse(splitScript[3]) : [];
                                clientScripts[parent]['OnChange'].push(obj);
                            }

                        }


                    }

                }

            }
            clientScripts.push(scriptCount);
            return clientScripts;
        } catch (e) {

            CASLogger.error("Exception caught inside CASDaoUtil.fetchCatalogFieldClientScripts  " + e);
        }
    },

    fetchDeploymentCount: function(cat_item_sysID) {
        try {
            CASLogger.debug('Inside  CASDaoUtil.fetchDeploymentCount');
            /*		var deploymentsGR=new GlideRecord(this.appUtil.configuration.table.deployments);
			deploymentsGR.addQuery('u_catalog_item='+cat_item_sysID);
			deploymentsGR.addQuery('operational_status',1);
			deploymentsGR.query();
			return deploymentsGR.getRowCount();
*/
            var deploymentsGR = new GlideAggregate(this.appUtil.configuration.table.deployments);
            deploymentsGR.addQuery('u_catalog_item=' + cat_item_sysID);
            deploymentsGR.addQuery('operational_status', 1);
            deploymentsGR.addAggregate('COUNT');
            deploymentsGR.query();
            if (deploymentsGR.next())
                return deploymentsGR.getAggregate('COUNT');



        } catch (e) {
            CASLogger.error("Exception caught inside CASDaoUtil.fetchDeploymentCount  " + e);
        }
    },

    //----------------------------------------checkAndSetPaginationLimit-------------------------------------
    // USAGE: This method is used to set the upper limit of request once its all records are fetched and
    //				sets the lower limit of the approval table accordingly
    // PARAMS: lower_window_request --> is the starting value of the request table value to be fetched
    //					upper_window_request --> is the ending value of the request table value to be fetched
    //					VALUES --> can accept INTEGRAL values
    checkAndSetPaginationLimit: function(paramObj) {
        try {
            CASLogger.debug('Inside CASDaoUtil.checkAndSetPaginationLimit: This method is used to set the upper limit of request once its all records are fetched and sets the lower limit of the approval table accordingly.');
            if (paramObj.upperWindow > paramObj.totalRecords) {
                return paramObj.totalRecords;
            }
            return paramObj.upperWindow;
        } catch (e) {
            CASLogger.error('Error caught inside CASDaoUtil.checkAndSetPaginationLimit widget: ' + e);
        }
    },

    //verify if endpoint's mid server status is up(true) or down(false) 
    checkMidServerConnection: function(endpoint_id) {
        var endpointGR = new GlideRecord(this.appUtil.configuration.table.register_cas);
        if (endpointGR.get(endpoint_id)) {
            //when endpoint is on premise
            if (endpointGR.mid_server != '') {
                if (endpointGR.mid_server.status == 'Down') {
                    gs.addErrorMessage('Unable to process request , MID Server status is Down.');
                    return false;
                } else if (endpointGR.mid_server.status == 'Up') {
                    return true;
                }
            }
            //when endpoint is of cloud type
            return true;
        }
    },

    //----------------------------------------createActionRequest method-------------------------
    // USAGE: This method is used to create a new record in Action request table on submission of any action on portal
    // PARAMS:	paramObject --> object containing reason string key and body json.
    //
    //VALUES --> paramObject --> Object
    createActionRequest: function(paramObject) {
        try {
            CASLogger.debug('Inside  CASDaoUtil.createActionRequest');

            var deploymentGR = new GlideRecord(this.appUtil.configuration.table.deployments);
            if (deploymentGR.get(paramObject.deployment_id + '')) {
                if (this.checkMidServerConnection(deploymentGR.u_project.organization) == false) {
                    return;
                }
            }

            var appUtil = new CASAppUtil();
            var actionReqGR = new GlideRecord(appUtil.configuration.table.actionRequests);
            actionReqGR.initialize();
            actionReqGR.action = paramObject.actionId;
            if (actionReqGR.action.deployment != '') {
                actionReqGR.u_name = actionReqGR.action.deployment.getDisplayValue();
                actionReqGR.u_endpoint = actionReqGR.action.deployment.u_project.organization.getDisplayValue();
            } else {
                actionReqGR.u_name_resource = actionReqGR.action.machine.getDisplayValue();
                actionReqGR.u_endpoint = actionReqGR.action.machine.project.organization.getDisplayValue();
                var gr = new GlideRecordSecure(appUtil.configuration.table.relationship);
                gr.addQuery('child', actionReqGR.action.machine);
                gr.query();
                if (gr.next()) {
                    actionReqGR.u_name = gr.parent.getDisplayValue();
                }
            }
            actionReqGR.reason = paramObject.reason;
            actionReqGR.body = paramObject.body;
            actionReqGR.state = paramObject.state;
            return actionReqGR.insert();
        } catch (e) {
            CASLogger.error("Exception caught inside CASDaoUtil.createActionRequest  " + e);
        }

    },


    //----------------------------------------createPaginationWindow method------------------------------------
    // USAGE: This method is used to create limits used for fetching the records from table
    // PARAMS:	current_record --> the current record passed by the user
    //		    window_size --> items to be displayed on the activity screen
    //
    //VALUES --> can accept INTEGRAL values
    createPaginationWindow: function(paramObj, callBack) {
        try {
            CASLogger.debug('Inside CASDaoUtil.createPaginationWindow: This method is used to create limits used for fetching the records from table.');
            callBack({
                lowerWindow: paramObj.currentRecord,
                upperWindow: paramObj.currentRecord + parseInt(paramObj.windowSize)
            });
        } catch (e) {
            CASLogger.error('Error caught inside CASDaoUtil.createPaginationWindow widget: ' + e);
        }
    },
    //--------------------------------calculatePaginationRows method-------------------------------------
    //  USAGE:  This method is used for calculating the number of records
    //					of approvals and request tables
    //  PARAMS: paramObj --> contains the every parameters required for pagination
    calculatePaginationRows: function(paramObj) {
        try {
            CASLogger.debug('Inside CASDaoUtil.calculatePaginationRows: This method is used for calculating the number of records.');
            var appUtil = new CASAppUtil();
            var totalRecords = 0;
            var ga = new GlideAggregate(paramObj.table);

            if (paramObj.table == appUtil.configuration.table.requests) {
                //===============================REQUEST LOGIC=================================
                if (paramObj.legend == "Rejected" || paramObj.legend == "Approved") {
                    ga.addQuery('approval', '=', paramObj.legend);
                } else if (paramObj.legend == "Closed Complete" || paramObj.legend == "Closed Incomplete" || paramObj.legend == "Work In Progress" || paramObj.legend == 'Open') {
                    var requestValue;
                    if (paramObj.legend == 'Closed Complete') {
                        requestValue = 3;
                    } else if (paramObj.legend == 'Closed Incomplete') {
                        requestValue = 4;
                    } else if (paramObj.legend == 'Work In Progress') {
                        requestValue = 2;
                    } else if (paramObj.legend == 'Open') {
                        requestValue = 1;
                    }
                    ga.addQuery('state', '=', requestValue);
                }
                if (gs.getUser().hasRole('admin') || gs.getUser().hasRole('x_vmw_vmware_vreal.vrealize_automation_catalog_admin')) {
                    if (paramObj.showMyFilter == 'true') {
                        ga.addEncodedQuery('request.requested_forDYNAMIC90d1921e5f510100a9ad2572f2b477fe');
                    }
                } else {
                    ga.addEncodedQuery('request.requested_forDYNAMIC90d1921e5f510100a9ad2572f2b477fe');
                }
                ga.addEncodedQuery('cat_item.sc_catalogsLIKE533fe9dfdb2233006adb48703996191b');

            } else if (paramObj.table == appUtil.configuration.table.approvals) {
                //========================= APPROVAL LOGIC======================================
                if (paramObj.legend == "Rejected" || paramObj.legend == "Approved" || paramObj.legend == "Requested") {
                    ga.addQuery('state', '=', paramObj.legend);
                }
                if (gs.getUser().hasRole('admin') || gs.getUser().hasRole('x_vmw_vmware_vreal.vrealize_automation_catalog_admin')) {
                    if (paramObj.showMyFilter == 'true') {
                        ga.addEncodedQuery('approverDYNAMIC90d1921e5f510100a9ad2572f2b477fe');
                    }
                } else {
                    ga.addEncodedQuery('approverDYNAMIC90d1921e5f510100a9ad2572f2b477fe');
                }

                //				ga.addEncodedQuery('group.assignment_group=' + gs.getProperty(appUtil.configuration.properties.assignment_group));
                //.sys_idIN				
                ga.addEncodedQuery('group.assignment_group.nameIN' + gs.getProperty(appUtil.configuration.properties.assignment_group));
                ga.addEncodedQuery('sysapproval.descriptionSTARTSWITH533fe9dfdb2233006adb48703996191b');

                //ga.addEncodedQuery('sysapproval.cmdb_ciISNOTEMPTY');

            } else if (paramObj.table == appUtil.configuration.table.deployments || paramObj.table == appUtil.configuration.table.machines) {
                //====================== MACHINE AND DEPLOYMENT LOGIC ===============================
                if (paramObj && paramObj.catalogSysId) {
                    ga.addEncodedQuery('u_catalog_item=' + paramObj.catalogSysId);
                }
                if (!gs.hasRole('admin')) {
                    ga.addEncodedQuery('servicenow_ownerDYNAMIC90d1921e5f510100a9ad2572f2b477fe^ORvra_ownerDYNAMIC90d1921e5f510100a9ad2572f2b477fe^ORshared_groupsDYNAMICd6435e965f510100a9ad2572f2b47744^ORentitled_usersDYNAMIC90d1921e5f510100a9ad2572f2b477fe');
                }
                ga.addEncodedQuery('operational_status!=6^ORoperational_status=NULL');
                ga.addEncodedQuery(paramObj.query);
            } else if (paramObj.table == appUtil.configuration.table.shared_resources) {
                //====================== SHARED RESOURCE LOGIC ===============================
                if (gs.hasRole('admin')) {
                    if (paramObj.showMyFilter == "true") {
                        ga.addEncodedQuery('created_byDYNAMIC90d1921e5f510100a9ad2572f2b477fe');
                    }
                } else {
                    ga.addEncodedQuery('created_byDYNAMIC90d1921e5f510100a9ad2572f2b477fe');
                }

            } else if (paramObj.table == appUtil.configuration.table.user_criteria_mtom) {

                var gr2 = new GlideRecord(paramObj.table);
                if (paramObj && paramObj.query)
                    gr2.addEncodedQuery(paramObj.query);

                gr2.query();
                var entitled_sys_ids = '';
                while (gr2.next()) {
                    var entitlement = new GlideRecord(appUtil.configuration.table.entitlement);
                    var sysId = gr2.user_criteria.name.split('_')[0] + '';
                    entitlement.addQuery('sys_id', sysId);
                    entitlement.query();
                    if (entitlement.next()) {
                        if (entitlement.active) {
                            entitled_sys_ids += gr2.sc_cat_item + ',';
                        }
                    }
                }

                var pageId = paramObj.pageId.split('/');
                var gr1 = new GlideAggregate(appUtil.configuration.table.catalogItem);
                gr1.addQuery('sys_idIN' + entitled_sys_ids);
                gr1.addEncodedQuery('active=true');
                if (pageId[0] == 'organization') {
                    gr1.addQuery('organisation_name=' + pageId[1]);
                }
                if (pageId[0] == 'project') {
                    totalRecords = 0;
                    var currentCat = pageId[2];
                    gr1.query();
                    while (gr1.next()) {
                        var cat = new GlideRecord('sc_cat_item_category');
                        cat.addEncodedQuery('sc_cat_item=' + gr1.sys_id);
                        cat.query();
                        while (cat.next()) {

                            if (cat.sc_category.toString() == currentCat) {
                                totalRecords++;
                            }
                        }
                    }
                    return totalRecords;
                } else {
                    gr1.addAggregate('COUNT');
                    gr1.query();
                    if (gr1.next())
                        return gr1.getAggregate('COUNT');
                }


            } else if (paramObj.table == appUtil.configuration.table.catalogItem) {
                if (paramObj.query.includes('category=')) {

                    var newQuery = paramObj.query.split("^");
                    totalRecords = 0;
                    var currentCat = newQuery[1].split('=')[1];

                    var ga1 = new GlideAggregate('sc_cat_item_category');
                    ga1.addEncodedQuery('sc_category=' + currentCat);
                    ga1.addAggregate('COUNT');
                    ga1.query();
                    if (ga1.next())
                        totalRecords = ga1.getAggregate('COUNT');

                    return totalRecords;

                } else {
                    if (paramObj.query) {
                        ga.addEncodedQuery(paramObj.query);
                        ga.addEncodedQuery('active=true^cas_uidISNOTEMPTY');
                    }


                    ga.addAggregate('COUNT');
                    ga.query();
                    if (ga.next())
                        totalRecords = ga.getAggregate('COUNT');
                    return totalRecords;
                }
            }
            if (paramObj.query)
                ga.addEncodedQuery(paramObj.query);

            ga.addAggregate('COUNT');
            ga.query();
            if (ga.next())
                totalRecords = ga.getAggregate('COUNT');
            return totalRecords;
        } catch (e) {
            CASLogger.error('Error caught inside CASDaoUtil.calculatePaginationRows widget: ' + e);
        }
    },

    //---------------------------------POPULATE_ARRAY method---------------------------------------
    //  USAGE: This method is used for fetching records and creating JSON array
    //					to be rendered on the html template
    /*PARAMS: paramObject : {
    																									currentRecord: number;
    																									lowerWindow: number;
    																									upperWindow: number;
    																									legend: string;
    																									totalRecords: number;
    																									showMyFilter: boolean;
    																									legendColor: string;
    																								}*/
    populateArray: function(paramObject, callBack) {
        try {
            CASLogger.debug('Inside CASDaoUtil.populateArray: This method is used for fetching records and creating JSON array to be rendered on the html template');
            var response = this[paramObject.method](paramObject);
            callBack(response);
        } catch (e) {
            CASLogger.error('Error caught inside CASDaoUtil.populateArray widget: ' + e);
        }
    },
    //------------------------------------PAGINATION------------------------------------------------
    //	USAGE: This method is used to for the pagination of the records,
    /*PARAMS: paginationObj : {
    																									currentRecord: number;
    																									legend: string;
    																									showMyFilter: boolean;
    																									legendColor: string;
    																									windowSize: number;
    																									table: string;
    																									method: string;
    																									query: string;
    																								}*/
    pagination: function(paramObj) {
        try {
            CASLogger.debug('Inside CASDaoUtil.pagination: This method is used for the pagination of the records.');
            if (paramObj.itemsArray == undefined) {
                paramObj.itemsArray = [];
            }
            paramObj.totalRecords = parseInt(this.calculatePaginationRows(paramObj));
            this.createPaginationWindow(paramObj, function(response) {
                paramObj.lowerWindow = response.lowerWindow;
                paramObj.upperWindow = response.upperWindow;
            });
            paramObj.upperWindow = parseInt(this.checkAndSetPaginationLimit(paramObj));
            this.populateArray(paramObj, function(response) {
                if (paramObj.infiniteScroll) {
                    paramObj.itemsArray = paramObj.itemsArray.concat(response);
                } else {
                    paramObj.itemsArray = response;
                }
            });
            paramObj.upperDisplay = Math.min(paramObj.upperWindow, paramObj.totalRecords);
            return paramObj;
        } catch (e) {
            CASLogger.error('Error caught inside CASDaoUtil.pagination: ' + e);
        }
    },

    createDefaultFieldJSON: function(requestGR) {

        var var_set = gs.getProperty(this.appUtil.configuration.properties.variableSetSysID);
        var variableGR1 = new GlideRecord(this.appUtil.configuration.table.variable);
        var queryString = 'variable_set=' + var_set;
        var defaultFieldsJSON = [];
        variableGR1.addEncodedQuery(queryString);
        variableGR1.orderBy('order');
        variableGR1.query();
        while (variableGR1.next()) {
            var innerJSON = {};
            innerJSON["facets"] = {};
            innerJSON["facets"]["value"] = [];
            innerJSON["id"] = variableGR1.name + '';
            innerJSON["sysId"] = variableGR1.sys_id + '';
            innerJSON["label"] = (variableGR1.question_text) ? variableGR1.question_text.getDisplayValue() + '' : '';
            innerJSON["description"] = (variableGR1.description) ? variableGR1.description.getDisplayValue() + '' : '';
            innerJSON["facets"]["defaultValue"] = (variableGR1.default_value) ? variableGR1.default_value.getDisplayValue() + '' : '';
            innerJSON["facets"]["requestValue"] = requestGR.variable_pool[variableGR1.name] + '';
            innerJSON["typeValue"] = variableGR1.type + '';
            var facetsValueGR = new GlideRecord('question_choice');
            facetsValueGR.addQuery('question', variableGR1.sys_id);
            facetsValueGR.orderBy('text');
            facetsValueGR.query();

            while (facetsValueGR.next()) {
                var valueJSON = {};
                valueJSON["label"] = facetsValueGR.text.getDisplayValue() + '';
                valueJSON["value"] = facetsValueGR.value.getDisplayValue() + '';
                innerJSON["facets"]["value"].push(valueJSON);
            }
            defaultFieldsJSON.push(innerJSON);
        }

        return defaultFieldsJSON;
    },


    //------------------------------------createJSONFromVariableTable-----------------------------------------------
    //	USAGE: This method is used to for creating JSON structure which can be used for rendering in the tab form,
    /*PARAMS: paramObject.... : {
    																									sysId: STRING;
    																								}*/


    createJSONFromVariableTable: function(paramObject) {
        try {
            CASLogger.debug('Inside CASDaoUtil.createJSONFromVariableTable: This method is used to for creating JSON structure which can be used for rendering in the tab form,');

            var appUtil = new CASAppUtil();
            if (paramObject.table == 'approval') {
                var approvalGR = new GlideRecord(appUtil.configuration.table.approvals);
                if (approvalGR.get(paramObject.sysId))
                    paramObject.sysId = approvalGR.sysapproval + '';
            }
            var requestGR = new GlideRecord(appUtil.configuration.table.requests);
            requestGR.addQuery('sys_id', paramObject.sysId);
            requestGR.query();
            if (requestGR.next()) {

                var defaultFieldsJSON = this.createDefaultFieldJSON(requestGR);
                var variableGR = new GlideRecord(this.appUtil.configuration.table.variable);
                var queryString = 'cat_item=' + requestGR.cat_item + '^x_vmw_cloudservice_field_visibility=true^ORtype=19^ORtype=20';

                variableGR.addEncodedQuery(queryString);
                variableGR.orderBy('order');
                variableGR.query();

                var mainJSONArray = [];
                var mainJSON = {};
                var innerJSONArray = [];
                var selected_version = defaultFieldsJSON[0]['facets'].requestValue;
                var field_version;
                var firstContainer = true;
                while (variableGR.next()) {

                    //if(variableGR.name!='version' ){
                    //	 selected_version=(innerJSONArray[0])?innerJSONArray[0]['facets'].requestValue:'';
                    //}
                    //field_version=variableGR.name.includes('__')?variableGR.name.split('__')[1]:'';
                    var variableVersion = variableGR.x_vmw_cloudservice_versions.getDisplayValue().replace(',', '');
                    field_version = variableVersion;
                    if (field_version == selected_version) {
                        if (variableGR.type.getDisplayValue() == 'Container Start') {
                            mainJSON = {};
                            mainJSON["id"] = variableGR.name + '';
                            mainJSON["sysId"] = variableGR.sys_id + '';
                            mainJSON["label"] = variableGR.question_text.getDisplayValue() + '';
                            mainJSON["description"] = variableGR.description.getDisplayValue() + '';
                            mainJSON["isMultiValued"] = true;
                            mainJSON["visible"] = JSON.parse(variableGR.visible_standalone.getDisplayValue());
                            mainJSON["tabVisibility"] = variableGR.x_vmw_cloudservice_field_visibility.getDisplayValue();
                            mainJSON["typeValue"] = variableGR.type + '';
                            innerJSONArray = [];
                        } else {
                            if (variableGR.type.getDisplayValue() != 'Container End') {
                                var innerJSON = {};
                                innerJSON["facets"] = {};
                                innerJSON["facets"]["value"] = [];
                                innerJSON["id"] = variableGR.name + '';
                                innerJSON["sysId"] = variableGR.sys_id + '';
                                innerJSON["label"] = (variableGR.question_text) ? variableGR.question_text.getDisplayValue() + '' : '';
                                innerJSON["description"] = (variableGR.description) ? variableGR.description.getDisplayValue() + '' : '';
                                innerJSON["facets"]["defaultValue"] = (variableGR.default_value) ? variableGR.default_value.getDisplayValue() + '' : '';
                                innerJSON["facets"]["requestValue"] = requestGR.variable_pool[variableGR.name] + '';
                                innerJSON["typeValue"] = variableGR.type + '';
                                if (variableGR.type == 10) {
                                    innerJSON["facets"]["defaultValue"] = variableGR.default_value.getDisplayValue() + '';
                                }
                                var facetsValueGR = new GlideRecord('question_choice');
                                facetsValueGR.addQuery('question', variableGR.sys_id);
                                facetsValueGR.orderBy('text');
                                facetsValueGR.query();

                                while (facetsValueGR.next()) {
                                    var valueJSON = {};
                                    valueJSON["label"] = facetsValueGR.text.getDisplayValue() + '';
                                    valueJSON["value"] = facetsValueGR.value.getDisplayValue() + '';
                                    innerJSON["facets"]["value"].push(valueJSON);
                                }

                                if (firstContainer) {
                                    for (var i = 0; i < defaultFieldsJSON.length; i++) {
                                        innerJSONArray.push(defaultFieldsJSON[i]);
                                    }
                                    innerJSONArray.push(innerJSON);
                                    firstContainer = false;
                                } else {
                                    innerJSONArray.push(innerJSON);
                                }

                            } else {
                                if (firstContainer) {
                                    for (var i = 0; i < defaultFieldsJSON.length; i++) {
                                        innerJSONArray.push(defaultFieldsJSON[i]);
                                    }
                                    firstContainer = false;
                                }

                                mainJSON["values"] = innerJSONArray;
                                mainJSONArray.push(mainJSON);
                            }
                        }

                    }
                }
                return mainJSONArray;

            }
        } catch (e) {
            CASLogger.error('Error caught inside CASDaoUtil.createJSONFromVariableTable: ' + e);
        }
    },



    //---------------------------------fetchPortalApprovalDetails method---------------------------------------
    //  USAGE: This method is used for fetching records for Approval and creating JSON array
    //					to be rendered on the html template
    /*  PARAMS: Below is the structure of the paramObject
    																													paramObject : {
    																														sysId: string;
    																													}*/
    fetchPortalApprovalDetails: function(paramObject) {
        try {
            CASLogger.debug('Inside the CASDaoUtil.fetchPortalApprovalDetails: Used fetching records for RITM and creating JSON array.');
            var mainJSON = {};
            mainJSON = (this.fetchPortalApprovalItems(paramObject)) ? (this.fetchPortalApprovalItems(paramObject))[0] : {};
            var response = this.createJSONFromVariableTable(paramObject);
            mainJSON.detailSection = (response) ? response : [];
            return mainJSON;
        } catch (e) {
            CASLogger.error("Exception Caught inside CASDaoUtil.fetchPortalApprovalDetails " + e);
        }
    },

    //---------------------------------fetchPortalRequestDetails method---------------------------------------
    //  USAGE: This method is used for fetching records for RITMs and creating JSON array
    //					to be rendered on the html template
    /*  PARAMS: Below is the structure of the paramObject
    																															paramObject : {
    																																sysId: string;
    																															}*/
    fetchPortalRequestDetails: function(paramObject) {
        try {
            CASLogger.debug('Inside the CASDaoUtil.fetchPortalRequestDetails: Used fetching records for RITM and creating JSON array.');
            var mainJSON = {};
            mainJSON = (this.fetchPortalRequestItems(paramObject)) ? (this.fetchPortalRequestItems(paramObject))[0] : {};
            var response = this.createJSONFromVariableTable(paramObject);
            mainJSON.detailSection = (response) ? response : [];
            return mainJSON;
        } catch (e) {
            CASLogger.error("Exception Caught inside CASDaoUtil.fetchPortalRequestDetails " + e);
        }
    },

    fetchRowCount: function(table, query) {
        try {
            CASLogger.debug('Inside  CASDaoUtil.fetchRowCount : Get row count');
            var gr = new GlideAggregate(table);
            gr.addEncodedQuery(query);
            gr.addAggregate('COUNT');
            gr.query();
            if (gr.next()) {

                return gr.getAggregate('COUNT');
            }
        } catch (e) {
            CASLogger.error("Exception Caught inside CASDaoUtil.fetchRowCount " + e);
        }
    },

    //---------------------------------fetchPortalRequestItems method---------------------------------------
    //  USAGE: This method is used for fetching records for activities requests items and creating JSON array
    //					to be rendered on the html template
    /*  PARAMS: Below is the structure of the paramObject
    																																	paramObject : {
    																																		lowerWindow: number;
    																																		upperWindow: number;
    																																		legend: string;
    																																		broadcast: string;
    																																		totalRecords: string;
    																																		showMyFilter: boolean;
    																																		legendColor: string;
    																																		currentRecord: number;


    																																	}*/
    fetchPortalRequestItems: function(paramObject) {
        try {
            CASLogger.debug('Inside the CASDaoUtil.fetchPortalRequestItems : creating JSON array for fetching records for activities requests items to be rendered on the html template');
            var appUtil = new CASAppUtil();
            var url_color, arr = [],
                query = '';
            var requestGR = new GlideRecord(appUtil.configuration.table.requests);
            if (paramObject.sysId) {
                requestGR.addEncodedQuery('sys_id=' + paramObject.sysId);
                requestGR.query();
            } else {
                if (paramObject.legend) {
                    if (paramObject.legend == 'Rejected' || paramObject.legend == 'Approved') {
                        requestGR.addQuery('approval', '=', paramObject.legend);
                    }
                    if (paramObject.legend == 'Approved') {
                        query += 'active=true';
                    }
                    if (paramObject.legend == "Closed Incomplete" || paramObject.legend == 'Closed Complete' || paramObject.legend == 'Work In Progress' || paramObject.legend == 'Open') {
                        var requestValue;
                        if (paramObject.legend == "Closed Incomplete") {
                            requestValue = 4;
                        } else if (paramObject.legend == 'Closed Complete') {
                            requestValue = 3;
                        } else if (paramObject.legend == 'Work In Progress') {
                            requestValue = 2;
                        } else if (paramObject.legend == 'Open') {
                            requestValue = 1;
                        }
                        requestGR.addQuery('state', '=', requestValue);
                    }
                }

                if (gs.getUser().hasRole('admin')) {
                    if (paramObject.showMyFilter == "true") {
                        query += 'request.requested_forDYNAMIC90d1921e5f510100a9ad2572f2b477fe^';
                    }
                } else {
                    query += 'request.requested_forDYNAMIC90d1921e5f510100a9ad2572f2b477fe^';
                }

                if (paramObject.query) { //!=''){
                    query += paramObject.query;
                }

                query += 'cat_item.sc_catalogsLIKE533fe9dfdb2233006adb48703996191b';

                var queryObject = {
                    table: appUtil.configuration.table.requests,
                    query: query
                };
                CASLogger.debug('Inside the CASDaoUtil.fetchPortalRequestItems : queryObject= ' + JSON.stringify(queryObject));

                if (queryObject.query)
                    requestGR.addEncodedQuery(queryObject.query);


                if (paramObject.lowerWindow != null && paramObject.upperWindow != null)
                    requestGR.chooseWindow(paramObject.lowerWindow, paramObject.upperWindow);

                requestGR.orderByDesc('sys_created_on');

                if (paramObject.orderBy && paramObject.orderByAsc) {
                    requestGR.orderByDesc(paramObject.orderBy);
                } else {
                    requestGR.orderBy(paramObject.orderBy);
                }

                requestGR.query();
                if (paramObject.getCount) {
                    //return requestGR.getRowCount();
                    return this.fetchRowCount(appUtil.configuration.table.requests, requestGR.getEncodedQuery());
                }
            }
            while (requestGR.next()) {

                arr.push({
                    item: requestGR.cat_item.getDisplayValue().toString() || "Not Available",
                    number: requestGR.number.getDisplayValue().toString() || 'Not Available',
                    state: requestGR.state.getDisplayValue().toString() || 'Not Available',
                    stage: requestGR.stage.getDisplayValue().toString() || 'Not Available',
                    sysID: requestGR.sys_id + '',
                    requested_for: requestGR.request.requested_for.getDisplayValue().toString() || 'Not Available',
                    request: requestGR.request.getDisplayValue().toString() || 'Not Available',
                    created: requestGR.sys_created_on.getDisplayValue().toString() || 'Not Available',
                    created_by: requestGR.opened_by.getDisplayValue().toString() || 'Not Available',
                    link: "?id=" + appUtil.configuration.page.activitiesForm + "&table=" + appUtil.configuration.table.requests + "&sysId=" + requestGR.sys_id + '',
                    description: requestGR.short_description.getDisplayValue().toString()
                });
            }
            return arr;
        } catch (e) {
            CASLogger.error('Exception caught inside the CASDaoUtil.fetchPortalRequestItems' + e);
        }
    },

    //---------------------------------fetchPortalApprovalItems method---------------------------------------
    //  USAGE: This method is used for fetching records for activities approval and creating JSON array
    //					to be rendered on the html template
    /*  PARAMS: Below is the structure of the paramObject
    																																	paramObject : {
    																																		lowerWindow: number;
    																																		upperWindow: number;
    																																		legend: string;
    																																		totalRecords: string;
    																																		showMyFilter: boolean;
    																																		legendColor: string;
    																																		currentRecord: number;
    																																	}*/
    fetchPortalApprovalItems: function(paramObject) {
        try {
            CASLogger.debug('Inside the CASDaoUtil.fetchPortalApprovalItems : creating JSON array for fetching records for activities approvals to be rendered on the html template');
            var appUtil = new CASAppUtil();
            var url_color, arr = [],
                query = '';

            var approvalGR = new GlideRecord(appUtil.configuration.table.approvals);
            if (paramObject.sysId) {
                approvalGR.addEncodedQuery('sys_id=' + paramObject.sysId);
                approvalGR.query();
            } else {
                //Creating query according to the legend parameter passed
                if (paramObject.legend) {
                    if (paramObject.legend == 'Requested' || paramObject.legend == 'Rejected' || paramObject.legend == 'Approved') {
                        query += 'state=' + paramObject.legend;
                    }
                }

                //Creating query according to the roles filter parameter passed
                if (gs.getUser().hasRole('admin')) {
                    if (paramObject.showMyFilter == "true") {
                        query += '^approverDYNAMIC90d1921e5f510100a9ad2572f2b477fe';
                    }
                } else {
                    query += '^approverDYNAMIC90d1921e5f510100a9ad2572f2b477fe';
                }

                if (paramObject.query) {
                    query += '^' + paramObject.query;
                }

                var queryObject = {
                    table: appUtil.configuration.table.approvals,
                    query: query
                };


                if (queryObject.query)
                    approvalGR.addEncodedQuery(queryObject.query);

                if (paramObject.lowerWindow != null && paramObject.upperWindow != null)
                    approvalGR.chooseWindow(paramObject.lowerWindow, paramObject.upperWindow);

                approvalGR.orderByDesc('sys_created_on');

                if (paramObject.orderBy) {
                    if (paramObject.orderByAsc) {
                        approvalGR.orderByDesc(paramObject.orderBy);
                    } else {
                        approvalGR.orderBy(paramObject.orderBy);
                    }
                }
                //approvalGR.addEncodedQuery('group.assignment_group=' + gs.getProperty(appUtil.configuration.properties.assignment_group));
                approvalGR.addEncodedQuery('group.assignment_group.nameIN' + gs.getProperty(appUtil.configuration.properties.assignment_group));
                //approvalGR.addEncodedQuery('group.assignment_group.sys_idIN5861d7b4db2733007b245385ca96192c,b85d44954a3623120004689b2d5dd60a');

                //if(!paramObject.query)
                approvalGR.addEncodedQuery('sysapproval.descriptionSTARTSWITH533fe9dfdb2233006adb48703996191b');
                approvalGR.query();
                CASLogger.debug('Inside the CASDaoUtil.fetchPortalApprovalItems : queryObject= ' + JSON.stringify(queryObject));

                if (paramObject.getCount) {
                    //return approvalGR.getRowCount();

                    return this.fetchRowCount(appUtil.configuration.table.approvals, approvalGR.getEncodedQuery());
                }
            }
            while (approvalGR.next()) {
                //if(approvalGR.sysapproval.cat_item+''!=''){
                arr.push({
                    state: approvalGR.state.getDisplayValue().toString() || 'Not Available',
                    sysId: approvalGR.getUniqueValue(),
                    number: approvalGR.sysapproval.getDisplayValue().toString() || 'Not Available',
                    item: (approvalGR.sysapproval.cat_item) ? approvalGR.sysapproval.cat_item.getDisplayValue().toString() : 'Not Available',
                    approver: approvalGR.approver.user_name + '' || 'Not Available',
                    //created_by: approvalGR.sys_created_by+'' ||'Not Available',
                    created_by: approvalGR.sysapproval.opened_by.getDisplayValue() + '' || 'Not Available',
                    created: approvalGR.sys_created_on.getDisplayValue().toString() || 'Not Available',
                    description: approvalGR.sysapproval.short_description + '',
                    link: "?id=" + appUtil.configuration.page.activitiesForm + "&table=" + appUtil.configuration.table.approvals + "&sysId=" + approvalGR.getUniqueValue(),
                });
            }
            //}

            return arr;
        } catch (e) {
            CASLogger.error('Exception caught inside the CASDaoUtil.fetchPortalApprovalItems' + e);
        }
    },

    //---------------------------------fetchPortalActions method---------------------------------------
    //  USAGE: This method is used for fetching related actions records for deployments or machine and creating JSON array
    //					to be rendered on the html template
    /*  PARAMS: Below is the structure of the paramObject
    																																	paramObject : {
    																																		type: string
    																																		sysId: string;
    																																	}*/
    fetchPortalActions: function(paramObject) {
        try {
            CASLogger.debug('Inside  CASDaoUtil.fetchPortalActions');
            var actionArray = [];
            var appUtil = new CASAppUtil();
            var actionGR = new GlideRecord(appUtil.configuration.table.action);
            if (paramObject && paramObject.type == 'deployment') {
                actionGR.addEncodedQuery('deployment=' + paramObject.sysId);
            } else {
                actionGR.addEncodedQuery('machine=' + paramObject.sysId);
            }

            actionGR.query();
            while (actionGR.next()) {
                actionArray.push({
                    name: actionGR.name.getDisplayValue() + '',
                    label: actionGR.display_name.getDisplayValue() + '',
                    actionId: actionGR.sys_id + '',
                    machine: actionGR.machine.getDisplayValue() + '',
                    deployment: actionGR.deployment.getDisplayValue() + '',
                    valid: (this.checkEntitlementActions(actionGR.name.getDisplayValue() + '', paramObject.type, paramObject.endpoint) == 'true') && (actionGR.valid.getDisplayValue() + '' == 'true')
                });
            }
            return actionArray;
        } catch (e) {
            CASLogger.error("Exception caught inside CASDaoUtil.fetchPortalActions  " + e);
        }
    },

    fetchServicePortalActions: function(paramObject) {
        try {
            CASLogger.debug('Inside  CASDaoUtil.fetchServicePortalActions');
            var actionArray = [];
            var ActionsCatalogArr = [];
            var appUtil = new CASAppUtil();

            var ActionsCatalog = new GlideRecord(appUtil.configuration.table.catalogItem);
            ActionsCatalog.addEncodedQuery('organisation_name=NULL');
            ActionsCatalog.query();


            while (ActionsCatalog.next()) {

                ActionsCatalogArr.push({
                    name: ActionsCatalog.name.getDisplayValue(),
                    type: ActionsCatalog.short_description.getDisplayValue(),
                    catalogSysId: ActionsCatalog.sys_id.getDisplayValue(),
                    active: ActionsCatalog.active.getDisplayValue()
                });
            }
            var actionGR = new GlideRecord(appUtil.configuration.table.action);
            if (paramObject && paramObject.type == 'deployment') {
                actionGR.addEncodedQuery('deployment=' + paramObject.deploymentSysId);
            } else {
                actionGR.addEncodedQuery('machine=' + paramObject.machineSysId);
            }

            actionGR.query();
            while (actionGR.next()) {

                var catalogSysId = '';
                var isCatalogActive = false;

                ActionsCatalogArr.forEach(function(catalog) {

                    if (paramObject.type == 'deployment') {
                        //   if(catalog.name == actionGR.display_name.getDisplayValue() + '' && catalog.type == 'Deployment Action-'+actionGR.display_name.getDisplayValue()){
                        if (catalog.name == actionGR.display_name.getDisplayValue() + '' && catalog.type.startsWith('Deployment Action')) {
                            catalogSysId = catalog.catalogSysId;
                            if (catalog.active == 'true' || catalog.active == true) isCatalogActive = true;
                        }
                    } else {
                        // if(catalog.name == actionGR.display_name.getDisplayValue() + '' && catalog.type == 'Resource Action-'+actionGR.display_name.getDisplayValue()){
                        if (catalog.name == actionGR.display_name.getDisplayValue() + '' && catalog.type.startsWith('Resource Action')) {
                            catalogSysId = catalog.catalogSysId;
                            if (catalog.active == 'true' || catalog.active == true) isCatalogActive = true;
                        }
                    }

                });

                actionArray.push({
                    name: actionGR.name.getDisplayValue() + '',
                    label: actionGR.display_name.getDisplayValue() + '',
                    actionId: actionGR.sys_id + '',
                    machine: actionGR.machine.getDisplayValue() + '',
                    deployment: actionGR.deployment.getDisplayValue() + '',
                    catalogSysId: catalogSysId,
                    actionCatalogLink: '/' + gs.getProperty(appUtil.configuration.properties.ServicePortalPrefix) + '?id=' + appUtil.configuration.page.spCatalogItemPage + '&sys_id=' + (catalogSysId ? catalogSysId : null) + '&deploy_sys_id=' + paramObject.deploymentSysId + '&mac_sys_id=' + (paramObject.machineSysId ? paramObject.machineSysId : -1),
                    valid: (this.checkActionsCatalogEntitlement(catalogSysId) + '' == 'true') && (actionGR.valid.getDisplayValue() + '' == 'true') && isCatalogActive
                });
            }
            return actionArray;
        } catch (e) {
            CASLogger.error("Exception caught inside CASDaoUtil.fetchServicePortalActions  " + e);
        }
    },

    checkOwnership: function(obj_sys_id, type) {
        try {
            CASLogger.debug('Inside  CASDaoUtil.checkOwnership');
            if (type == 'machine') {
                var gr = new GlideRecord(this.appUtil.configuration.table.machines);
                gr.addQuery('sys_id', obj_sys_id);
                gr.addQuery('servicenow_ownerDYNAMIC90d1921e5f510100a9ad2572f2b477fe^ORvra_ownerDYNAMIC90d1921e5f510100a9ad2572f2b477fe');
                gr.query();
                //if(gr.getRowCount()>0){
                if (gr.next()) {
                    return "true";
                }
                return "false";
            } else if (type == 'deployment') {

                var gr1 = new GlideRecord(this.appUtil.configuration.table.deployments);
                gr1.addQuery('sys_id', obj_sys_id);
                gr1.addQuery('servicenow_ownerDYNAMIC90d1921e5f510100a9ad2572f2b477fe^ORvra_ownerDYNAMIC90d1921e5f510100a9ad2572f2b477fe');
                gr1.query();
                //if(gr1.getRowCount()>0){
                if (gr1.next()) {
                    return "true";
                }
                return "false";
            }
        } catch (e) {
            CASLogger.error("Exception caught inside CASDaoUtil.checkOwnership  " + e);
        }
    },
    //---------------------------------fetchPortalRelatedMachines method---------------------------------------
    //  USAGE: This method is used for fetching related machine records for deployments and creating JSON array
    //					to be rendered on the html template
    /*  PARAMS: Below is the structure of the paramObject.
    																																	paramObject : {
    																																		sysId: string;
    																																	}*/
    fetchPortalRelatedMachines: function(paramObject) {
        try {
            CASLogger.debug('Inside the CASDaoUtil.fetchPortalRelatedMachines: Used fetching related machines records for deployments and creating JSON array.');

            var appUtil = new CASAppUtil();
            var resources = [];

            var machineGR = new GlideRecord(appUtil.configuration.table.machines);
            machineGR.addEncodedQuery('deployment_sys=' + paramObject.sysId);
            if (!gs.hasRole('admin')) {
                machineGR.addEncodedQuery('servicenow_ownerDYNAMIC90d1921e5f510100a9ad2572f2b477fe^ORvra_ownerDYNAMIC90d1921e5f510100a9ad2572f2b477fe^ORentitled_groupsDYNAMICd6435e965f510100a9ad2572f2b47744^ORentitled_usersDYNAMIC90d1921e5f510100a9ad2572f2b477fe');
            }
            machineGR.addEncodedQuery('operational_status=1');
            machineGR.orderBy('machine_name');
            machineGR.query();
            while (machineGR.next()) {
                resources.push({
                    status: (machineGR.status) ? machineGR.status.getDisplayValue() + '' : 'Status Not Available',
                    name: machineGR.getDisplayValue() + '',
                    sysId: machineGR.sys_id + '',
                    shareLink: '/' + gs.getProperty(appUtil.configuration.properties.portalPrefix) + '?id=' + appUtil.configuration.page.sharedResourceForm + '&deploymentSysId=' + paramObject.sysId + '&macSysId=' + machineGR.sys_id,
                    shareable: this.checkOwnership(machineGR.sys_id, 'machine'),
                    link: '/' + gs.getProperty(appUtil.configuration.properties.portalPrefix) + '?id=' + appUtil.configuration.page.deploymentDetail + '&sysId=' + paramObject.sysId + '&macSysId=' + machineGR.sys_id,
                    type: (machineGR.type) ? machineGR.type.getDisplayValue() + '' : 'Not Available',
                    createdAt: (machineGR.createdat) ? machineGR.createdat.getDisplayValue() + '' : 'Not Available',
                    createdOn: (machineGR.createdat) ? machineGR.createdat.getDisplayValue() + '' : 'Not Available',
                    actions: this.fetchPortalActions({
                        sysId: machineGR.getUniqueValue() + '',
                        type: 'machine',
                        endpoint: machineGR.project.organization + ''
                    })
                });
            }
            if (paramObject && paramObject.resourceCount) {

                return resources.length;
            }
            return resources;
        } catch (e) {
            CASLogger.error("Exception Caught inside CASDaoUtil.fetchPortalRelatedMachines " + e);
        }
    },




    //---------------------------------fetchPortalDetailSection method---------------------------------------
    //  USAGE: This method is used for fetching records for deployments and creating JSON array
    //					to be rendered on the html template
    /*  PARAMS: Below is the structure of the paramObject
    																																		paramObject : {
    																																			sysId: string;
    																																		}*/
    fetchPortalDetailSection: function(paramObject) {
        try {
            CASLogger.debug('Inside the CASDaoUtil.fetchPortalDetailSection: Used fetching details from backend for for deployments/machines and creating JSON array.');
            var appUtil = new CASAppUtil();
            var data = {};
            data.customPropertiesTabs = [];
            var passedSysId = (paramObject.machineSysId) ? paramObject.machineSysId : paramObject.sysId;
            var table = (paramObject.machineSysId) ? appUtil.configuration.table.machines : appUtil.configuration.table.deployments;
            var customPropertiesSection;
            var customPropertiesElement;
            var sys_id;

            customPropertiesSection = new GlideRecord(appUtil.configuration.table.uiSection);
            customPropertiesSection.addEncodedQuery("nameSTARTSWITH" + table);
            customPropertiesSection.orderBy("caption");
            customPropertiesSection.query();
            while (customPropertiesSection.next()) {
                if ((customPropertiesSection.caption + '') != 'Relationship' && (customPropertiesSection.caption + '') != 'CI Relations' && (customPropertiesSection.caption + '') != 'Custom Properties' && (customPropertiesSection.caption + '') != 'Inputs' && (customPropertiesSection.caption + '') != 'Outputs' && (customPropertiesSection.caption + '') != 'Host') {
                    customPropertiesElement = new GlideRecord(appUtil.configuration.table.uiElement);
                    sys_id = "";
                    sys_id = customPropertiesSection.sys_id + '';

                    customPropertiesElement.addEncodedQuery('sys_ui_section=' + sys_id);
                    customPropertiesElement.query();
                    var deploymentFieldArray = [];
                    while (customPropertiesElement.next()) {
                        if (!(customPropertiesElement.element + '').includes("split") && !(customPropertiesElement.element + '').includes("xml") && (customPropertiesElement.element + '' != 'actions')) {
                            var customDeploymentGR = new GlideRecord(table);
                            customDeploymentGR.addQuery('sys_id', '=', passedSysId);
                            customDeploymentGR.setLimit(1);
                            customDeploymentGR.query();
                            var search = customPropertiesElement.element + '';
                            var elementArray = search.split('.');
                            var value;
                            var label;
                            while (customDeploymentGR.next()) {
                                //Handling the undefined cases generated while creating dynamic JSON layout
                                try {
                                    value = search.split('.').reduce(function(gr, currentValue) {
                                        return gr[currentValue];
                                    }, customDeploymentGR);
                                    label = search.split('.').reduce(function(gr, currentValue) {
                                        return gr[currentValue];
                                    }, customDeploymentGR).getLabel();
                                    value = (value) ? value.getDisplayValue() : value + '';
                                } catch (e) {
                                    //This exception can be ignored
                                    //CASLogger.error("IGNORE this expection: Exception Caught inside CASDaoUtil.fetchPortalDetailSection "+e);
                                }
                            }
                            deploymentFieldArray.push({
                                "name": search, //this.portalCapitalize(customPropertiesElement.element)+'',
                                "value": (value) ? value : '-',
                                "label": label
                            });
                        }
                    }
                    var sectionJSON = {
                        name: (customPropertiesSection.caption) ? customPropertiesSection.caption + '' : 'Summary',
                        sys_id: sys_id,
                        items: deploymentFieldArray
                    };
                    data.customPropertiesTabs.push(sectionJSON);
                } else if ((customPropertiesSection.caption + '') == 'Custom Properties' || (customPropertiesSection.caption + '') == 'Inputs' || (customPropertiesSection.caption + '') == 'Host' || (customPropertiesSection.caption + '') == 'Outputs') {
                    var customPropertiesJSON;
                    var deploymentFieldArray2 = [];
                    var customDeploymentGR2 = new GlideRecord(table);
                    customDeploymentGR2.addQuery('sys_id', '=', passedSysId);
                    customDeploymentGR2.setLimit(1);
                    customDeploymentGR2.query();
                    if (customDeploymentGR2.next()) {
                        if ((customPropertiesSection.caption + '') == 'Custom Properties')
                            customPropertiesJSON = customDeploymentGR2['custom_properties_schema'] ? JSON.parse(customDeploymentGR2['custom_properties_schema']) : [];
                        if ((customPropertiesSection.caption + '') == 'Inputs')
                            customPropertiesJSON = customDeploymentGR2['inputs'] ? JSON.parse(customDeploymentGR2['inputs']) : [];
                        if ((customPropertiesSection.caption + '') == 'Outputs')
                            customPropertiesJSON = customDeploymentGR2['outputs'] ? JSON.parse(customDeploymentGR2['outputs']) : [];
                        if ((customPropertiesSection.caption + '') == 'Host')
                            customPropertiesJSON = customDeploymentGR2['host_schema'] ? JSON.parse(customDeploymentGR2['host_schema']) : [];
                    }
                    for (var item in customPropertiesJSON) {
                        deploymentFieldArray2.push({
                            "name": item, //this.portalCapitalize(customPropertiesElement.element)+'',
                            "value": (customPropertiesJSON[item]) ? customPropertiesJSON[item] : '-',
                            "label": item
                        });
                    }
                    var sectionJSON2 = {
                        name: (customPropertiesSection.caption) ? customPropertiesSection.caption + '' : 'Summary',
                        sys_id: customPropertiesSection.sys_id + '',
                        items: deploymentFieldArray2
                    };
                    data.customPropertiesTabs.push(sectionJSON2);
                }
            }
            return data.customPropertiesTabs;
        } catch (e) {
            CASLogger.error("Exception Caught inside CASDaoUtil.fetchPortalDetailSection " + e);
        }
    },
    //---------------------------------fetchPortalActionRequests method---------------------------------------
    //  USAGE: This method is used for fetching Action request history for specific mahcines or deployments
    /*  PARAMS: Below is the structure of the paramObject
    																																			paramObject : {
    																																				sysId: string;
    																																			}*/
    fetchPortalActionRequests: function(paramObject) {
        try {
            CASLogger.debug('Inside the CASDaoUtil.fetchPortalActionRequests: Used for fetching Action request history for specific mahcines or deployments.');

            var itemsArray = [];
            var requestJSON = {
                name: 'History',
            };

            var appUtil = new CASAppUtil();
            var requestGR = new GlideRecord(appUtil.configuration.table.actionRequests);
            if (paramObject && paramObject.machineSysId) {
                requestGR.addEncodedQuery('action.machine=' + paramObject.machineSysId);
            } else {
                requestGR.addEncodedQuery('action.deployment=' + paramObject.sysId);
            }
            requestGR.orderByDesc('sys_created_on');
            requestGR.query();
            //populating the items array
            while (requestGR.next()) {
                itemsArray.push({
                    actionName: requestGR.action.getDisplayValue() + '',
                    reason: requestGR.reason.getDisplayValue() + '',
                    description: requestGR.description.getDisplayValue() + '',
                    createdBy: requestGR.sys_created_by.getDisplayValue() + '',
                    createdOn: requestGR.sys_created_on + '',
                    comment: requestGR.comment.getDisplayValue() + '',
                    status: requestGR.status.getDisplayValue() + '',
                    state: requestGR.state.getDisplayValue() + ''
                });
            }
            requestJSON.items = itemsArray;
            return requestJSON;
        } catch (e) {
            CASLogger.error("Exception Caught inside CASDaoUtil.fetchPortalActionRequests " + e);
        }
    },

    //---------------------------------fetchPortalDeploymentDetails method---------------------------------------
    //  USAGE: This method is used for fetching records for deployments and creating JSON array
    //					to be rendered on the html template
    /*  PARAMS: Below is the structure of the paramObject
    																																			paramObject : {
    																																				sysId: string;
    																																			}*/
    fetchPortalDeploymentDetails: function(paramObject) {
        try {
            //gs.addErrorMessage(JSON.stringify(paramObject));
            CASLogger.debug('Inside the CASDaoUtil.fetchPortalDeploymentDetails: Used fetching records for deployments and creating JSON array.');

            var mainJSON = {};
            var appUtil = new CASAppUtil();
            var endpoint = '';
            if (paramObject.machineSysId) {
                var machineGR1 = new GlideRecord(appUtil.configuration.table.machines);
                if (machineGR1.get(paramObject.machineSysId)) {
                    machineGR1.query();
                    if (machineGR1.next()) {
                        endpoint = machineGR1.project.organization + '';
                    }
                }
            }
            mainJSON = (this.fetchPortalDeployments(paramObject).length !== 0) ? (this.fetchPortalDeployments(paramObject))[0] : {};
            mainJSON.relatedResources = (this.fetchPortalRelatedMachines(paramObject)) ? (this.fetchPortalRelatedMachines(paramObject)) : [];
            mainJSON.detailSection = (this.fetchPortalDetailSection(paramObject)) ? (this.fetchPortalDetailSection(paramObject)) : [];
            mainJSON.detailSection.push(this.fetchPortalActionRequests(paramObject));
            mainJSON.machineAction = paramObject.isServicePortal ?
                this.fetchServicePortalActions({
                    deploymentSysId: paramObject.sysId,
                    machineSysId: paramObject.machineSysId,
                    type: 'machine'
                }) :
                this.fetchPortalActions({
                    sysId: paramObject.machineSysId,
                    type: 'machine',
                    endpoint: endpoint
                });
            mainJSON.machineShareable = this.checkOwnership(paramObject.machineSysId, 'machine');
            mainJSON.machineShareLink = '/' + gs.getProperty(appUtil.configuration.properties.portalPrefix) + '?id=' + this.appUtil.configuration.page.sharedResourceForm + '&deploymentSysId=' + paramObject.sysId + '&macSysId=' + paramObject.machineSysId;

            var depGR = new GlideRecord(this.appUtil.configuration.table.deployments);
            if (depGR.get(paramObject.sysId)) {
                depGR.query();
                var dep_name = depGR.name + '';
            }

            var macGR = new GlideRecord(this.appUtil.configuration.table.machines);
            if (macGR.get(paramObject.machineSysId)) {
                macGR.query();
                var machine_name = macGR.name + '';
            }

            mainJSON.machineShareLink = mainJSON.machineShareLink + '&dep_name=' + dep_name + '&mac_name=' + machine_name;
            return mainJSON;
        } catch (e) {
            CASLogger.error("Exception Caught inside CASDaoUtil.fetchPortalDeploymentDetails " + e);
        }
    },

    //---------------------------------fetchPortalDeployments method---------------------------------------
    //  USAGE: This method is used for fetching records for deployments and creating JSON array
    //					to be rendered on the html template
    /*  PARAMS: Below is the structure of the paramObject
    																																						paramObject : {
    																																							sysId: string;
    																																							organizationSysId: string;
    																																							projectSysId: string;
    																																						}*/
    fetchPortalDeployments: function(paramObject) {
        try {
            CASLogger.debug('Inside the CASDaoUtil.fetchPortalDeployments: Used fetching records for deployments and creating JSON array.');
            var appUtil = new CASAppUtil();
            var arr = [];
            var query = '';
            var deploymentGR = new GlideRecord(appUtil.configuration.table.deployments);

            if (paramObject && paramObject.query) {
                query += paramObject.query;
            }
            deploymentGR.addEncodedQuery(query);

            if (paramObject.orderBy && paramObject.orderByAsc) {
                deploymentGR.orderByDesc(paramObject.orderBy);
            } else if (paramObject.orderBy) {
                deploymentGR.orderBy(paramObject.orderBy);
            } else {
                deploymentGR.orderByDesc('created_at');
            }

            //             deploymentGR.orderByDesc('created_at');

            if (paramObject.lowerWindow != undefined && paramObject.upperWindow != undefined)
                deploymentGR.chooseWindow(paramObject.lowerWindow, paramObject.upperWindow);


            if (paramObject.isServicePortal == undefined) {
                paramObject.isServicePortal = false;
            }

            if (paramObject && paramObject.catalogSysId) {
                deploymentGR.addEncodedQuery('u_catalog_item=' + paramObject.catalogSysId);
            }
            if (paramObject && paramObject.sysId) {
                deploymentGR.addEncodedQuery('sys_id=' + paramObject.sysId);
            }
            if (!gs.hasRole('admin')) {
                deploymentGR.addEncodedQuery('servicenow_ownerDYNAMIC90d1921e5f510100a9ad2572f2b477fe^ORvra_ownerDYNAMIC90d1921e5f510100a9ad2572f2b477fe^ORshared_groupsDYNAMICd6435e965f510100a9ad2572f2b47744^ORentitled_usersDYNAMIC90d1921e5f510100a9ad2572f2b477fe');
            }
            deploymentGR.addEncodedQuery('operational_status!=6^ORoperational_status=NULL');

            deploymentGR.query();

            if (paramObject && paramObject.getCount) {
                //return deploymentGR.getRowCount();
                return this.fetchRowCount(appUtil.configuration.table.deployments, deploymentGR.getEncodedQuery());
            }
            while (deploymentGR.next()) {
                var resources = (this.fetchPortalRelatedMachines({
                    resourceCount: true,
                    sysId: deploymentGR.sys_id
                })) ? (this.fetchPortalRelatedMachines({
                    resourceCount: true,
                    sysId: deploymentGR.sys_id
                })) : 0;
                arr.push({
                    name: (deploymentGR.name) ? deploymentGR.name + '' : 'Not Available',
                    description: (deploymentGR.short_description.getDisplayValue()) ? deploymentGR.short_description.getDisplayValue() + '' : '-',
                    status: (deploymentGR.status.getDisplayValue()) ? deploymentGR.status.getDisplayValue() + '' : '-',
                    sysId: deploymentGR.sys_id + '',
                    link: '/' + gs.getProperty(appUtil.configuration.properties.portalPrefix) + '?id=' + appUtil.configuration.page.deploymentDetail + '&sysId=' + deploymentGR.sys_id,
                    shareLink: '/' + gs.getProperty(appUtil.configuration.properties.portalPrefix) + '?id=' + appUtil.configuration.page.sharedResourceForm + '&deploymentSysId=' + deploymentGR.sys_id + '&dep_name=' + deploymentGR.name + '',
                    shareable: this.checkOwnership(deploymentGR.sys_id, 'deployment'),
                    deploymentDetailsLink: '/' + gs.getProperty(appUtil.configuration.properties.ServicePortalPrefix) + '?id=' + appUtil.configuration.page.casSPDeploymentDetailsPage + '&sysId=' + deploymentGR.sys_id,
                    provisionedOn: (deploymentGR.created_at) ? deploymentGR.created_at + '' : '-',
                    expiresOn: (deploymentGR.expires_on) ? deploymentGR.expires_on + '' : '-',
                    project: (deploymentGR.u_project.project_name) ? deploymentGR.u_project.project_name + '' : '-',
                    owner: (deploymentGR.vra_owner) ? deploymentGR.vra_owner.getDisplayValue() + '' : '-',
                    resources: (resources > 1) ? (resources + ' Resources') : (resources + ' Resources'),
                    deploymentId: (deploymentGR.deployment_id) ? deploymentGR.deployment_id + '' : '-',
                    endpoint: (deploymentGR.u_project.organization) ? deploymentGR.u_project.organization.getDisplayValue() + '' : '-',
                    lastUpdated: (deploymentGR.last_updated_at) ? deploymentGR.last_updated_at + '' : '-',
                    actions: paramObject.isServicePortal ?
                        this.fetchServicePortalActions({
                            deploymentSysId: deploymentGR.sys_id + '',
                            type: 'deployment'
                        }) :
                        this.fetchPortalActions({
                            sysId: deploymentGR.sys_id + '',
                            type: 'deployment',
                            endpoint: deploymentGR.u_project.organization + ''
                        }),
                    catalogItem: (deploymentGR.u_catalog_item.getDisplayValue()) ? deploymentGR.u_catalog_item.getDisplayValue() : 'No Associated Catalog Item',
                    catalogLink: (deploymentGR.u_catalog_item.getDisplayValue()) ? '/' + gs.getProperty(appUtil.configuration.properties.portalPrefix) + '?id=' + appUtil.configuration.page.catalogForm + '&showP=false&cat_id=' + deploymentGR.u_catalog_item + '' : '#'
                });
            }
            return arr;
        } catch (e) {
            CASLogger.error("Exception Caught inside CASDaoUtil.fetchPortalDeployments " + e);
        }

    },


    //Shared Resources search
    fetchSharedResources: function(paramObject) {
        try {
            CASLogger.debug('Inside the CASDaoUtil.fetchSharedResources: Used fetching records for shared resource and creating JSON array.');
            var res_arr = [];
            var query = '';
            var sharedGR = new GlideRecord(this.appUtil.configuration.table.shared_resources);
            if (paramObject && paramObject.sysId) {
                query += 'sys_id=' + paramObject.sysId;
            }
            if (paramObject && (paramObject.lowerWindow != undefined && paramObject.upperWindow != undefined))
                sharedGR.chooseWindow(paramObject.lowerWindow, paramObject.upperWindow);

            if (paramObject && (paramObject.orderBy && paramObject.orderByAsc)) {
                sharedGR.orderByDesc(paramObject.orderBy);
            } else if (paramObject && paramObject.orderBy) {
                sharedGR.orderBy(paramObject.orderBy);
            }
            if (paramObject && paramObject.query) {
                query += paramObject.query;
            }
            if (gs.hasRole('admin')) {
                if (paramObject.showMyFilter == "true") {
                    query += '^created_byDYNAMIC90d1921e5f510100a9ad2572f2b477fe';
                }
            } else {
                query += '^created_byDYNAMIC90d1921e5f510100a9ad2572f2b477fe';
            }

            sharedGR.addEncodedQuery(query);
            if (paramObject && (paramObject.orderBy && paramObject.orderByAsc)) {
                sharedGR.orderByDesc(paramObject.orderBy);
            } else {
                sharedGR.orderBy(paramObject.orderBy);
            }
            sharedGR.query();
            //gs.addErrorMessage('gurjot'+sharedGR.getEncodedQuery());
            while (sharedGR.next()) {
                res_arr.push({
                    "name": (sharedGR.name) ? sharedGR.name + '' : '',
                    "description": (sharedGR.description) ? sharedGR.description + '' : '',
                    "created_by": (sharedGR.created_by) ? sharedGR.created_by.getDisplayValue() + '' : '',

                    "deployment_arr": ((sharedGR.deployments) ? sharedGR.deployments.split(',') : []),
                    "machine_arr": ((sharedGR.machines) ? sharedGR.machines.split(',') : []),
                    "users_arr": ((sharedGR.users) ? sharedGR.users.split(',') : []),
                    "groups_arr": ((sharedGR.groups) ? sharedGR.groups.split(',') : []),



                    "deployment_name_arr": ((sharedGR.deployments) ? sharedGR.deployments.getDisplayValue().split(',') : []),
                    "machine_name_arr": ((sharedGR.machines) ? sharedGR.machines.getDisplayValue().split(',') : []),
                    "users_name_arr": ((sharedGR.users) ? sharedGR.users.getDisplayValue().split(',') : []),
                    "groups_name_arr": ((sharedGR.groups) ? sharedGR.groups.getDisplayValue().split(',') : []),


                    "resourceId": sharedGR.getUniqueValue() + ''
                });
            }
            return res_arr;
        } catch (e) {
            CASLogger.error("Exception Caught inside CASDaoUtil.fetchSharedResources " + e);
        }
    },

    deleteSharedResource: function(id) {
        try {
            CASLogger.debug('Inside  CASDaoUtil.deleteSharedResource');
            var resGR = new GlideRecord(this.appUtil.configuration.table.shared_resources);
            if (Array.isArray(id)) {
                resGR.addQuery('sys_idIN' + id);
                resGR.query();
                while (resGR.next()) {
                    resGR.deleteRecord();
                }
            } else {
                if (resGR.get(id)) {
                    resGR.query();
                    while (resGR.next()) {
                        resGR.deleteRecord();
                    }
                }
            }
        } catch (e) {
            CASLogger.error("Exception caught inside CASDaoUtil.deleteSharedResource  " + e);
        }
    },

    updateSharedFilter: function(deployments_arr) {
        try {
            CASLogger.debug('Inside  CASDaoUtil.updateSharedFilter');
            var dep_gr = new GlideRecord(this.appUtil.configuration.table.deployments);
            dep_gr.addQuery('sys_idIN' + deployments_arr);
            dep_gr.query();
            var deployment_id = '';
            while (dep_gr.next()) {
                deployment_id += dep_gr.deployment_id + ',';
            }
            return 'deploymentidIN' + deployment_id;
        } catch (e) {
            CASLogger.error("Exception caught inside CASDaoUtil.updateSharedFilter  " + e);
        }
    },

    updateMachinesArray: function(filter, machines_arr) {
        try {
            CASLogger.debug('Inside  CASDaoUtil.updateMachinesArray');
            var machines_filter = filter;
            //gs.addErrorMessage(filter);
            var machineGR = new GlideRecord(this.appUtil.configuration.table.machines);
            machineGR.addQuery(filter + '^sys_idIN' + machines_arr.toString());
            machineGR.query();
            var machineSysID = [];
            while (machineGR.next()) {
                machineSysID.push(machineGR.getUniqueValue());
            }
            return machineSysID;
        } catch (e) {
            CASLogger.error("Exception caught inside CASDaoUtil.updateMachinesArray  " + e);
        }
    },

    updateMachinesNameArray: function(filter, machines_arr) {
        try {
            CASLogger.debug('Inside  CASDaoUtil.updateMachinesNameArray');
            var machines_filter = filter;
            var machineGR = new GlideRecord(this.appUtil.configuration.table.machines);
            machineGR.addQuery(filter + '^sys_idIN' + machines_arr.toString());
            machineGR.query();
            var machineSysID2 = [];
            while (machineGR.next()) {
                machineSysID2.push(machineGR.name + '');
            }
            return machineSysID2;
        } catch (e) {
            CASLogger.error("Exception caught inside CASDaoUtil.updateMachinesNameArray  " + e);
        }
    },

    saveSharedResource: function(jsonObj) {
        try {
            CASLogger.debug('Inside  CASDaoUtil.saveSharedResource');
            var newShared = new GlideRecord(this.appUtil.configuration.table.shared_resources);
            if (jsonObj.res_id != '') {
                if (newShared.get(jsonObj.res_id));
            }

            newShared.query();

            if (newShared.next()) {
                newShared.name = (jsonObj.name) ? jsonObj.name + '' : '';
                newShared.description = (jsonObj.description) ? jsonObj.description + '' : '';
                newShared.deployments = (jsonObj.deployments) ? jsonObj.deployments + '' : '';
                newShared.machines = (jsonObj.machines) ? jsonObj.machines + '' : '';
                newShared.users = (jsonObj.users) ? jsonObj.users + '' : '';
                newShared.groups = (jsonObj.groups) ? jsonObj.groups + '' : '';
                newShared.update();
            } else {
                //newShared.initialize();
                newShared.name = (jsonObj.name) ? jsonObj.name + '' : '';
                newShared.description = (jsonObj.description) ? jsonObj.description + '' : '';
                newShared.deployments = (jsonObj.deployments) ? jsonObj.deployments + '' : '';
                newShared.machines = (jsonObj.machines) ? jsonObj.machines + '' : '';
                newShared.created_by = (jsonObj.user_id) ? jsonObj.user_id + '' : '';
                newShared.users = (jsonObj.users) ? jsonObj.users + '' : '';
                newShared.groups = (jsonObj.groups) ? jsonObj.groups + '' : '';
                newShared.insert();
            }
        } catch (e) {
            CASLogger.error("Exception caught inside CASDaoUtil.saveSharedResource  " + e);
        }
    },

    //---------------------------------genericGRquery method---------------------------------------
    //  USAGE: This method is used for creating GlideRecord
    //					to be rendered on the html template
    /*  PARAMS: tablename --> contains the table name
																																										encoded_query --> contains the query used for fetching the gliderecord
																																										limit --> set the limit of the query fetched
 																																										*/
    genericGRquery: function(tablename, encoded_query, limit) {
        try {
            CASLogger.debug('Inside the CASDaoUtil.genericGRquery');
            var gr = new GlideRecord(tablename);
            gr.setLimit(limit);
            gr.addEncodedQuery(encoded_query);
            gr.query();
            return gr;
        } catch (e) {
            CASLogger.error('Exception caught inside the CASDaoUtil.genericGRquery' + e);

        }
    },

    catalogItemCheck: function(current) {
        try {
            CASLogger.debug('Inside the CASDaoUtil.catalogItemCheck');
            var catalogItemId = current.request;
            var org = current.organization;
            if (catalogItemId) {
                var gr = new GlideRecord(this.appUtil.configuration.table.catalogItem);
                gr.addQuery('cas_uid', catalogItemId);
                gr.addQuery('organisation_name', current.organization);
                gr.query();
                if (gr.hasNext()) {
                    return "update";
                }
            }
            return "create";

        } catch (e) {
            CASLogger.error("Exception Caught inside CASDaoUtil.catalogItemCheck " + e);
        }
    },

    customCatalogCheck: function(catalogID, organization) {
        try {
            CASLogger.debug('Inside the CASDaoUtil.customCatalogCheck');


            if (catalogID) {
                var gr = new GlideRecord(this.appUtil.configuration.table.catalogItem);
                gr.addQuery('cas_uid', catalogID);
                gr.addQuery('organisation_name', organization);
                gr.query();
                if (gr.next()) {
                    var zr = new GlideRecord(this.appUtil.configuration.table.variable);
                    zr.addQuery('cat_item', gr.sys_id);
                    zr.query();
                    while (zr.next()) {

                        var item = new sn_sc.CatalogItemVariable(zr.sys_id);
                        item.deleteRecord('true');
                    }


                    var catItem = new sn_sc.CatItem(gr.sys_id);
                    catItem.deleteRecord('true');

                    //gr.deleteRecord();
                }
            }
        } catch (e) {
            CASLogger.error("Exception Caught inside CASDaoUtil.customCatalogCheck. " + e);
        }
    },

    checkVariable: function(key, catalog, version) {
        try {
            CASLogger.debug('Inside the CASDaoUtil.checkVariable');
            var variable = '';
            var rgx = new RegExp('[^a-zA-Z0-9]', 'g');

            var versionCheck = key.replace(rgx, ' ').trim().replaceAll(' ', '_');
            if (version == '' || version == 'undefined' || version == 'undefined,') {

                variable = versionCheck;
            } else {
                var versionEncrypt = version.replace(rgx, ' ').trim().replaceAll(' ', '_');
                variable = versionCheck + "__" + versionEncrypt;
            }
            var varCheckGR = new GlideRecord(this.appUtil.configuration.table.variable);
            varCheckGR.addQuery('cat_item', catalog);
            varCheckGR.addQuery('name', variable);
            varCheckGR.query();
            if (varCheckGR.next()) {
                return 'update';
            } else {
                return 'create';
            }

        } catch (e) {
            CASLogger.error("Exception Caught inside CASDaoUtil.checkVariable " + e);
        }
    },

    deleteContainer: function(pageSchema, catalog, version) {

        try {
            CASLogger.debug('Inside the importCatalog.deleteVariable');
            var curentVariableArr = [];
            var length = pageSchema.length;
            for (var i = 0; i < length; i++) {
                var pageName = pageSchema[i].id;
                var variable = '';
                var rgx = new RegExp('[^a-zA-Z0-9]', 'g');
                var versionCheck = pageName.replace(rgx, ' ').trim().replaceAll(' ', '_');

                if (version == '' || version == 'undefined' || version == 'undefined,') {
                    variable = versionCheck;
                } else {
                    var versionEncrypt = version.replace(rgx, ' ').trim().replaceAll(' ', '_');
                    variable = versionCheck + "__" + versionEncrypt;
                }

                curentVariableArr.push(variable);
            }




            var varCheckGR = new GlideRecord(this.appUtil.configuration.table.variable);
            varCheckGR.addQuery("cat_item", catalog);
            varCheckGR.addQuery("type", '=', '19').addOrCondition('type', '=', '20');

            if (version != '' && version != 'undefined' && version != 'undefined,') {
                varCheckGR.addQuery('x_vmw_cloudservice_versions', version + ',');
            }

            varCheckGR.query();
            while (varCheckGR.next()) {

                if (curentVariableArr.indexOf(varCheckGR.name.toString()) == -1) {
                    var item = new sn_sc.CatalogItemVariable(varCheckGR.sys_id);
                    item.deleteRecord('true');
                }
            }
        } catch (e) {
            CASLogger.error("Exception Caught inside ImportCatalog.deleteContainer " + e);
        }
    },

    deleteVariable: function(propertiesBlue, catalog, version) {

        try {
            CASLogger.debug('Inside the importCatalog.deleteVariable');
            var curentVariableArr = [];
            for (var keys in propertiesBlue) {

                var variable = '';
                var rgx = new RegExp('[^a-zA-Z0-9]', 'g');
                var versionCheck = keys.replace(rgx, ' ').trim().replaceAll(' ', '_');

                if (version == '' || version == 'undefined' || version == 'undefined,') {
                    variable = versionCheck;
                } else {
                    var versionEncrypt = version.replace(rgx, ' ').trim().replaceAll(' ', '_');
                    variable = versionCheck + "__" + versionEncrypt;
                }

                curentVariableArr.push(variable);

            }


            var varCheckGR = new GlideRecord(this.appUtil.configuration.table.variable);
            varCheckGR.addQuery('cat_item', catalog);
            varCheckGR.addQuery('type', '!=', 19);
            varCheckGR.addQuery('type', '!=', 20);

            if (version != '' && version != 'undefined' && version != 'undefined,') {
                varCheckGR.addQuery('x_vmw_cloudservice_versions', version + ',');
            }

            varCheckGR.query();
            while (varCheckGR.next()) {

                if (curentVariableArr.indexOf(varCheckGR.name.toString()) == -1) {
                    var item = new sn_sc.CatalogItemVariable(varCheckGR.sys_id);
                    item.deleteRecord('true');
                }
            }
        } catch (e) {
            CASLogger.error("Exception Caught inside ImportCatalog.deleteVariable " + e);
        }
    },

    deleteUnreleaseVersionVariable: function(catalog, version) {

        try {
            CASLogger.debug('Inside the importCatalog.deleteUnreleaseVersionVariable');

            var varCheckGR = new GlideRecord(this.appUtil.configuration.table.variable);
            varCheckGR.addQuery('cat_item', catalog);

            if (version != '' && version != 'undefined' && version != 'undefined,') {
                varCheckGR.addQuery('x_vmw_cloudservice_versions', version + ',');
            }

            varCheckGR.query();
            while (varCheckGR.next()) {
                var item = new sn_sc.CatalogItemVariable(varCheckGR.sys_id);
                item.deleteRecord('true');
            }

        } catch (e) {
            CASLogger.error("Exception Caught inside ImportCatalog.deleteUnreleaseVersionVariable " + e);
        }
    },

    // 	insertChoice : function(choice,variable){
    // 		try{
    // 			CASLogger.debug('Inside the CASDaoUtil.insertChoice');
    // 			var choice_value='';
    // 			var choice_text='';
    // 			//CASLogger.debug('Inside the CASDaoUtil.checkChoice');
    // 			if(typeof choice!='string'){
    // 				choice_text=choice['title'];
    // 				choice_value=choice['const'];
    // 				if(typeof choice=='number')
    // 				{
    // 					choice_text=choice;
    // 					choice_value=choice;
    // 				}
    // 			}else{
    // 				choice_text=choice;
    // 				choice_value=choice;
    // 			}
    // 			var grChoice = new GlideRecord(this.appUtil.configuration.table.choice);
    // 			grChoice.addQuery('text',choice_text);
    // 			grChoice.addQuery('question',variable);
    // 			grChoice.query();
    // 			if(grChoice.next()){
    // 				grChoice.value = choice_value;//choice;
    // 				grChoice.update();
    // 			}
    // 			else{
    // 				grChoice.initialize();
    // 				grChoice.text = choice_text;
    // 				grChoice.value = choice_value//choice;
    // 				grChoice.question = variable;
    // 				grChoice.insert();
    // 			}
    // 		}catch(e){
    // 			CASLogger.error("Exception Caught inside CASDaoUtil.checkChoice "+e);
    // 		}

    // 	},


    // 	insertChoice1 : function(choice,variable){
    // 		try{
    // 			CASLogger.debug('Inside the CASDaoUtil.insertChoice1');
    // 			var grChoice = new GlideRecord(this.appUtil.configuration.table.choice);
    // 			grChoice.addQuery('text',choice);
    // 			grChoice.addQuery('question',variable);
    // 			grChoice.query();
    // 			if(grChoice.next()){
    // 				grChoice.value = choice;
    // 				grChoice.update();
    // 			}
    // 			else{
    // 				grChoice.initialize();
    // 				grChoice.text = choice;
    // 				grChoice.value = choice;
    // 				grChoice.question = variable;
    // 				grChoice.insert();
    // 			}
    // 		}catch(e){
    // 			CASLogger.error("Exception Caught inside CASDaoUtil.insertChoice1 "+e);
    // 		}

    // 	},

    DeleteQuestionChoices: function(variable) {
        try {
            CASLogger.debug('Inside the CASDaoUtil.DeleteQuestionChoices');
            var grChoice = new GlideRecord(this.appUtil.configuration.table.choice);
            grChoice.addQuery('question', variable);
            grChoice.query();
            while (grChoice.next()) {

                grChoice.deleteMultiple();

            }
        } catch (e) {
            CASLogger.error("Exception Caught inside CASDaoUtil.DeleteQuestionChoices " + e);
        }

    },


    insertCustomChoice: function(text, value, variable, order) {
        try {
            CASLogger.debug('Inside the CASDaoUtil.insertCustomChoice');

            var grChoice = new GlideRecord(this.appUtil.configuration.table.choice);
            grChoice.initialize();
            grChoice.sys_scope = gs.getProperty(this.appUtil.configuration.properties.applicationSysID);
            grChoice.text = text;
            grChoice.value = value;
            grChoice.question = variable;
            grChoice.order = order;
            grChoice.insert();

        } catch (e) {
            CASLogger.error("Exception Caught inside CASDaoUtil.insertCustomChoice " + e);
        }

    },



    getFilter: function(org_ids) {
        try {
            CASLogger.debug('Inside the CASDaoUtil.getFilter');
            this.appUtil = new CASAppUtil();

            var arr = org_ids.split(",");
            var projectsSysIds = '';


            for (var i = 0; i < arr.length; i++) {
                var gr = new GlideRecord(this.appUtil.configuration.table.project);
                gr.addEncodedQuery('organization=' + arr[i]);
                gr.query();

                while (gr.next()) {
                    projectsSysIds = projectsSysIds + gr.sys_id + ',';

                }

            }

            return ('sys_idIN' + projectsSysIds.slice(0, -1));
        } catch (e) {
            CASLogger.error('Exception caught inside the CASDaoUtil.getFilter' + e);
        }


    },


    getFilters: function(projects_ids) {
        try {
            CASLogger.debug('Inside the CASDaoUtil.getFilters');
            this.appUtil = new CASAppUtil();

            var arr = projects_ids.split(",");
            var itemsysId = '';

            var gr = new GlideRecord(this.appUtil.configuration.table.catalogCategory);
            gr.addEncodedQuery('sc_categoryIN' + projects_ids);
            gr.query();

            while (gr.next()) {
                itemsysId = itemsysId + gr.sc_cat_item + ',';
            }

            return ('sys_idIN' + itemsysId.slice(0, -1));
        } catch (e) {
            CASLogger.error('Exception caught inside the CASDaoUtil.getFilters' + e);
        }

    },


    checkEntitlement: function(sys_id, type) {
        try {
            CASLogger.debug('Inside  CASDaoUtil.checkEntitlement');
            var gr = new GlideRecord(this.appUtil.configuration.table.entitlement);
            gr.addQuery('active=true');
            var query = '';
            if (type == 'projects') {
                query = 'entitled_groupsDYNAMICd6435e965f510100a9ad2572f2b47744^ORentitled_usersDYNAMIC90d1921e5f510100a9ad2572f2b477fe';
                query += '^select_projects=' + sys_id;
            } else if (type == 'organizations') {
                query = 'entitled_groupsDYNAMICd6435e965f510100a9ad2572f2b47744^ORentitled_usersDYNAMIC90d1921e5f510100a9ad2572f2b477fe';
                query += '^endpoint=' + sys_id;
            }

            gr.addEncodedQuery(query);
            gr.addEncodedQuery('active=true');
            gr.setLimit(1);
            gr.query();
            //gs.addErrorMessage(gr.next())
            //if(gr.getRowCount()!=0){
            if (gr.next()) {
                return true;
            }
            return false;
        } catch (e) {
            CASLogger.error("Exception caught inside CASDaoUtil.checkEntitlement  " + e);
        }

    },


    checkEntitlementActions: function(action, type, endpoint) {
        try {
            CASLogger.debug('Inside the CASDaoUtil.gitlementActions');
            var retVal = "false";
            var query;
            var gr = new GlideRecord(this.appUtil.configuration.table.actionEntitlement);
            gr.addEncodedQuery('actionLIKE' + action);
            var res_type = (type == 'machine') ? 'Resource' : 'Deployment';
            gr.addEncodedQuery('type=' + res_type);
            gr.query();
            //gs.addErrorMessage(gr.getEncodedQuery());
            if (gr.next()) {
                sysid = gr.sys_id;
                var entitle = new GlideRecord(this.appUtil.configuration.table.entitlement);
                //console.log(type);
                if (type == 'machine') {
                    query = 'active=true^endpoint=' + endpoint + '^entitled_usersDYNAMIC90d1921e5f510100a9ad2572f2b477fe^ORentitled_groupsDYNAMICd6435e965f510100a9ad2572f2b47744';
                    query += '^machine_actions=' + sysid;
                } else if (type == 'deployment') {
                    query = 'active=true^endpoint=' + endpoint + '^entitled_usersDYNAMIC90d1921e5f510100a9ad2572f2b477fe^ORentitled_groupsDYNAMICd6435e965f510100a9ad2572f2b47744';
                    query += '^deployment_actions=' + sysid;
                }

                entitle.addQuery(query);
                entitle.setLimit(1);
                entitle.query();
                //gs.addErrorMessage("entdi"+entitle.getEncodedQuery());
                //if(entitle.getRowCount()>0){
                if (entitle.next()) {
                    retVal = "true";
                }
            }
            //console.log('action '+action+' '+retVal);
            return retVal;
        } catch (e) {
            CASLogger.error('Exception caught inside the CASDaoUtil.checkEntitlementActions' + e);
        }

    },

    checkActionsCatalogEntitlement: function(catalogSysId) {
        try {
            CASLogger.debug('Inside the CASDaoUtil.checkActionsCatalogEntitlement');
            var retValAvailableFor = "false";
            var retValNotAvailableFor = "false";
			
			if(gs.hasRole('admin')){
				retValAvailableFor = 'true';
				retValNotAvailableFor = 'true';
			}else{
				
				//checking the entitement for the Available For
				var gr = new GlideRecord(this.appUtil.configuration.table.user_criteria_mtom);
				gr.addEncodedQuery('user_criteria.active=true^sc_cat_item=' + catalogSysId);
				gr.query();

				if (gr.next()) {
																	gr.addEncodedQuery('user_criteria.userDYNAMIC90d1921e5f510100a9ad2572f2b477fe^ORuser_criteria.groupDYNAMICd6435e965f510100a9ad2572f2b47744');

					gr.query();
					if (gr.next()) {
						retValAvailableFor = "true";
					} else {
						retValAvailableFor = "false";
					}

				} else {
					retValAvailableFor = "true";
				}

				//checking the entitement for Not Available For
				var gr1 = new GlideRecord(this.appUtil.configuration.table.user_criteria_no_mtom);
				gr1.addEncodedQuery('user_criteria.active=true^sc_cat_item=' + catalogSysId);
				gr1.query();

				if (gr1.next()) {
						gr1.addEncodedQuery('user_criteria.userDYNAMIC90d1921e5f510100a9ad2572f2b477fe^ORuser_criteria.groupDYNAMICd6435e965f510100a9ad2572f2b47744');

					gr1.query();
					if (gr1.next()) {
						retValNotAvailableFor = "false";
					} else {
						retValNotAvailableFor = "true";
					}

				} else {
					retValNotAvailableFor = "true";
				}

				
			}

			return (retValAvailableFor == 'true' && retValNotAvailableFor == 'true');
            
        } catch (e) {
            CASLogger.error('Exception caught inside the CASDaoUtil.checkActionsCatalogEntitlement' + e);
        }

    },


    /*getMyGroups:function(sysid){
		try
		{
			var gr = new GlideRecord(this.appUtil.configuration.table.GroupMembers);
			gr.addQuery('user='+sysid);
			gr.query();
			var str='';
			while(gr.next()){
				if(str)
					str=str+',';
				str = str + gr.group;
			}
			return str;
		}
		catch(e)
		{
			CASLogger.debug('Exception caught inside the CASDaoUtil.getMyGroups'+e);
		}
	},

*/
    insertClientScript: function(catalog, script, catalogItemName, description) {
        try {

            CASLogger.debug('Inside the CASDaoUtil.inserClientScript');
            // 			var grClientScript = new GlideRecord(this.appUtil.configuration.table.clientScript);
            // 			grClientScript.initialize();
            // 			grClientScript.sys_scope='0d6a0ec1db11bb407c83712ebf96194d';
            // 			if(description == 'getVersions' ){
            // 				grClientScript.name = "OnLoad to get Versions";
            // 				grClientScript.description = "getVersions__u_version";
            // 				grClientScript.type = "onLoad";
            // 			}
            // 			if(description == 'getProjects' ){
            // 				grClientScript.name = "OnLoad to get Projects";
            // 				grClientScript.description = "getProjects__u_project";
            // 				grClientScript.type = "onLoad";
            // 			}

            // 			grClientScript.applies_to = "item";
            // 			grClientScript.cat_item = catalog;
            // 			grClientScript.active = true;
            // 			grClientScript.applies_catalog = true;
            // 			grClientScript.ui_type = "0";
            // 			grClientScript.applies_req_item = false;
            // 			grClientScript.applies_sc_task = false;
            // 			grClientScript.script = script;
            // 			grClientScript.insert();


            // 			if(description=='getVersions')
            // 				{
            // 					gs.error("SUPERMAN--------->"+description);
            // 				}
            var app_scope = gs.getProperty(this.appUtil.configuration.properties.applicationSysID);

            var catalogClientScript = new sn_sc.CatalogClientScript();
            if (description == 'getVersions') {
                catalogClientScript.setAttributes({
                    'name': 'OnLoad to get Versions',
                    'description': 'getVersions__u_version',
                    'applies_to': 'item',
                    'ui_type': '10',
                    'type': 'onLoad',
                    'sys_scope': app_scope,
                    'cat_item': catalog,
                    'active': 'true',
                    'order': this.clientscriptorder
                });
                this.clientscriptorder++;
            }

            catalogClientScript.appliesToRequestedItem(true);

            if (description == 'makeFieldsReadOnly') {
                catalogClientScript.setAttributes({
                    'name': 'OnLoad to set fields Readonly',
                    'description': '',
                    'applies_to': 'item',
                    'ui_type': '10',
                    'type': 'onLoad',
                    'sys_scope': app_scope,
                    'cat_item': catalog,
                    'active': 'true',
                    'order': this.clientscriptorder
                });
                this.clientscriptorder++;
                catalogClientScript.appliesToRequestedItem(true);

            }

            if (description == 'onLoadHideContainer') {
                catalogClientScript.setAttributes({
                    'name': 'OnLoad to hide empty container',
                    'description': '',
                    'applies_to': 'item',
                    'ui_type': '10',
                    'type': 'onLoad',
                    'sys_scope': app_scope,
                    'cat_item': catalog,
                    'active': 'true',
                    'order': this.clientscriptorder
                });
                this.clientscriptorder++;
                catalogClientScript.appliesToRequestedItem(true);

            }

            if (description == 'versionOnChange') {
                var grCatItem = new GlideRecord(this.appUtil.configuration.table.catalogItem);
                var versions;
                if (grCatItem.get(catalog)) {
                    versions = grCatItem.versions.slice(0, -1).split(",");
                }
                if (versions.length > 1) {
                    var onChangeOfVar = '';
                    var variableSetSysID = gs.getProperty(this.appUtil.configuration.properties.variableSetSysID);
                    var grCatVar = new GlideRecord(this.appUtil.configuration.table.variable);
                    grCatVar.addQuery('variable_set', variableSetSysID);
                    grCatVar.addQuery('name', 'u_version');
                    grCatVar.query();
                    if (grCatVar.next()) {
                        onChangeOfVar = 'IO:' + grCatVar.sys_id.toString();
                    }
                    catalogClientScript.setAttributes({
                        'name': 'onChange of Version',
                        'description': '',
                        'applies_to': 'item',
                        'ui_type': '10',
                        'type': 'onChange',
                        'cat_variable': onChangeOfVar,
                        'sys_scope': app_scope,
                        'cat_item': catalog,
                        'active': 'true',
                        'order': this.clientscriptorder
                    });
                    this.clientscriptorder++;
                    catalogClientScript.appliesToRequestedItem(true);
                }
            }



            catalogClientScript.appliesToRequestedItem(true);
            catalogClientScript.appliesToCatalogItem(true);

            if (description == 'getProjects') {
                catalogClientScript.setAttributes({
                    'name': 'OnLoad to get Projects',
                    'description': 'getProjects__u_project',
                    'applies_to': 'item',
                    'ui_type': '10',
                    'type': 'onLoad',
                    'sys_scope': app_scope,
                    'cat_item': catalog,
                    'active': 'true',
                    'order': this.clientscriptorder
                });

                this.clientscriptorder++;
                catalogClientScript.appliesToRequestedItem(false);
            }

            if (description == 'OnLoad to set Macro fields hidden') {
                catalogClientScript.setAttributes({
                    'name': 'OnLoad to set Macro fields hidden',
                    'description': '',
                    'applies_to': 'item',
                    'ui_type': '10',
                    'type': 'onLoad',
                    'sys_scope': app_scope,
                    'cat_item': catalog,
                    'active': 'true',
                    'order': this.clientscriptorder
                });
                this.clientscriptorder++;
                catalogClientScript.appliesToCatalogItem(false);

            }
            if (description == 'OnLoad to set datagrid hidden') {
                catalogClientScript.setAttributes({
                    'name': 'OnLoad to set datagrid hidden',
                    'description': '',
                    'applies_to': 'item',
                    'ui_type': '10',
                    'type': 'onLoad',
                    'sys_scope': app_scope,
                    'cat_item': catalog,
                    'active': 'true',
                    'order': this.clientscriptorder
                });
                this.clientscriptorder++;
                catalogClientScript.appliesToRequestedItem(false);
            }

            if (description == 'onLoadOAuthValidation') {
                catalogClientScript.setAttributes({
                    'name': 'OnLoad for OAuth Validation',
                    'description': '',
                    'applies_to': 'item',
                    'ui_type': '10',
                    'type': 'onLoad',
                    'sys_scope': app_scope,
                    'cat_item': catalog,
                    'active': 'true',
                    'order': this.clientscriptorder
                });
                this.clientscriptorder++;
                catalogClientScript.appliesToRequestedItem(false);
            }

            catalogClientScript.addScript(script);
            //catalogClientScript.appliesToRequestedItem(false);
            //catalogClientScript.appliesToCatalogTask(false);
            var catalogClientScriptId = catalogClientScript.create();

        } catch (e) {
            CASLogger.error('Exception caught inside the CASDaoUtil.insertClientScript ' + e);
        }
    },

    insertValidationScript: function(minValue, maxValue, pattern, datatype, catalog, versions, field, patternMessage, order) {
        try {
			var rgx = new RegExp('[^a-zA-Z0-9]', 'g');
            var field_sys_id = '';
            var name = '';
            var variableGR = new GlideRecord(this.appUtil.configuration.table.variable);
            var query = '';
            if (versions) {
                name = field + '__' + versions;
				name = name.replace(rgx, ' ').trim().replaceAll(' ', '_');
            } else {
                name = field;
				name = name.replace(rgx, ' ').trim().replaceAll(' ', '_');
            }
            query = 'cat_item=' + catalog + '^name=' + name;
            variableGR.addEncodedQuery(query);
            variableGR.query();
            if (variableGR.next()) {
                field_sys_id = variableGR.sys_id;
                if (variableGR.x_vmw_cloudservice_datatype == 'Duallist' || variableGR.x_vmw_cloudservice_datatype == 'Multiselect')
                    return order++;
            }

            var minvalue1, minvalue2, maxvalue1, maxvalue2, patterncheck = '';
            var script = "function onChange(control,oldValue,newValue,isLoading){if(isLoading||newValue==''){return;}}";
            var insertscrpt = '';
            if ((minValue && datatype == 'string') || (minValue && datatype == 'secureString')) {
                minvalue1 = "if((newValue.length)<" + minValue + "){alert('Minimum field length should be " + minValue + "');g_form.clearValue('" + name + "');return;}";
                insertscrpt = insertscrpt + minvalue1;
            }
            if (minValue && datatype != 'string' && datatype != 'secureString') {
                minvalue2 = "if((newValue)<" + minValue + "){alert('Minimum field length should be " + minValue + "');g_form.clearValue('" + name + "');return;}";
                insertscrpt = insertscrpt + minvalue2;
            }
            if ((maxValue && datatype == 'string') || (maxValue && datatype == 'secureString')) {
                maxvalue1 = "if((newValue.length)>" + maxValue + "){alert('Maximum field length should be " + maxValue + "');g_form.clearValue('" + name + "');return;}";
                insertscrpt = insertscrpt + maxvalue1;
            }
            if (maxValue && datatype != 'string' && datatype != 'secureString') {
                maxvalue2 = "if((newValue)>" + maxValue + "){alert('Maximum field length should be " + maxValue + "');g_form.clearValue('" + name + "');return;}";
                insertscrpt = insertscrpt + maxvalue2;
            }
            //display message
            if (pattern) {
                patterncheck = "var rgx=new RegExp('" + pattern + "');if(!rgx.test(newValue)){alert('Invalid Format! " + patternMessage + "');g_form.clearValue('" + name + "');return;}";
                insertscrpt = insertscrpt + patterncheck;
            }

            script = "function onChange(control,oldValue,newValue,isLoading){if(isLoading||newValue==''){return;}" + insertscrpt + "}";
            var app_scope = gs.getProperty(this.appUtil.configuration.properties.applicationSysID);
            var catalogClientScript = new sn_sc.CatalogClientScript();
            catalogClientScript.setAttributes({
                'name': name,
                'description': 'onChange ' + field + '__' + versions + ' validation',
                'applies_to': 'all',
                'ui_type': '10',
                'type': 'onChange',
                'sys_scope': app_scope,
                'cat_item': catalog,
                'active': 'true',
                'cat_variable': 'IO:' + field_sys_id,
                'order': this.clientscriptorder
            });
            this.clientscriptorder++;
            catalogClientScript.addScript(script);
            catalogClientScript.appliesToCatalogItem(true);
            var catalogClientScriptId = catalogClientScript.create();
            return order++;

        } catch (e) {
            CASLogger.error('Exception caught inside the CASDaoUtil.insertValidationScript ' + e);
        }

    },

    insertonloadscript: function(datasource, uri, parameters, dependency, field, catalog, version, onloadType) {
        try {
            if (!version) {
                version = 'undefined';
            }

            var script = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == '' ) { return;}if(g_form.getValue('u_version') != '" + version + "'){return;}g_form.setReadOnly('u_version',true);g_form.setReadOnly('" + field + "',true);var parameters='" + parameters + "';if(!parameters){parameters=[];}else{parameters=JSON.parse(parameters);}var dependency='" + dependency + "';var dependencyArr ='';if(dependency){dependencyArr =dependency.split(',');}var uri='" + uri + "';var datasource='" + datasource + "';if (dependencyArr) {for(var i=0;i<dependencyArr.length;i=i+2){var value=g_form.getValue(dependencyArr[i+1]);parameters.push({'name':dependencyArr[i],'value':value});}}var projectId=g_form.getValue('u_project');var catItemSysid=g_form.getUniqueValue(); var gAjax=new GlideAjax('x_vmw_cloudservice.vRACSClientSciptBridge');gAjax.addParam('sysparm_name','dynamicDropDownValues');gAjax.addParam('sysparm_sys_id',catItemSysid);gAjax.addParam('sysparm_url',uri);gAjax.addParam('sysparm_datasource',datasource);gAjax.addParam('sysparm_parameter',JSON.stringify(parameters));gAjax.addParam('sysparm_projectId',projectId);gAjax.getXMLAnswer(callBack);function callBack(response){var answer=response;g_form.setReadOnly('" + field + "',false);answer=JSON.parse(answer);if(typeof answer.data =='object'){g_form.clearOptions('" + field + "');g_form.addOption('" + field + "','','--None--');for(i=0;i<answer.data.length;i++){if(typeof answer.data[i] == 'object'){g_form.addOption('" + field + "',answer.data[i].value, answer.data[i].id || answer.data[i].label);}else{g_form.addOption('" + field + "',answer.data[i],answer.data[i]);}}}else{if(answer.data){g_form.setValue('" + field + "', answer.data, answer.data);} }g_form.setReadOnly('u_version',false);}}";

            if (onloadType == 'onload_defaultValue') {
                script = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == '' ) { return;}if(g_form.getValue('u_version') != '" + version + "'){return;}g_form.setReadOnly('u_version',true);g_form.setReadOnly('" + field + "',true);var parameters='" + parameters + "';if(!parameters){parameters=[];}else{parameters=JSON.parse(parameters);}var dependency='" + dependency + "';var dependencyArr ='';if(dependency){dependencyArr =dependency.split(',');}var uri='" + uri + "';var datasource='" + datasource + "';if (dependencyArr) {for(var i=0;i<dependencyArr.length;i=i+2){var value=g_form.getValue(dependencyArr[i+1]);parameters.push({'name':dependencyArr[i],'value':value});}}var projectId=g_form.getValue('u_project');var catItemSysid=g_form.getUniqueValue(); var gAjax=new GlideAjax('x_vmw_cloudservice.vRACSClientSciptBridge');gAjax.addParam('sysparm_name','dynamicDropDownValues');gAjax.addParam('sysparm_sys_id',catItemSysid);gAjax.addParam('sysparm_url',uri);gAjax.addParam('sysparm_datasource',datasource);gAjax.addParam('sysparm_parameter',JSON.stringify(parameters));gAjax.addParam('sysparm_projectId',projectId);gAjax.getXMLAnswer(callBack);function callBack(response){var answer=response;g_form.setReadOnly('" + field + "',false);answer=JSON.parse(answer);if(typeof answer.data =='object'){for(i=0;i<answer.data.length;i++){if(typeof answer.data[i] == 'object'){g_form.addOption('" + field + "',answer.data[i].value, answer.data[i].id || answer.data[i].label);g_form.setValue('" + field + "',answer.data[i].value, answer.data[i].id || answer.data[i].label);}else{g_form.addOption('" + field + "',answer.data[i],answer.data[i]);g_form.setValue('" + field + "',answer.data[i],answer.data[i]);}}}else{if(answer.data){g_form.setValue('" + field + "', answer.data, answer.data);} }g_form.setReadOnly('u_version',false);}}";
            }
            var fieldSysID = '';
            var app_scope = gs.getProperty(this.appUtil.configuration.properties.applicationSysID);
            var varGR = new GlideRecord(this.appUtil.configuration.table.variable);
            var query = '';
            query = 'name=u_version';

            varGR.addEncodedQuery(query);
            varGR.query();
            if (varGR.next()) {
                fieldSysID = varGR.sys_id;
            }
            var query1 = 'cat_item=' + catalog + '^name=' + field + '^x_vmw_cloudservice_datatype!=Decimal^ORx_vmw_cloudservice_datatype=NULL';
            var varGR1 = new GlideRecord(this.appUtil.configuration.table.variable);
            varGR1.addEncodedQuery(query1);
            varGR1.query();
            if (varGR1.next()) {

                var datatype = varGR1.x_vmw_cloudservice_cas_name;

                if (datatype.startsWith('INT__')) {
                    script = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == '' ) { return;}if(g_form.getValue('u_version') != '" + version + "'){return;}g_form.setReadOnly('u_version',true);g_form.setReadOnly('" + field + "',true);var parameters='" + parameters + "';if(!parameters){parameters=[];}else{parameters=JSON.parse(parameters);}var dependency='" + dependency + "';var dependencyArr='';if(dependency){dependencyArr =dependency.split(',');}var uri='" + uri + "';var datasource='" + datasource + "';for(var i=0;i<dependencyArr.length;i=i+2){var value=g_form.getValue(dependencyArr[i+1]);parameters.push({'name':dependencyArr[i],'value':value});}var projectId=g_form.getValue('u_project');var catItemSysid=g_form.getUniqueValue(); var gAjax=new GlideAjax('x_vmw_cloudservice.vRACSClientSciptBridge');gAjax.addParam('sysparm_name','dynamicDropDownValues');gAjax.addParam('sysparm_sys_id',catItemSysid);gAjax.addParam('sysparm_url',uri);gAjax.addParam('sysparm_datasource',datasource);gAjax.addParam('sysparm_parameter',JSON.stringify(parameters));gAjax.addParam('sysparm_projectId',projectId);gAjax.getXMLAnswer(callBack);function callBack(response){var answer=response;g_form.setReadOnly('" + field + "',false);answer=JSON.parse(answer);if(typeof answer.data =='object'){g_form.clearOptions('" + field + "');g_form.addOption('" + field + "','','--None--');for(i=0;i<answer.data.length;i++){if(typeof answer.data[i] == 'object'){g_form.addOption('" + field + "',answer.data[i].value, answer.data[i].id || answer.data[i].label);}else{g_form.addOption('" + field + "',answer.data[i],answer.data[i]);}}}else{ if(answer.data){g_form.setValue('" + field + "', answer.data, answer.data);} }g_form.setReadOnly('u_version',false);}}";
                }
            }

            var dynamic_query = 'cat_item=' + catalog + '^name=' + field + '^x_vmw_cloudservice_datatype=DataGrid^ORx_vmw_cloudservice_datatype=Duallist^ORx_vmw_cloudservice_datatype=Multiselect';
            var var_GR = new GlideRecord(this.appUtil.configuration.table.variable);
            var_GR.addEncodedQuery(dynamic_query);
            var_GR.query();
            if (var_GR.next()) {
                var CASName = var_GR.x_vmw_cloudservice_cas_name;
                var casDatatype = var_GR.x_vmw_cloudservice_datatype;
                if (CASName.startsWith('STR__datagrid')) {
                    script = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == '' ) { return;}if(g_form.getValue('u_version') != '" + version + "'){return;}g_form.setReadOnly('u_version',true);g_form.setReadOnly('" + field + "',true);var parameters='" + parameters + "';if(!parameters){parameters=[];}else{parameters=JSON.parse(parameters);}var dependency='" + dependency + "';var dependencyArr =dependency.split(',');var uri='" + uri + "';var datasource='" + datasource + "';for(var i=0;i<dependencyArr.length;i=i+2){var value=g_form.getValue(dependencyArr[i+1]);parameters.push({'name':dependencyArr[i],'value':value});}var projectId=g_form.getValue('u_project');var catItemSysid=g_form.getUniqueValue(); var gAjax=new GlideAjax('x_vmw_cloudservice.vRACSClientSciptBridge');gAjax.addParam('sysparm_name','dynamicDropDownValues');gAjax.addParam('sysparm_sys_id',catItemSysid);gAjax.addParam('sysparm_url',uri);gAjax.addParam('sysparm_datasource',datasource);gAjax.addParam('sysparm_parameter',JSON.stringify(parameters));gAjax.addParam('sysparm_projectId',projectId);gAjax.getXMLAnswer(callBack);function callBack(response){var answer=response;g_form.setReadOnly('" + field + "',false);answer=JSON.parse(answer);if(typeof answer.data =='object'){g_form.clearOptions('" + field + "');g_form.addOption('" + field + "','','--None--');g_form.setValue('" + field + "', JSON.stringify(answer.data), JSON.stringify(answer.data));}else{if(answer.data){g_form.setValue('" + field + "', answer.data, answer.data);} }g_form.setReadOnly('u_version',false);}}";

                }
                if ((casDatatype == 'Duallist' || casDatatype == 'Multiselect') && onloadType == 'onload_defaultValue') {
                    script = "function onChange(control,oldValue,newValue,isLoading){if(isLoading||newValue==''){return;} if(g_form.getValue('u_version')!='" + version + "'){return;} var field_id='" + field + "';var formElement=g_form.getControl('macro_'+field_id);g_form.setReadOnly('u_version',true);g_form.setReadOnly('" + field + "',true);var parameters='" + parameters + "';if(!parameters){parameters=[];}else{parameters=JSON.parse(parameters);} var dependency='" + dependency + "';var dependencyArr=dependency.split(',');var uri='" + uri + "';var datasource='" + datasource + "';for(var i=0;i<dependencyArr.length;i=i+2){var value=g_form.getValue(dependencyArr[i+1]);parameters.push({'name':dependencyArr[i],'value':value});} var projectId=g_form.getValue('u_project');var catItemSysid=g_form.getUniqueValue();var gAjax=new GlideAjax('x_vmw_cloudservice.vRACSClientSciptBridge');gAjax.addParam('sysparm_name','dynamicDropDownValues');gAjax.addParam('sysparm_sys_id',catItemSysid);gAjax.addParam('sysparm_url',uri);gAjax.addParam('sysparm_datasource',datasource);gAjax.addParam('sysparm_parameter',JSON.stringify(parameters));gAjax.addParam('sysparm_projectId',projectId);gAjax.getXMLAnswer(callBack);function callBack(response){var answer=response;g_form.setReadOnly('" + field + "',false);answer=JSON.parse(answer);var control;if(formElement.querySelector)formElement.querySelector('#default_values'+field_id).value=JSON.stringify(answer.data);if(g_form.getField) if(g_form.getField(field_id).choices){g_form.getField(field_id).default_value_onload=answer.data;} g_form.setReadOnly('u_version',false);}}";

                }
                if ((casDatatype == 'Duallist' || casDatatype == 'Multiselect') && onloadType == 'onload_valueList') {
                    script = "function onChange(control,oldValue,newValue,isLoading){if(isLoading||newValue==''){return;} if(g_form.getValue('u_version')!='" + version + "'){return;} var field_id='" + field + "';var formElement=g_form.getControl('macro_'+field_id);g_form.setReadOnly('u_version',true);g_form.setReadOnly('" + field + "',true);var parameters='" + parameters + "';if(!parameters){parameters=[];}else{parameters=JSON.parse(parameters);} var dependency='" + dependency + "';var dependencyArr=dependency.split(',');var uri='" + uri + "';var datasource='" + datasource + "';for(var i=0;i<dependencyArr.length;i=i+2){var value=g_form.getValue(dependencyArr[i+1]);parameters.push({'name':dependencyArr[i],'value':value});} var projectId=g_form.getValue('u_project');var catItemSysid=g_form.getUniqueValue();var gAjax=new GlideAjax('x_vmw_cloudservice.vRACSClientSciptBridge');gAjax.addParam('sysparm_name','dynamicDropDownValues');gAjax.addParam('sysparm_sys_id',catItemSysid);gAjax.addParam('sysparm_url',uri);gAjax.addParam('sysparm_datasource',datasource);gAjax.addParam('sysparm_parameter',JSON.stringify(parameters));gAjax.addParam('sysparm_projectId',projectId);gAjax.getXMLAnswer(callBack);function callBack(response){var answer=response;g_form.setReadOnly('" + field + "',false);answer=JSON.parse(answer);if(typeof answer.data=='object'){for(i=0;i<answer.data.length;i++){if(typeof answer.data[i]=='object'){g_form.addOption('" + field + "',answer.data[i].value,answer.data[i].id);if(g_form.getField) if(g_form.getField(field_id).choices){g_form.getField(field_id).all_options_onload=answer.data;}}else{g_form.addOption('" + field + "',answer.data[i],answer.data[i]);if(g_form.getField) if(g_form.getField(field_id).choices){g_form.getField(field_id).all_options_onload=answer.data;}}} if(formElement.querySelector)formElement.querySelector('#all_options'+field_id).value=JSON.stringify(answer.data);}else{g_form.setValue('" + field + "',answer.data,answer.data);if(formElement.querySelector)formElement.querySelector('#all_options'+field_id).value=JSON.stringify(answer.data);if(g_form.getField) if(g_form.getField(field_id).choices){g_form.getField(field_id).all_options_onload=answer.data;}} g_form.setReadOnly('u_version',false);}}";

                }

            }

            var catalogClientScript = new sn_sc.CatalogClientScript();
            catalogClientScript.setAttributes({
                'name': field + " dependent",
                'description': 'onLoad ' + field + ' dependency',
                'applies_to': 'all',
                'ui_type': '10',
                'type': 'onChange',
                'sys_scope': app_scope,
                'cat_item': catalog,
                'active': 'true',
                'order': this.clientscriptorder,
                'cat_variable': 'IO:' + fieldSysID

            });
            this.clientscriptorder++;
            catalogClientScript.addScript(script);
            catalogClientScript.appliesToCatalogItem(true);
            var catalogClientScriptId = catalogClientScript.create();

        } catch (e) {
            CASLogger.error('Exception caught inside the CASDaoUtil.insertonloadscript ' + e);
        }
    },

    insertonchangescript: function(datasource, uri, parameters, dependency, field, catalog, version) {
        try {
            if (!version) {
                version = 'undefined';
            }
            var dependency1 = dependency;
            var fieldSysID = '';
            var script = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == '' ) { return;}if(g_form.getValue('u_version') != '" + version + "'){return;}g_form.setReadOnly('u_version',true);g_form.setReadOnly('" + field + "',true);var parameters='" + parameters + "';if(!parameters){parameters=[];}else{parameters=JSON.parse(parameters);}var dependency='" + dependency + "';var dependencyArr ='';if(dependency){dependencyArr = dependency.split(',');}var uri='" + uri + "';var datasource='" + datasource + "';for(var i=0;i<dependencyArr.length;i=i+2){var value=g_form.getValue(dependencyArr[i+1]);parameters.push({'name':dependencyArr[i],'value':value});}var projectId=g_form.getValue('u_project');var catItemSysid=g_form.getUniqueValue();var gAjax=new GlideAjax('x_vmw_cloudservice.vRACSClientSciptBridge');gAjax.addParam('sysparm_name','dynamicDropDownValues');gAjax.addParam('sysparm_sys_id',catItemSysid);gAjax.addParam('sysparm_url',uri);gAjax.addParam('sysparm_datasource',datasource);gAjax.addParam('sysparm_parameter',JSON.stringify(parameters));gAjax.addParam('sysparm_projectId',projectId);gAjax.getXMLAnswer(callBack);function callBack(response){var answer=response;g_form.setReadOnly('" + field + "',false);answer=JSON.parse(answer);if(typeof answer.data =='object'){g_form.clearOptions('" + field + "');g_form.addOption('" + field + "','','--None--');for(i=0;i<answer.data.length;i++){if(typeof answer.data[i] == 'object'){g_form.addOption('" + field + "',answer.data[i].value, answer.data[i].id || answer.data[i].label);}else{g_form.addOption('" + field + "',answer.data[i],answer.data[i]);}}}else{ if(answer.data){g_form.setValue('" + field + "', answer.data, answer.data);} }g_form.setReadOnly('u_version',false);}}";
            for (var onChange = 0; onChange < dependency1.length; onChange = onChange + 2) {
                var varGR = new GlideRecord(this.appUtil.configuration.table.variable);
                var query = '';

                if (dependency1[onChange + 1] == 'u_project') {
                    query = 'name=u_project';

                } else {
                    query = 'cat_item=' + catalog + '^name=' + dependency1[onChange + 1];
                }
                varGR.addEncodedQuery(query);
                varGR.query();
                if (varGR.next()) {
                    fieldSysID = varGR.sys_id;
                }
                var app_scope = gs.getProperty(this.appUtil.configuration.properties.applicationSysID);
                var catalogClientScript = new sn_sc.CatalogClientScript();
                catalogClientScript.setAttributes({
                    'name': field + " dependent",
                    'description': 'onChange ' + field + ' dependency',
                    'applies_to': 'all',
                    'ui_type': '10',
                    'type': 'onChange',
                    'sys_scope': app_scope,
                    'cat_item': catalog,
                    'active': 'true',
                    'cat_variable': 'IO:' + fieldSysID,
                    'order': this.clientscriptorder

                });
                this.clientscriptorder++;
                catalogClientScript.addScript(script);
                catalogClientScript.appliesToCatalogItem(true);
                var catalogClientScriptId = catalogClientScript.create();

            }


        } catch (e) {
            CASLogger.error('Exception caught inside the CASDaoUtil.insertonchangescript ' + e);
        }
    },

    deleteClientScript: function(catalog) {
        try {
            var catalogClientScript = new sn_sc.CatalogClientScript();
            catalogClientScript.deleteRecord("039c516237b1300054b6a3549dbe5dfc");
            var clientGR = new GlideRecord(this.appUtil.configuration.table.clientScript);
            clientGR.addQuery('cat_item', catalog);
            clientGR.query();
            while (clientGR.next()) {
                catalogClientScript.deleteRecord(clientGR.sys_id);
            }
        } catch (e) {

        }
    },


    getCatalogVersion: function(catalogSysid) {

        try {
            CASLogger.debug('Inside the CASDaoUtil.getCatalogVersion');
            //CASLogger.debug('Inside the CASDaoUtil.getCatalogVersion');
            var grCatItem = new GlideRecord(this.appUtil.configuration.table.catalogItem);
            var version = [];
            var i;
            var versions;
            if (grCatItem.get(catalogSysid)) {
                versions = grCatItem.versions.split(",");
                for (i = 0; i < versions.length; i++) {
                    version[i] = {
                        "label": versions[i],
                        "value": versions[i]
                    };

                }
            }
            return JSON.stringify(version.slice(0, -1));
        } catch (e) {
            CASLogger.error('Exception caught inside the CASDaoUtil.getCatalogVersion ' + e);
        }
    },

    getCatalogProjects: function(catalogSysid) {
        try {
            CASLogger.debug('Inside the CASDaoUtil.getCatalogProjects');

            var grCatItem = new GlideRecord(this.appUtil.configuration.table.catalogCategory);
            var project = [];
            var i = 0;
            //var projects;
            grCatItem.addQuery('sc_cat_item', catalogSysid);
            grCatItem.query();
            while (grCatItem.next()) {

                //projects=grCatItem.projects.split(",");
                //CASLogger.error('title '+grCatItem["sc_category"]["project_id"]);
                var title = grCatItem["sc_category"]["title"] + '';
                var value = grCatItem["sc_category"]["project_id"] + '';
                var projectSysId = grCatItem["sc_category"]["sys_id"] + '';
                project[i] = {
                    "label": title,
                    "value": value,
                    "projectSysId": projectSysId
                };

                i++;
                //CASLogger.error("getCatalogProjects "+ project);
            }
            //CASLogger.error('project '+JSON.stringify(project));
            return JSON.stringify(project);
        } catch (e) {
            CASLogger.error('Exception caught inside the CASDaoUtil.getCatalogProjects ' + e);
        }
    },






    getCatalogVariable: function(catalogSysid, value)

    {
        try {
            CASLogger.debug('Inside the CASDaoUtil.getCatalogVariable.');
            var grCatVar = new GlideRecord(this.appUtil.configuration.table.variable);
            var x_vmw_cloudservice_versions;
            var i;
            var name = [];
            grCatVar.addQuery('cat_item', catalogSysid);
            grCatVar.query();
            //CASLogger.error('No of records '+grCatVar.getRowCount());
            while (grCatVar.next()) {
                x_vmw_cloudservice_versions = grCatVar.x_vmw_cloudservice_versions.split(",");
                for (i = 0; i < x_vmw_cloudservice_versions.length; i++) {
                    if (x_vmw_cloudservice_versions[i].trim() == value.trim()) {
                        name[i] = name + grCatVar.name.trim() + ',';

                    }
                }
            }
            CASLogger.error('name ' + name);
            return JSON.stringify(name);

        } catch (e) {
            CASLogger.error('Exception caught inside the CASDaoUtil.getCatalogVariable ' + e);
        }
    },

    getDeploymentList: function(catalog) {
        try {
            var sys_id = '';
            var type = '';
            var query = '';
            var opGR = new GlideRecord(this.appUtil.configuration.table.action);
            opGR.addQuery('catalog_item', catalog);
            opGR.addQuery('valid', 'true');
            opGR.query();
            while (opGR.next()) {
                if (opGR.deployment) {
                    type = 'Deployment';
                    sys_id = sys_id + opGR.deployment + ',';
                }
                if (opGR.machine) {
                    type = 'Machine';
                    sys_id = sys_id + opGR.machine.deploymentid + ',';
                }
            }
            sys_id = sys_id.slice(0, -1);
            if (type == 'Deployment') {
                query = 'sys_idIN' + sys_id;
            } else if (type == 'Machine') {
                query = 'deployment_idIN' + sys_id;
            } else {
                return ('active!=true^active!=false');
            }
            var user = gs.getUser();
            if (user.hasRole('admin')) {
                return ('operational_status=1^active=true^status!=CREATE INPROGRESS^' + query);
            } else {
                return ('servicenow_owner=' + gs.getUserID() + '^ORvra_ownerLIKE' + gs.getUserID() + '^operational_status=1^active=true^status!=CREATE INPROGRESS^' + query);
            }
        } catch (e) {
            CASLogger.error('Exception caught inside the CASDaoUtil.getDeploymentList ' + e);
        }
    },

    getMachineList: function(catalog, deployment) {
        try {
            var sys_id = '';
            var type = '';
            var query = '';
            var opGR = new GlideRecord(this.appUtil.configuration.table.action);
            opGR.addQuery('catalog_item', catalog);
            opGR.addQuery('valid', 'true');
            opGR.query();
            while (opGR.next()) {

                if (opGR.machine) {

                    sys_id = sys_id + opGR.machine + ',';
                }
            }
            sys_id = sys_id.slice(0, -1);
            query = 'sys_idIN' + sys_id + '^active=true^deploymentid=' + deployment;

            return query;
        } catch (e) {
            CASLogger.error('Exception caught inside the CASDaoUtil.getDeploymentList ' + e);
        }
    },


    createDefaultClientScript: function(catalog, respourceType) {
        try {
            var script = "function onLoad(){var arr=g_form.getEditableFields();for(var i=0;i<arr.length;i++){g_form.setMandatory(arr[i],false);g_form.setVisible(arr[i],false);g_form.setDisplay(arr[i],false);}g_form.setVisible('deployment',true);g_form.setDisplay('deployment',true);g_form.setVisible('machine',true);g_form.setDisplay('machine',true);g_form.setMandatory('deployment',true);g_form.setMandatory('machine',true);g_form.setReadOnly('endpoint',true);g_form.setReadOnly('project',true);}";
            var catalogClientScript = new sn_sc.CatalogClientScript();
            catalogClientScript.setAttributes({
                'name': "hideFields",
                'description': 'onLoad to hideFIelds',
                'applies_to': 'all',
                'ui_type': '10',
                'type': 'onLoad',
                'cat_item': catalog,
                'active': 'true',
            });

            catalogClientScript.addScript(script);
            catalogClientScript.appliesToCatalogItem(true);
            var catalogClientScriptId = catalogClientScript.create();

            var fieldSysID = '';
            var varGR = new GlideRecord(this.appUtil.configuration.table.variable);
            varGR.addQuery('cat_item', catalog);
            varGR.addQuery('name', 'deployment');
            varGR.query();
            if (varGR.next()) {
                fieldSysID = varGR.sys_id;
            }

            var onchangescript = "function onChange(control,oldValue,newValue,isLoading){if(isLoading||newValue==''){return;}var gAjax=new GlideAjax('x_vmw_cloudservice.vRACSClientSciptBridge');gAjax.addParam('sysparm_name','getEndpoint');gAjax.addParam('sysparm_deploymentid',newValue);gAjax.getXMLAnswer(callBack);function callBack(response){var answer=response;var parsed=JSON.parse(answer);if(parsed.endpoint){g_form.setValue('endpoint',parsed.endpoint);g_form.setVisible('endpoint',true);g_form.setDisplay('endpoint',true);}if(parsed.project){g_form.setValue('project',parsed.project);g_form.setVisible('project',true);g_form.setDisplay('project',true);}}}";
            catalogClientScript.setAttributes({
                'name': "populateProjectandEndpoint",
                'description': 'populateProjectandEndpoint',
                'applies_to': 'all',
                'ui_type': '10',
                'type': 'onChange',
                'cat_item': catalog,
                'active': 'true',
                'cat_variable': 'IO:' + fieldSysID
            });

            catalogClientScript.addScript(onchangescript);
            catalogClientScript.appliesToCatalogItem(true);
            var catalogClientScriptId = catalogClientScript.create();

            var variableScript = "function onChange(control,oldValue,newValue,isLoading){if(isLoading||newValue==''){return;}var catalog=g_form.getUniqueValue();var fields=g_form.getEditableFields();for(var i=0;i<fields.length;i++){if(fields[i] != 'deployment' && fields[i] != 'machine'&&fields[i] != 'General'){g_form.setMandatory(fields[i],false);g_form.setVisible(fields[i],false);g_form.setDisplay(fields[i],false);}}g_form.setMandatory('deployment',true);g_form.setVisible('deployment',true);g_form.setDisplay('deployment',true);g_form.setMandatory('machine',true);g_form.setVisible('machine',true);g_form.setDisplay('machine',true);var gAjax=new GlideAjax('x_vmw_cloudservice.vRACSClientSciptBridge');gAjax.addParam('sysparm_name','getSchema');gAjax.addParam('sysparm_deploymentid',newValue);gAjax.addParam('sysparm_catalogid',catalog);gAjax.addParam('sysparm_type','" + respourceType + "');gAjax.getXMLAnswer(callBack);function callBack(response){var answer=response;var parsed=JSON.parse(answer);g_form.setVisible('endpoint',true);g_form.setDisplay('endpoint',true);g_form.setVisible('project',true);g_form.setDisplay('project',true);var rgx=new RegExp('[^a-zA-Z0-9]','g');if(parsed.schema&&parsed.schema.properties && Object.keys(parsed.schema.properties).length){var properties=parsed.schema.properties;for(var key in properties){var name=key.replace(rgx,' ').trim().replaceAll(' ','_');g_form.setVisible(name,true);g_form.setDisplay(name,true);}}else{g_form.setVisible('reason',true);g_form.setDisplay('reason',true);}}}";
            if (respourceType == 'Machine') {
                var varGR = new GlideRecord(this.appUtil.configuration.table.variable);
                varGR.addQuery('cat_item', catalog);
                varGR.addQuery('name', 'machine');
                varGR.query();
                if (varGR.next()) {
                    fieldSysID = varGR.sys_id;
                }
            }
            catalogClientScript.setAttributes({
                'name': "populateVariables",
                'description': 'populateVariables',
                'applies_to': 'all',
                'ui_type': '10',
                'type': 'onChange',
                'cat_item': catalog,
                'active': 'true',
                'cat_variable': 'IO:' + fieldSysID
            });

            catalogClientScript.addScript(variableScript);
            catalogClientScript.appliesToCatalogItem(true);
            var catalogClientScriptId = catalogClientScript.create();

        } catch (e) {
            CASLogger.error('Exception caught inside the CASDaoUtil.createDefaultClientScript ' + e);
        }
    },





    type: 'CASDaoUtil'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2019-07-02 14:04:20</sys_created_on>
        <sys_id>88f70c971b923300e61b21b6bc4bcb00</sys_id>
        <sys_mod_count>1474</sys_mod_count>
        <sys_name>CASDaoUtil</sys_name>
        <sys_package display_value="VMware vRealize Automation ITSM Application 8.3" source="x_vmw_cloudservice">0d6a0ec1db11bb407c83712ebf96194d</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="VMware vRealize Automation ITSM Application 8.3">0d6a0ec1db11bb407c83712ebf96194d</sys_scope>
        <sys_update_name>sys_script_include_88f70c971b923300e61b21b6bc4bcb00</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2021-03-05 09:24:02</sys_updated_on>
    </sys_script_include>
</record_update>
