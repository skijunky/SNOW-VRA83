<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>standard</category>
        <client_script><![CDATA[function spTicketConversation($scope, nowAttachmentHandler, $animate, $rootScope, cabrillo, $timeout, snRecordWatcher, spUtil, spAriaUtil, $http, $window) {
	var c = this;
	$scope.showLocationIcon = false;
	$scope.msg = "";
	$scope.isNative = cabrillo.isNative();
	$scope.errorMessages = [];
	var existingEntries = {}
	var skipNextRecordWatchUpdate = false;
	$scope.typing = [];
	if (!$scope.data.hasReadableJournalField && !$scope.data.isNewRecord)
		console.warn("No readable journal field (comments, work notes, etc.) available in the stream for this record");
	if ($scope.page && $scope.page.g_form)
		hideParentJournalFields();

	function hideParentJournalFields() {
		if (!$scope.data.stream)
			return;

		var fields = $scope.data.stream.journal_fields;
		var g_form = $scope.page.g_form;
		for (var f in fields)
			g_form.setDisplay(fields[f].name, false);
	}
	var liveProfiles = {};
	liveProfiles[$scope.user.sys_id] = {
		userID: $scope.user.sys_id,
		name: $scope.user.name,
		initials: $window.NOW.user_initials
	};
	if ($window.NOW.user_avatar) {
		liveProfiles[$scope.user.sys_id].userImage = $window.NOW.user_avatar;
	}

	$scope.getLiveProfileByUserId = function (userId){
		return liveProfiles[userId];
	}

	var pending = {};

	//Little caching implementation to make sure we only get a given user's profile once.
	$scope.hasLiveProfile = function hasLiveProfile(userId){
		if (!userId)
			return false;

		if (liveProfiles[userId])
			return true;

		if (pending[userId])
			return false;

		pending[userId] = $http.get('/api/now/live/profiles/sys_user.' + userId).then(function (response) {
			liveProfiles[userId] = {
				userID: userId,
				name: response.data.result.name,
				initials: buildInitials(response.data.result.name),
				avatar: response.data.result.avatar
			};
		});
		return false;
	}

	function buildInitials(name) {
		if (!name)
			return "--";

		var initials = name.split(" ").map(function(word) {
			return word.toUpperCase();
		}).filter(function(word) {
			return word.match(/^[A-Z]/);
		}).map(function(word) {
			return word.substring(0,1);
		}).join("");

		return (initials.length > 3) ? initials.substr(0, 3) : initials;
	}


	function setupAttachmentHandler(){
		$scope.attachmentHandler = new nowAttachmentHandler(attachSuccess, appendError);

		function attachSuccess() {
			$rootScope.$broadcast("sp.attachments.update", $scope.data.sys_id);
			spAriaUtil.sendLiveMessage($scope.data.attachAddedMsg);
		}

		function appendError(error) {
			spUtil.addErrorMessage(error.msg + error.fileName);
			$scope.errorMessages.push(error);
			spAriaUtil.sendLiveMessage($scope.data.attachFailMsg);
		}

		$timeout(function() {
			$scope.attachmentHandler.setParams($scope.data.table, $scope.data.sys_id, 1024 * 1024 * $scope.data.maxAttachmentSize);
		})
	}
	setupAttachmentHandler();

	var recordWatcherTimer;
	$scope.$on('record.updated', function(name, data) {
		// Use record watcher update if:
		//	This record was updated AND This widget didn't trigger the update.
		if (data.table_name == $scope.data.table && data.sys_id == $scope.data.sys_id){
			$timeout.cancel(recordWatcherTimer);
			recordWatcherTimer = $timeout(function(){
				if (skipNextRecordWatchUpdate)
					skipNextRecordWatchUpdate = false;
				else
					spUtil.update($scope).then(function(r){
						$scope.data.stream = r.stream;
					});
			}, 250);
		}
	});

	$scope.$on('sp.show_location_icon', function(evt) {
		$scope.data.showLocationIcon = true;
	});

	$rootScope.$on('sp.sessions', function(evt, sessions) {
		$scope.typing = [];
		Object.keys(sessions).forEach(function (session) {
			session = sessions[session];
			if (session.status != 'typing')
				return;

			$scope.typing.push(session);
		})
	})

	$scope.$on('sp.conversation_title.changed', function(evt, text) {
		$scope.data.ticketTitle = text;
	})

	$scope.$watch("data.canWrite", function() {
		$rootScope.$broadcast("sp.record.can_write", $scope.data.canWrite);
	});

	var streamUpdateTimer;
	$scope.$watch("data.stream", function() {
		$timeout.cancel(streamUpdateTimer);
		streamUpdateTimer = $timeout(function() {
			mergeStreamEntries();
		}, 50);
	});

	function mergeStreamEntries() {
		$scope.placeholder = $scope.data.placeholderNoEntries;
		if (!$scope.data.stream || !$scope.data.stream.entries)
			return;

		$scope.placeholder = $scope.data.placeholder;
		var entries = $scope.data.stream.entries;
		if (!$scope.data.mergedEntries) {
			$scope.data.mergedEntries = $scope.data.stream.entries.slice();
			for (var i = 0; i < entries.length; i++) {
				existingEntries[entries[i].sys_id] = true;
			}

			return;
		}

		var mergedEntries = $scope.data.mergedEntries;
		for (var i = entries.length-1; i >= 0; i--) {
			var curEntry = entries[i];
			if (isNewEntry(mergedEntries, curEntry)){
				mergedEntries.unshift(curEntry);
				existingEntries[curEntry.sys_id] = true;
			}
		}
	}

	function isNewEntry(mergedEntries, item) {
		for (var i=0; i < mergedEntries.length; i++) {
			if (mergedEntries[i].sys_id === item.sys_id) {
				return false;
			}
		}
		return true;
	}

	$scope.getPlaceholder = function() {
		if ($scope.data.use_dynamic_placeholder && $scope.data.useSecondaryJournalField)
			return $scope.data.secondaryJournalField.label;
		return $scope.placeholder;
	};

	var colorCache;
	$scope.getFieldColor = function(fieldName) {
		var defaultColor = "transparent";
		if (colorCache) {
			if (fieldName in colorCache)
				return colorCache[fieldName];
			else
				return defaultColor;
		}

		colorCache = {};
		var jf = $scope.data.stream.journal_fields;
		for (var i=0; i<jf.length;i++) {
			colorCache[jf[i].name] = jf[i].color || defaultColor;
		}
		return $scope.getFieldColor(fieldName);
	}

	$scope.checkInLocation = function() {
		$rootScope.$broadcast("check_in_location");
		$rootScope.$broadcast("location.sharing.start");
	}

	$scope.$on("location.sharing.end", function() {
		$timeout(function() {$scope.msg = ""}, 500);
	})

	$scope.$on("location.sharing.start", function() {
		$scope.msg = $scope.data.sharingLocMsg;
	})

	$scope.scanBarcode = function() {
		$rootScope.$broadcast("scan_barcode");
	}

	$scope.$on("attachment.upload.start", function() {
		$scope.msg = $scope.data.uploadingAttachmentMsg;
	})

	$scope.$on("attachment.upload.stop", function() {
		$scope.msg = "";
		//update the stream so we get the new attachment
		spUtil.update($scope).then(function(r) {
			$scope.data.stream = r.stream;
		});
	});

	$scope.data.isPosting = false;

	$scope.postEntry = function(input) {
		post(input);
	};

	function post(input) {
	
		if ($scope.data.isPosting)
			return;

		if (!input)
			return;

		input = input.trim();
		$scope.data.journalEntry = input;

		if ($scope.data.useSecondaryJournalField)
			$scope.data.journalEntryField = $scope.data.secondaryJournalField.name;
		else
			$scope.data.journalEntryField = $scope.data.primaryJournalField.name;
		$scope.data.isPosting = true;
//	alert(c.data.action)
		c.server.update().then(function(){
			$scope.data.isPosting = false;
			reset();
			spAriaUtil.sendLiveMessage($scope.data.messagePostedMsg);
			$timeout(function() {
				$scope.setFocus(); // sets focus back on input, defined in "link"
			});
		});
		skipNextRecordWatchUpdate = true;
		$scope.setFocus(); // sets focus back on input, defined in "link"
	}

	var reset = function(){
		$scope.userTyping("");
		$scope.data.journalEntry = "";
		$scope.updateFormWithJournalFields();
		$scope.data.useSecondaryJournalField = false;
		$scope.data.journalEntryField = "";
	}

	$scope.keyPress = function(event) {
		if ($scope.data.isPosting)
			return;

		if (event.keyCode === 13 && !event.shiftKey) {
			event.preventDefault();
			$timeout(function() {
				if ($scope.data.journalEntry)
					$scope.postEntry($scope.data.journalEntry);
			}, 250);
		}
	}

	$scope.userTyping = function(input) {
		var status = "viewing";
		if (input.length)
			status = "typing";

		$scope.$emit("record.typing", {status: status, value: input, table: $scope.data.table, sys_id: $scope.data.sys_id});
		$scope.updateFormWithJournalFields();
	}
	$scope.updateFormWithJournalFields = function () {
		var fieldName, fieldToClear = "";
		if ($scope.data.useSecondaryJournalField) {
			fieldName = $scope.data.secondaryJournalField.name;
			fieldToClear = $scope.data.primaryJournalField.name;
		} else {
			fieldName = $scope.data.primaryJournalField.name;
			fieldToClear = "";
		}
		$scope.$emit("activity_stream_is_changed", {"fieldName": fieldName, "fieldToClear": fieldToClear, "input": $scope.data.journalEntry});
	}

	//custom method implemented below

	//---------------approve---------------
	//USAGE: This is method is used to change the state to approved of any approval
	$scope.approve = function(comments) {
		if(comments == null || comments == undefined  || comments==''){
			alert("Comments are mandatory while approving the request.")
		} else {
			c.data.comment = 'Approved: ' + comments;
			$scope.data.isPosting = true;
			c.data.action = "approve";
			c.server.update().then(function(){
				c.data.action="";
				$scope.data.isPosting = false;
				c.data.requestStatus = 'Approved';
				$rootScope.$broadcast('statusUpdated', '');
				$('.cas-modal, .cas-modal-backdrop').hide();
			});
		}
	}

	//---------------reject---------------
	//USAGE: This is method is used to change the state to rejected of any approval
	$scope.reject = function (comments) {
		
		if(comments == null || comments == undefined || comments==''){
			alert("Comments are mandatory while rejecting the request.")
		} else {
			c.data.action = "reject";
			$scope.data.isPosting = true;
			c.data.comment = 'Rejected: '+comments;
			c.server.update().then(function() {
				c.data.action = "";
				$scope.data.isPosting = false;
				c.data.requestStatus = 'Rejected';
				$rootScope.$broadcast('statusUpdated', '');
				$('.cas-modal, .cas-modal-backdrop').hide();
			});
		}
	}
	
	$scope.setTimelineIcon = function(value) {
		var returnFlag;
		if (value.startsWith('Rejected:') || value.startsWith('Your Catalog Request has been Rejected')) {
			returnFlag = 0;
		} else if (value.startsWith('Approved:')) {
			returnFlag = 1;
		} else {
			returnFlag = 2;
		}
		return returnFlag;
	}
}]]></client_script>
        <controller_as>c</controller_as>
        <css>.panel-title {
  display: inline;
}

.panel-title-container {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.panel-title-icons {

  ul {
    display: flex;
    align-items: center;
    padding: 0;
    margin: 0;
  }
  li {
    padding: 0;
    margin: 0;

    .panel-button {
      display: flex;
      align-items: center;
      margin: 0 0 0 15px;
      line-height: initial;

      &amp;:hover, &amp;:focus {
        text-decoration: none;
      }
    }
  }
}

.panel-body {
  padding: 0;
}

.timeline-heading test {
  float:right;
}

.timeline-body &gt; p {
  white-space: pre-wrap;
}

.timeline-body ul &gt; li {
  float: none;
}
.timeline-panel {
  width: calc(70% - 40px) !important;
}

.start-item {
  display: flex;
}
.no-resize {
  resize: none;
}

.journal-field-indicator {
  width: 5px;
  position: absolute;
  left: 5px;
  top: 5px;
  bottom: 5px;
  z-index: 3;
}

.panel-heading {
  word-wrap: break-word;
}

.avatar-container {
  cursor: default;
}

ul {
  list-style: none;
}

.overflow-hidden {
  overflow: hidden;
}


.timeline-badge-wrap {
  margin: auto;
 // max-width: 115px;
  background: #fff;
  position: relative;
  top: 12px;
}


.timeline-badge.success {
  background-color: $success;
}

.timeline-badge {
  position: relative;
  left:29.75% !important;
  width:50%;
  //padding-bottom:50%;
  border-radius:50%;
}

.timeline-badge span{
  position:absolute;
  top:50%;
  left: 50%;
  transform: translate(-50%, -50%);
  font-size:13px;
  color: #fff;
}

.timeline:before {
    content: "";
    position: absolute;
    top: 0;
    bottom: 20px;
    left: 0;
    right: 70%; 
    border-right: 2px #9a9a9a solid;
}


.journal-type {
  display: inline-flex;
  display: -ms-inline-flexbox;
  flex-wrap: wrap;
  -webkit-justify-content: flex-end;
}

.fa-circle {
  font-size: 4px;
  padding: 7px;
}

.cas-spinner.cas-spinner-inline, .cas-spinner.cas-spinner-sm {
    min-height: 1.5rem;
    min-width: 1.5rem;
    height: 1.5rem;
    width: 1.5rem;
}

@media (max-width: 768px) {
  .timeline-badge-wrap {
    margin: 0;
  }
  .timeline-badge {
    left: 10%;
  }
}
</css>
        <data_table>sp_instance</data_table>
        <demo_data>{"options": {
	"sys_id": -1,
		"table": "incident"
	}
}</demo_data>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>cas_ticketconversations</id>
        <internal>false</internal>
        <link><![CDATA[function(scope, elm) {
	// Set the focus back on the input for IE11
	scope.setFocus = function() {
		var input = $(elm[0]).find('textarea#post-input');
		if (input[0])
			input[0].focus();
	}
}]]></link>
        <name>CAS_ticketConversations</name>
        <option_schema>[{"hint":"Placeholder text shows selected journal field","name":"use_dynamic_placeholder","section":"Behavior","label":"Use dynamic placeholder","type":"boolean"},{"hint":"Message to show when record has no readable journal field","name":"no_readable_journal_field_message","default_value":"","section":"Presentation","label":"No readable journal field message","type":"string"}]</option_schema>
        <public>false</public>
        <roles>snc_external,snc_internal,x_vmw_cloudservice.vra_catalog_admin,x_vmw_cloudservice.vra_end_user</roles>
        <script><![CDATA[(function() {

	var appUtil = new CASAppUtil();
	data.requestTable = appUtil.configuration.table.requests;
	data.approvalTable = appUtil.configuration.table.approvals;

	data.maxAttachmentSize = parseInt(gs.getProperty("com.glide.attachment.max_size", 1024));
	if (isNaN(data.maxAttachmentSize))
		data.maxAttachmentSize = 24;
	
	data.type=options.type;
	data.uploadingAttachmentMsg = gs.getMessage("Uploading attachment...");
	data.sharingLocMsg = gs.getMessage("Sharing location...");
	data.scanBarcodeMsg = gs.getMessage("Scan barcode");
	data.checkInLocMsg = gs.getMessage("Check in location");
	data.messagePostedMsg = gs.getMessage("Message has been sent");
	data.viewMsg = gs.getMessage("View");
	data.attachAddedMsg = gs.getMessage("Attachment added");
	data.attachFailMsg = gs.getMessage("Failed to add attachment");
	data.sys_id =  options.sys_id || $sp.getParameter("sysId");
//gs.addErrorMessage('sksm'+JSON.stringify(options))
	data.table = options.table || $sp.getParameter("table");
	data.requestStatus = options.requestStatus;
//gs.addErrorMessage(JSON.stringify(options));
	
	var gr = new GlideRecordSecure(data.table);
	// don't use options.title unless sys_id and table also come from options.
	if (options && options.sys_id && options.table)
		data.ticketTitle = options.title;
	data.placeholder = options.placeholder || gs.getMessage("Type your message here...");
	data.placeholderNoEntries = options.placeholderNoEntries || gs.getMessage("Type your message here...");
	data.btnLabel = options.btnLabel || gs.getMessage("Send");
	data.includeExtended = options.includeExtended || false;
	data.use_dynamic_placeholder = options.use_dynamic_placeholder;
	data.isNewRecord = data.sys_id == -1 || gr.isNewRecord();
	data.hideAttachmentBtn = options.hideAttachmentBtn;


	if (!gr.isValid())
		return;

	
	if(gr.get(data.sys_id));
		
		var tablename=$sp.getParameter('table');

		//fetch opened by name
		if(!input && tablename==data.approvalTable){
			//gs.addErrorMessage(gr.document_id.opened_by.getDisplayValue());
			data.openedBy=gr.document_id.opened_by.getDisplayValue()+'';
		}else if(!input && tablename==data.requestTable){
			data.openedBy=gr.opened_by.getDisplayValue()+'';
		}

		//gs.addErrorMessage(gr.number+'')
		if (!gr.canRead())
			return;

		data.table = gr.getRecordClassName(); // use actual table for the record
		options.no_readable_journal_field_message = options.no_readable_journal_field_message || gs.getMessage("No readable comment field");
		data.number = gr.getDisplayValue('number');
		data.created_on = gr.getValue('sys_created_on');

		if (input && (input.action == 'approve')) {
			data.sys_id=input.sys_id;
			var approvalGR = new GlideRecordSecure(data.approvalTable);
			if(approvalGR.get(data.sys_id));
			
				data.openedBy=approvalGR.document_id.opened_by.getDisplayValue()+'';
				approvalGR.comments = input.comment
				approvalGR.state="approved";
				approvalGR.update();
				gs.addInfoMessage('Request Approved');
			
		}
		else if(input && (input.action == "reject")){
			data.sys_id=input.sys_id;
			var rejectGR = new GlideRecordSecure(data.approvalTable);
			if(rejectGR.get(data.sys_id));
			
				data.openedBy=rejectGR.document_id.opened_by.getDisplayValue()+'';
				rejectGR.state = "rejected";
				rejectGR.comments = input.comment;
				rejectGR.update();
				gs.addErrorMessage('Request Rejected');
			
		}
		else if (input) {
			data.sys_id=input.sys_id;
			data.table=input.table;
			data.type=input.type;
			if (input.journalEntry && input.journalEntryField){
			//	if (gr.canWrite(input.journalEntryField))  {
				//	gs.addErrorMessage(input.journalEntry +' '+input.journalEntryField+ ' '+JSON.stringify(gr));
					gr.getElement(input.journalEntryField).setDisplayValue(input.journalEntry);//.setDisplayValue(input.journalEntryField, input.journalEntry);
					//gr[input.journalEntryField]=input.journalEntry;

					gr.update();
					if(data.type=='listOptions'){
						var gr1=new GlideRecordSecure(data.table);
						if(gr1.get(data.sys_id));
							
							gr1.comments=input.journalEntry+'';
							gr1.update();
						
					}
					$sp.logStat('Comments', data.table, data.sys_id, input.journalEntry);
				//}
			}

			//gs.addErrorMessage(input.ticketTitle+' '+input.placeholder+' '+input.btnLabel+' '+input.includeExtended)
			data.ticketTitle = input.ticketTitle;
			data.placeholder = input.placeholder;
			data.btnLabel = input.btnLabel;
			data.includeExtended = input.includeExtended;
		} else {
			if (!data.ticketTitle) {
				if (gr.short_description.canRead())
					data.ticketTitle = gr.getDisplayValue("short_description");
				if (!data.ticketTitle)
					data.ticketTitle = data.number;
			}

			$sp.logStat('Task View', data.table, data.sys_id);
		}

		data.canWrite = gr.canWrite();
		data.canAttach = gs.hasRole(gs.getProperty("glide.attachment.role"));
		data.canRead = gr.canRead();
		data.hasWritableJournalField = false;
		data.hasReadableJournalField = false;
		if (data.canRead && !data.isNewRecord) {
			//gs.addErrorMessage('table '+data.table);
			//gs.addErrorMessage('sys '+data.sys_id);

			data.stream = $sp.getStream(data.table, data.sys_id);
			//gs.addErrorMessage(data.stream)

			//gs.addErrorMessage(JSON.stringify(data.rec._sections))

			// Journal fields come in correct order already.
			// so grab the first 2 writeable fields
			if ('journal_fields' in data.stream) {
				var jf = data.stream.journal_fields;
				for(var i=0; i < jf.length; i++){
					if (jf[i].can_read === true)
						data.hasReadableJournalField = true;
					if (jf[i].can_write === true){
						data.hasWritableJournalField = true;
						if (!data.primaryJournalField)
							data.primaryJournalField = jf[i];
						else if (data.includeExtended && !data.secondaryJournalField)
							data.secondaryJournalField = jf[i];
						else
							break;
					}
				}
			}

		}

		data.tableLabel = gr.getLabel();

	
})()]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>navdeep</sys_created_by>
        <sys_created_on>2019-09-11 16:50:16</sys_created_on>
        <sys_id>4ff656cedb773300ff7c2946489619a5</sys_id>
        <sys_mod_count>181</sys_mod_count>
        <sys_name>CAS_ticketConversations</sys_name>
        <sys_package display_value="VMware vRealize Automation ITSM Application 8.3" source="x_vmw_cloudservice">0d6a0ec1db11bb407c83712ebf96194d</sys_package>
        <sys_policy/>
        <sys_scope display_value="VMware vRealize Automation ITSM Application 8.3">0d6a0ec1db11bb407c83712ebf96194d</sys_scope>
        <sys_update_name>sp_widget_4ff656cedb773300ff7c2946489619a5</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2020-10-09 09:01:35</sys_updated_on>
        <template><![CDATA[<div ng-if="!data.canRead && !data.isNewRecord">
  ${Requested record not found}
</div>
<div ng-if="data.canRead && !data.isNewRecord">
  <div ng-if="!data.hasReadableJournalField">
    {{options.no_readable_journal_field_message}}
  </div>
  <div ng-if="data.hasReadableJournalField">
    <!-- out of box content -->
    <ul class="list-group m-b-none" ng-if="typing.length > 0">
      <li class="list-group-item user-typing m-t" ng-repeat="u in typing">${{{::u.user_display_name}} is typing}</li>
    </ul>
    <ul class="list-group m-b-none m-t" ng-if="msg">
      <li class="list-group-item user-typing">{{msg}}</li>
    </ul>
    <!-- ./out of boxcontent -->

    <!-- clarity-timeline -->
    <ul class="cas-clr-timeline cas-clr-timeline-vertical">
      <!-- add comment-block -->
      <li class="cas-clr-timeline-step">
        <div class="cas-clr-timeline-step-header"></div>
        <cas-clr-icon shape="circle" color="#787878" aria-label="Not started"></cas-clr-icon>
        <div class="cas-clr-timeline-step-body" style="width: 100%;">
          <form ng-submit="postEntry(data.journalEntry)" id="sand">
            <div ng-show="data.hasWritableJournalField">
              <textarea ng-keypress="keyPress($event)"
                        style="width: 100%"
                        sn-resize-height="trim"
                        id="post-input"
                        class="cas-clr-textarea"
                        ng-model='data.journalEntry'
                        ng-model-options='{debounce: 250}'
                        ng-attr-placeholder="{{getPlaceholder()}}"
                        aria-label="{{getPlaceholder()}}"
                        autocomplete="off"
                        ng-change="userTyping(data.journalEntry)"/>
              <span class="journal-field-indicator" ng-style="({'background-color': data.useSecondaryJournalField ? data.secondaryJournalField.color : data.primaryJournalField.color})"></span>
              <span class="cas-clr-timeline-step-description" style="display: flex;">
                <button type="button"  ng-disabled="data.isPosting" ng-if="data.table == data.approvalTable && data.requestStatus !='Rejected' && data.requestStatus != 'Approved'" class="cas-btn cas-btn-sm cas-btn-primary" ng-click="approve(data.journalEntry)" >Approve</button>
                <button type="button"  ng-disabled="data.isPosting" ng-if="data.table == data.approvalTable && data.requestStatus !='Rejected' && data.requestStatus != 'Approved'" class="cas-btn cas-btn-sm" ng-click="reject(data.journalEntry)">Reject</button>
                <button type="submit" class="cas-btn cas-btn-sm" ng-disabled="data.isPosting" >Comment</button>
              </span>
            </div>
            <div ng-if="::(data.secondaryJournalField && data.secondaryJournalField.can_write)">
              <label class="pull-right">
                <input type="checkbox" ng-model="::data.useSecondaryJournalField" ng-change="updateFormWithJournalFields()"/>
                <span> {{::data.secondaryJournalField.label}}</span>
              </label>
            </div>
          </form>
        </div>
      </li>
      <!-- ./ add comment-block -->
      
      <!-- repeat block -->
      <li class="cas-clr-timeline-step" ng-repeat="e in data.mergedEntries">
        <span class="cas-clr-timeline-step-header"><sn-time-ago timestamp="e.sys_created_on" /></span>
        <!--<span class="cas-spinner cas-spinner-inline"></span>-->
        <span ng-init="returnFlag = setTimelineIcon(e.value)">
          <cas-clr-icon ng-if="returnFlag == 0" shape="close-circle" color="red" aria-label="Error"></cas-clr-icon>
          <cas-clr-icon ng-if="returnFlag == 1" shape="success-standard" color="green" aria-label="Success"></cas-clr-icon>
          <cas-clr-icon ng-if="returnFlag == 2" shape="dot-circle" color="#0079d8" aria-label="Comment"></cas-clr-icon>
        </span>
        <div class="cas-clr-timeline-step-body">
          <span class="cas-clr-timeline-step-title">{{::e.name}}</span>
          <div class="cas-clr-timeline-step-description">
            <p ng-if="::(e.element != 'attachment')" ng-bind-html="::e.value" style="white-space: pre-wrap"></p>
          </div>
        </div>
      </li>
      <!-- ./repeat block -->
      
      <!-- request created block -->
      <li class="cas-clr-timeline-step">
        <div class="cas-clr-timeline-step-header"><sn-time-ago timestamp="data.created_on" /></div>
        <cas-clr-icon shape="success-standard" color="green" aria-label="Error"></cas-clr-icon>
        <div class="cas-clr-timeline-step-body">
          <span class="cas-clr-timeline-step-title">{{data.openedBy}}</span>
          <span class="cas-clr-timeline-step-description">${Created} <span class="value">{{data.number}}</span></span>
        </div>
      </li>
      <!-- ./request created block -->
    </ul>  
    <!-- ./clarity-timeline -->
  </div>
</div>
]]></template>
    </sp_widget>
</record_update>
