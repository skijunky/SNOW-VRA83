<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function ($scope, $location, spUtil, amb, $http, spAriaUtil, $timeout) {
	var c = this;
	/*
	 * options:
	 * hide_footer (bool) = true to remove the data table footer contents
	 * hide_header (bool) = true to remove the data table header contents
	 * show_new (bool) = true to show the "New" record button
	 * show_keywords (bool) = true to show the keyword search field
	 * table (string) = the table name to query
	 * filter (string) = the encoded query
	 * o (string) = the order by column
	 * d (string) = The order by direction: asc or desc
	 * p (int) = the page to jump to
	 * fields (string) = comma seperated list of fields that become the list columns
	 * view (string) = the default view to load for columns, overrides fields
	*/
		/*
	$scope.$on('showHideWidget', function(event, data) {
		c.data.session_layout = data[0];
		c.data.session_table = data[1];
	})
	*/
	$scope.changeLayout = function(layout) {
		c.data.session_layout = layout;
		//c.data.session_table = c.data.session_table;
		c.data.actions = 'set_session';
		c.server.update().then(function(){
			c.data.actions = undefined;
			$rootScope.$broadcast("refresh.widgets", "");
		});
	}
	$scope.exportTypes = [{label:'PDF', value: 'PDF'}, {label:'Excel', value:'EXCEL'}, {label:'CSV', value:'CSV'}];
	var keys = ['table', 'filter', 'p', 'o', 'd'];

	var eventNames = {
		click: 'data_table.click',
		setFilter: 'data_table.setFilter',
		setKeywords: 'data_table.setKeywords'
	};

	$scope.go = function(table, item) {
		//alert(c.data.session_layout);
		//alert(c.data.session_table);
		var parms = {};
		parms.table = table;
		parms.sys_id = item.sys_id;
		parms.record = item;
		$scope.ignoreLocationChange = true;
		for (var x in c.data.list) {
			c.data.list[x].selected = false;
		}
		item.selected = true;
		$scope.$emit(eventNames.click, parms);
	};

	$scope.newRecord = function(){
		var parms = {
			id: 'form',
			table: $scope.data.table,
			view: $scope.data.view,
			sys_id: '-1'
		};
		if ($scope.data.filter != '')
			parms.query = $scope.data.filter;

		$location.search(parms);
	};

	function recoverStateFromUrl() {
		$scope.data.fields = [];
		var s = $location.search();
		for (var x in keys) {
			if (s[keys[x]]) {
				$scope.data[keys[x]] = s[keys[x]];
			}
		}
		$scope.server.update().then(function(data) {
			if (s.sys_id) {
				for (var x in data.list) {
					if (data.list[x].sys_id == s.sys_id) {
						$scope.go(s.table, data.list[x]);
					}
				}
			}
		});
	}

	if ($scope.options.fromUrl) {
		var origSearch = $location.search();
		$scope.$on('$locationChangeSuccess', function(e) {
			var s = $location.search();
			if (origSearch.id !== s.id)
				return;

			if ($scope.ignoreLocationChange){
				$scope.ignoreLocationChange = false;
				return;
			}

			// Helps to recover state when using the browser's back button
			recoverStateFromUrl();
		});
	}


	$scope.getNumber = function(num) {
		return new Array(num);
	}

	$scope.mathMin = function(v1,v2) {
		return Math.min(v1,v2);
	}

	function getData(updateUrl) {
		var f = $scope.data;
		spUtil.update($scope).then(function(data) {
			f.view = data.view;
			if ($scope.options.fromUrl && updateUrl)
				setPermalink(f.table, f.filter, f.o, f.d, f.p);

			if ($scope.options.show_breadcrumbs && data.filterBreadcrumbs)
				$scope.$broadcast('widget-filter-breadcrumbs.setBreadcrumbs', data.filterBreadcrumbs.data, data.filter);

			initRecordWatcher(f.table, f.filter);
		});
	}

	function setPermalink(table, filter, orderBy, orderDirection, page){
		$scope.ignoreLocationChange = true;
		var search = $location.search();
		angular.extend(search, {
			spa: 1,
			table: table,
			filter: filter,
			p: page,
			o: orderBy,
			d: orderDirection
		});
		$location.search(search);
	}

	var watcher;
	function initRecordWatcher(table, filter){
		if (watcher)
			watcher.unsubscribe();

		if (table && filter) {
			var watcherChannel = amb.getChannelRW(table, filter);
			amb.connect();
			watcher = watcherChannel.subscribe(function(message) {
				if (!message.data)
					return;
				switch(message.data.action) {
					case "change":
						updateRowFromRW(message);
						break;
					case "exit":
						// A record was removed
					case "enter":
						// A record was added
					default:
						spUtil.update($scope);
						break;
				}
			});
		}
	}

	function updateRowFromRW(message) {
		if (message.data && message.data.sys_id && $scope.data.list) {
			var row, field;
			for(var i=0;i<$scope.data.list.length; i++) {
				row = $scope.data.list[i];
				if (row.sys_id == message.data.sys_id) {
					var fields = Object.getOwnPropertyNames(message.data.record);
					for(var f in fields) {
						field = fields[f];
						if(typeof row[field] !== 'undefined') {
						    row[field].display_value = message.data.record[field].display_value;
						}
					}
				}
			}
		}
	}

	$scope.$on('$destroy', function() {
		if (watcher)
			watcher.unsubscribe();
	});

	$scope.setPageNum = function(num) {
		if (num <= c.data.num_pages && num > 0) {
			c.data.error_msg = undefined;
			$scope.data.p = num;
			getData(true);
			$timeout(function() {
				$scope.focusOnTableHeader();
			});
		} else {
			c.data.error_msg = "You have entered invalid page number.";
		}
	}

	$scope.setOrderBy = function(field) {
		var d = "asc";
		if ($scope.data.o == field) {
			if ($scope.data.d == "asc")
				d = "desc";
			else
				d = "asc";
		}

		if (d === "asc") {
			spAriaUtil.sendLiveMessage($scope.data.msg.sortingByAsc);
		} else if (d === "desc") {
			spAriaUtil.sendLiveMessage($scope.data.msg.sortingByDesc);
		}

		$scope.data.o = field;
		$scope.data.d = d;
		$scope.setSearch(true);
	}

	$scope.setSearch = function(updateUrl) {
		$scope.data.p = 1;
		getData(updateUrl);
	}

	$scope.$on(eventNames.setFilter, function(e, newFilter){
		$scope.data.filter = newFilter;
		$scope.setSearch(false);
	});

	$scope.$on(eventNames.setKeywords, function(e, keywords){
		$scope.data.keywords = keywords;
		$scope.setSearch(false);
	});

	$scope.$on('widget-filter-breadcrumbs.queryModified', function(e, newFilter){
		$scope.data.filter = newFilter;
		$scope.setSearch(true);
	});

	$scope.rowsWerePruned = function() {
		if (!$scope.data.list)
			return;

		$scope.rowsPruned = $scope.mathMin($scope.data.window_end,$scope.data.row_count) - $scope.data.window_start - $scope.data.list.length;
		return $scope.rowsPruned > 0;
	}

	$scope.showFilter = function() {
		return !$scope.data.list.length && !$scope.data.num_pages && !$scope.data.invalid_table && !$scope.loadingData;
	}

	c.appendQuery = function(query){
		if ($scope.data.filter.length > 1)
			$scope.data.filter += '^';
		$scope.data.filter += query;
			$scope.setSearch();

	}

	// Makes Widget Async
	var title = $scope.data.title;
	if ($scope.options.use_instance_title == 'true')
		title = $scope.options.title;
	$scope.data = $scope.options;
	$scope.loadingData = true;
	$scope.server.update().then(function() {
		if ($scope.data.newButtonUnsupported)
		//	console.log("Service Portal: New button not supported for sys_attachment list");
		$scope.loadingData = false;
		$scope.data.title = title;
		initRecordWatcher($scope.data.table, $scope.data.filter);
	});

	function parseQuery(table, queryString){
		return $http.post('/api/now/sp/parsequery/' + table, queryString).then(function(response){
				return response.data.result;
		});
	}

	c.createQueryTerm = function(table, field, sys_id, operator){
		return $http.get('/api/now/sp/getInOutQueryTerm', {
			params: {
				table: table,
				sys_id: sys_id,
				field: field,
				operator: operator
			}
		}).then(function(response){
			if (response && response.data && response.data.result)
				return response.data.result.parts;
		});
	}

	c.showMatching = function(field, newTerm) {
		var queryString = $scope.data.filter;
		var eq = "";
		parseQuery($scope.data.table, queryString).then(function(oldTerms) {
			for(var i=0; i<oldTerms.length; i++){
				var term = oldTerms[i];
				if (isSameField(newTerm, term))
					continue;

				if (eq.length)
					eq += '^';

				eq += getEncodedTerm(term);
			}
			if (eq.length)
					eq += '^';
			eq += getEncodedTerm(newTerm);

			$scope.data.filter = eq;
			$scope.setSearch();
		});
	};

	c.filterOut = function(field, newTerm) {
		var eq = $scope.data.filter;
		if (eq.length)
					eq += '^';

		eq += getEncodedTerm(newTerm);
		$scope.data.filter = eq;
		$scope.setSearch();
	};

	function isSameField(t1, t2) {
		if ('left' in t1 && 'left' in t2)
			return t1.left.field === t2.left.field;
		else if ('left' in t1)
			return t1.left.field === t2.field;
		else if ('left' in t2)
			return t1.field === t2.left.field;
		return t1.field === t2.field;
	}

	function getEncodedTerm(term) {
		var eq;
		if (term.left) {
			eq = getEncodedTerm(term.left);
			eq += '^OR';
			eq += getEncodedTerm(term.right);
		} else {
			eq = term.field;
			eq += term.operator;
			eq += term.value;
		}
		return eq;
	}
}]]></client_script>
        <controller_as>c</controller_as>
        <css>.main-container {
  height: $mainHeight !important;
  background-color: $bgColor;
  font-family: $fontStack;
  border-radius: 0px;
}
.fa-table:before{
  font-size:14px;
}
.panel-heading {
  padding-left: 8px;
  padding-top: 18px;
}

thead {
  border-bottom: 1px solid $borderColor;
}

.table-head {
  border-top: 4px solid $selectedBgColor;
}

.table-head &gt; tr &gt; th {
  border: 0px;
  text-align:right; 
  font-weight: 500 !important;
  background-color: $bgColor;
}

table {
  margin-bottom: 0;
  tbody {
    border: 1px solid transparent;
  }
}
//========================breadcrumb=========
.pointer {
  white-space: nowrap;
}
.icon-filter {
  padding-left: 0px;
  padding-right: 5px;
}
.icon-filter:before {
  font-size: 15px;
  margin-bottom: 3px;
}
.breadcrumbs {
  margin-left: 0px !important;
  background-color: $bgColor;
  padding-left: 19px;
  span {
    vertical-align: -webkit-baseline-middle;
  }
}
.breadcrumbs {
  span, button {
    color: $fontColor;
    outline: none;
    a {
      color: $fontColor;
    }
  }
}
.ng-filter-widget {
  background-color: #FAFAFA !important;
  border: 1px solid #E0E0E0 !important;
}
nd_operator_0 {
  background-color: #FFFFFF;
  border: 1px solid #D7D7D7;
  border-radius: 3px;
  width: 287px;
  height: 35px;
}
.sn-filter-compound-title {
  color: #880024 !important;
  font-size: 13px;
  font-weight: 300;
  line-height: 16px;
  text-align: left;
}
.btn-group {
  input {
    border-radius: 0px !important;
    margin-left: -3px !important;
    margin-right: -6px !important;
  }
  a {
    border-radius: 0px !important;
    margin-left: -3px !important;
    margin-right: -3px !important;
  }
}
.btn.btn-primary.sn-filter-tooltip {
  background-color: #6DB33F;
  border-radius: 3px;
  width: 104px;
  height: 35px;
  border: none;
}
//=================================
.table &gt; thead &gt; tr &gt; th {
  border: 1px solid $borderColor;
  cursor: pointer;
  vertical-align: middle;

  &amp;:nth-child(2) {
    border-left: none;
  }
  &amp;:last-child {
    border-right: none;
  }
}

th i {
  display: inline-block;
  margin-left: 5px;
  color: #A0A0A0;
}

th .disabled{
  color:#ddd;
}

div.th-title.ng-binding {
  white-space: nowrap;
  display: inline-block;
  color: $fontWeightedColor  !important; 
  font-size:16px;
  font-weight:500;
}

.panel-body {
  padding: 0px;
  border: 1px solid $borderColor;
  border-bottom: 0px;
}
.scrollable-container {
  background-color: $bgColor;
  overflow-y: auto;
  height: 75rem;
}
.content-table tr:nth-child(even) {
  background-color: $bgSecondColor;
  color: $fontColor;
  font-size: 14px;
  font-weight: 500;
  td,th {
    padding: 18px 8px 18px 20px !important;
  }
}
.content-table tr:nth-child(odd) {
  background-color: $bgColor;
  color: $fontColor;
  font-size: 14px;
  font-weight: 500;
  td,th {
    border-top: 1px solid $borderColor;
    border-bottom: 1px solid $borderColor;
    padding: 18px 8px 18px 20px !important;
  }
}
.selected {
  color: #fff;
  background-color: #909090;
  border-color: 1px solid #fff;
}
.content-table:odd {
  background-color: red;
}
tbody tr:last-child {
  border-bottom: none;
}

.pruned-msg {
  padding-bottom: 10px;
  padding-left: 4px;
  text-align: center;
}

.pruned-msg-filter-pad {
  padding-top:8px;
}

.filter-breadcrumbs {
  border-bottom: 1px solid #ddd;
  padding-top: 3px;
}

.dropdown-toggle {
  background: none;
  padding: 0 0 4px 0;
}
//=============
.pagination {
  margin: 15px 0px 15px 0px !important;
  display: inline-block;
  border-radius: 0px;
  border: .1rem solid $borderColor;
  background-color: $cardBgColor;
}
.pagination a {
  color: $fontColor;
  padding: 8px 16px;
  text-decoration: none;
  transition: background-color .3s;
  border: 1px solid $borderColor;
  border-radius: 0px;
  background-color: $bgColor;
  border: none;
  color: $fontColor; 
}
.pagination a.active {
  background-color: #4CAF50;
  color: white;
  border: 1px solid #4CAF50;
}
.item-left {
  float: left;
}
.item-right {
  float : right;
}
.pagination-container {
  background-color: $bgColor;
  margin-top: 1px;
  margin-left: 25px;
  width: 100%;
}
.pagination a:hover:not(.active) {
  background-color: $hoverBgColor;
  color: $fontHoverColor;}
.pagination input {
  border-left: 0px;
  border-right: 0px;
  max-width: 150px;
  padding : 8px 10px 8px 10px;
  border-radius: 0px;
  border: none;
  background-color: $bgColor;
  color: $fontColor;
}
li.pagination-item {
  a {
    border-radius: 0px !important;
  }
}
#search-button {
  border-radius: 0px !important;
}
.disabled {
  color: currentColor;
  cursor: not-allowed;
  opacity: 0.5;
  text-decoration: none;
}
.panel-footer {
  padding-top: 0px;
  padding-bottom: 0px;
  padding-left: 0px;
  background-color: $bgColor;
  box-shadow: none;
  border-radius: 0px;
  border: 1px solid $bgColor;
}
.asc, .desc {
  float: right;
}
.fa {
  padding: 0px;
  margin: 0px;
  font-size: 17px;
}
.fa-search {
  font-size: 14px;
}
.content-container {
  border-top: 1px solid $borderColor;
}
.error_msg {
  color: $errorColor;
}
.table_row {
  transition: background-color .4s ease;
}
.table_row:hover {
  color: $fontColor !important;
  background-color: $hoverBgColor !important;
}
.panel-title {
  font-size: 16px;
  font-weight: 500;
  color: $fontColor;
  font-family: $fontStack;

}
.panel {
  color: $fontColor;
  background-color: $bgColor;
  box-shadow: none;
  border-radius: 0px;
  margin: 0px auto 0px auto;
  border: none;
}
.layout-icon {
  font-family: FontAwesome;
}
.layout-container {
  float:right;
  padding: 15px;
  font-size: 16px;
  cursor: pointer;
  color: $fontColor;
}
.layout-container:hover {
  color: $fontHoverColor;
}
.header-content {
  float:left;
  padding-top: 15px;
  padding-bottom: 16px;
  padding-left: 20px;
  font-size: 16px;
  font-weight: 500;
  color: $fontColor;
}
.col-md-6{
  padding:0;
}
//----------------------------scroller-------
/*
::-webkit-scrollbar {
width: 7px;
}

::-webkit-scrollbar-track {
// background: #f1f1f1; 
}

::-webkit-scrollbar-thumb {
background: #888; 
border-radius: 2px;
}

::-webkit-scrollbar-thumb:hover {
background: #555; 
}
*/</css>
        <data_table>sp_instance_table</data_table>
        <demo_data>{"data":
	{
		"table": "incident",
		"view": "default",
		"o": "opened_at",
		"d": "desc",
		"filter": "activeEQtrue",
		"p": 1,
		"fields": "number,short_description"
	}
}</demo_data>
        <description/>
        <docs/>
        <field_list>table,filter,field_list,maximum_entries,order,order_by,order_direction,title,color,glyph,sp_page</field_list>
        <has_preview>false</has_preview>
        <id>cas_activitieslistdatatable</id>
        <internal>false</internal>
        <link><![CDATA[function(scope, element, attrs, ctrl){
	var $ul, $contextMenu;

	scope.focusOnTableHeader = function() {
		element.find(".data-table-title").attr("tabindex", "-1").focus();
	}

	element.on('contextmenu', function(e){
		if (e.ctrlKey)
			return; // ctrlKey is for the debug menu, not this menu

		var rowScope = angular.element(e.target).scope();
		var field, item, fieldVal;

		// Context Menu for tbody
		if (angular.isDefined(rowScope.field) && angular.isDefined(rowScope.item)){
			e.preventDefault();
			field = rowScope.field;
			item = rowScope.item;
			fieldVal = item[field].value;

			var items = [
				['${Show Matching}', function(){
					ctrl.createQueryTerm(scope.data.table, field, item.sys_id, '=').then(function(term){
						ctrl.showMatching(field, term);
					});
				}],
				['${Filter Out}', function(){
					ctrl.createQueryTerm(scope.data.table, field, item.sys_id, '!=').then(function(term){
						ctrl.filterOut(field, term);
					});
				}]
			];

			renderContextMenu(items);
			setContextMenuPosition(e);
		}
	});

	function renderContextMenu(items){
		var scrollHeight = $('body').get(0).scrollHeight;
		$contextMenu = angular.element('<div>', {'class': 'dropdown clearfix context-dropdown open'});

		$contextMenu.on('click', function (e) {
			if ($(e.target).hasClass('dropdown')) {
				_clearContextMenus(event);
			}
		});
		$contextMenu.on('contextmenu', function (event) {
			event.preventDefault();
			_clearContextMenus(event);
		});

		$contextMenu.css({
			position: 'absolute',
			top: 0,
			height: scrollHeight,
			left: 0,
			right: 0,
			zIndex: 9999
		});

		$('body').append($contextMenu);

		$ul = angular.element('<ul>', {
			'class': 'dropdown-menu',
			'role': 'menu'
		});
		renderItems();
		$contextMenu.append($ul);

		function renderItems(){
			angular.forEach(items, function (item) {
				var $li = angular.element('<li>');

				if (item === null) {
					$li.addClass('divider');
				} else {
					var $a = angular.element('<a>');
					$a.attr({tabindex: '-1', href:'#'});
					$a.text(item[0]);
					$li.append($a);
					$li.on('click', function (e) {
						e.preventDefault();
						scope.$apply(function () {
							_clearContextMenus(e);
							item[1].call(item, item);
						});
					});
				}

				$ul.append($li);
			});
		}
	}

	function _clearContextMenus(event){
		if (!event){
			return;
		}

		angular.element(event.currentTarget).removeClass('context');

		var els = angular.element(".context-dropdown");
		angular.forEach(els, function(el){
			angular.element(el).remove();
		});
	}

	var contextMenuItemHeight = 0;
	function setContextMenuPosition(event){
		if (contextMenuItemHeight === 0)
			contextMenuItemHeight = $ul.children(0).height();

		// Why not just call .width() and .height() on the container? Because those calculations cause browsers to reflow
		// that can cause IE10 to take 200ms to render a context menu.
		var cmWidth = 150;
		var cmHeight = contextMenuItemHeight * $ul.children().length;
		var startX = event.pageX + cmWidth >= window.innerWidth ? event.pageX - cmWidth : event.pageX;
		var startY = event.pageY + cmHeight >= window.innerHeight ? event.pageY - cmHeight : event.pageY;

		$ul.css({
			display: 'block',
			position: 'absolute',
			left: startX,
			top: startY,
			'min-width': cmWidth
		});
	}
}]]></link>
        <name>CAS_activitiesListDataTable</name>
        <option_schema>[{"hint":"If enabled, show the list filter in the breadcrumbs of the data table","name":"enable_filter","default_value":"false","section":"Behavior","label":"Enable Filter","type":"boolean"}]</option_schema>
        <public>false</public>
        <roles>x_vmw_cloudservice.vra_catalog_admin,x_vmw_cloudservice.vra_end_user</roles>
        <script><![CDATA[(function() {
	//	try {
	//		CASLogger.debug('Inside activity-widget-data-table Widget:');
	var appUtil = new CASAppUtil();
	var daoUtil = new CASDaoUtil();
	data.activitiesGridPage = appUtil.configuration.page.activitiesGrid;
	if (!input) // asynch load list
		return;

	data.msg = {};
	data.msg.sortingByAsc = gs.getMessage("Sorting by ascending");
	data.msg.sortingByDesc = gs.getMessage("Sorting by descending");

	data.title = options.title || input.title;

	/*
	 * data.table = the table
	 * data.p = the current page starting at 1
	 * data.o = the order by column
	 * data.d = the order by direction
	 * data.keywords = the keyword search term
	 * data.list = the table data as an array
	 * data.invalid_table = true if table is invalid or if data was not succesfully fetched
	 * data.table_label = the table's display name. e.g. Incident
	 * data.table_plural = the table's plural display name. e.g. Incidents
	 * data.fields = a comma delimited list of field names to show in the data table
	 * data.column_labels = a map of field name -> display name
	 * data.window_size = the number of rows to show
	 * data.filter = the encoded query
	 */

	// copy to data from input or options
	var optCopy = function(names) {
		names.forEach(function(name) {
			data[name] = input[name] || options[name];
		})
	}
	// copy to data[name] from input[name] || option[name]
	optCopy(['table', 'p', 'o', 'd', 'filter', 'filterACLs', 'fields', 'keywords', 'view']);
	optCopy(['relationship_id', 'apply_to', 'apply_to_sys_id', 'window_size']);
	if (!data.table) {
		data.invalid_table = true;
		data.table_label = "";
		return;
	}

	if (!data.fields) {
		if (data.view)
			data.fields = $sp.getListColumns(data.table, data.view);
		else
			data.fields = $sp.getListColumns(data.table);
	}

	data.display = data.display || $sp.getValue('display') || $sp.getParameter('table_name') || 'requests';
	data.view = data.view || 'mobile';
	data.table = data.table || $sp.getValue('table');
	data.filter = data.filter || $sp.getValue('filter');
	data.keywords = data.keywords || $sp.getValue('keywords');
	data.p = data.p || $sp.getValue('p') || 1;
	data.p = parseInt(data.p);
	data.o = data.o || $sp.getValue('o') || $sp.getValue('order_by');
	data.d = data.d || $sp.getValue('d') || $sp.getValue('order_direction');
	data.page_index = data.p - 1;
	data.show_new = data.show_new || options.show_new;
	var windowSize = data.window_size || $sp.getValue('maximum_entries') || 20;
	windowSize = parseInt(windowSize);
	if (isNaN(windowSize) || windowSize < 1)
		windowSize = 20;
	data.window_size = windowSize;

	//gs.addErrorMessage((data.filter)?true:false);

	var gr;
	if (gs.getProperty("glide.security.ui.filter") == "true") {
		gr = new FilteredGlideRecord(data.table);
		gr.applyRowSecurity();
	} else
		gr = new GlideRecordSecure(data.table);
	if (!gr.isValid()) {
		data.invalid_table = true;
		data.table_label = data.table;
		return;
	}
	if (data.table == appUtil.configuration.table.requests) {
		data.name = 'Requests';
	} else if (data.table == appUtil.configuration.table.approvals) {
		data.name = 'Approvals';
	} else {
		data.name = 'Action Requests';
	} 
	data.canCreate = gr.canCreate();
	data.newButtonUnsupported = data.table == "sys_attachment";
	data.table_label = gr.getLabel();
	if (data.filter) {
		if (data.filterACLs)
			gr = $sp.addQueryString(gr, data.filter);
		else
			gr.addEncodedQuery(data.filter);
	}

	if (data.keywords){
		gr.addQuery('123TEXTQUERY321', data.keywords);
		data.keywords = null;
	}

	data.filter = gr.getEncodedQuery();

	if (data.relationship_id) {
		var rel = GlideRelationship.get(data.relationship_id);
		var target = new GlideRecordSecure(data.table);
		var applyTo = new GlideRecordSecure(data.apply_to);
		applyTo.get("sys_id", data.apply_to_sys_id);
		rel.queryWith(applyTo, target); // put the relationship query into target
		gr.addEncodedQuery(target.getEncodedQuery()); // get the query the relationship made for us
	}

	if (data.o){
		if (data.d == "asc")
			gr.orderBy(data.o);
		else
			gr.orderByDesc(data.o);
	}

	data.window_start = data.page_index * data.window_size;
	data.window_end = (data.page_index + 1) * data.window_size;
	gr.chooseWindow(data.window_start, data.window_end);
	/*if (data.table == appUtil.configuration.table.requestItem) { //added the custom filter
		gr.addEncodedQuery('x_vmw_vmware_vreal_vra_itemISNOTEMPTY^ORx_vmw_vmware_vreal_vra_request_idISNOTEMPTY');
		if(!gs.getUser().hasRole('admin') && !gs.getUser().hasRole('x_vmw_vmware_vreal.vrealize_automation_catalog_admin')){
			gr.addEncodedQuery('request.requested_forDYNAMIC90d1921e5f510100a9ad2572f2b477fe');
			data.filter = 'request.requested_forDYNAMIC90d1921e5f510100a9ad2572f2b477fe';
		}
	} else if (data.table == appUtil.configuration.table.approvals) {
		//gr.addEncodedQuery('group.a ssignment_group='+gs.getProperty(appUtil.configuration.property.groupSysId));
		if(!gs.getUser().hasRole('admin') && !gs.getUser().hasRole('x_vmw_vmware_vreal.vrealize_automation_catalog_admin')){
			gr.addEncodedQuery('approverDYNAMIC90d1921e5f510100a9ad2572f2b477fe');
			data.filter = 'approverDYNAMIC90d1921e5f510100a9ad2572f2b477fe';
		}
	}*/
	gr._query();
	data.row_count = daoUtil.fetchRowCount(data.table,gr.getEncodedQuery());//gr.getRowCount();
	data.num_pages = Math.ceil(data.row_count / data.window_size);
	data.column_labels = {};
	data.fields_array = data.fields.split(',');

	// use GlideRecord to get field labels vs. GlideRecordSecure
	var grForLabels = new GlideRecordSecure(data.table);
	for (var i in data.fields_array) {
		var field = data.fields_array[i];
		var ge = grForLabels.getElement(field);
		if (ge == null)
			continue;

		data.column_labels[field] = ge.getLabel();
	}

	data.list = [];
	while (gr._next()) {
		var record = {};
		$sp.getRecordElements(record, gr, data.fields);
		record.sys_id = gr.getValue('sys_id');
		data.list.push(record);
	}

	data.enable_filter = (input.enable_filter == true || input.enable_filter == "true" ||
												options.enable_filter == true || options.enable_filter == "true");
	var breadcrumbWidgetParams = {
		table: data.table,
		query: data.filter,
		enable_filter: "true"
	};
	data.filterBreadcrumbs = $sp.getWidget('widget-filter-breadcrumbs', breadcrumbWidgetParams);

	//} catch(e) {
	//		CASLogger.error('Exception caught inside activity-widget-data-table Widget: '+e);
	//	}
})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>Navdeep</sys_created_by>
        <sys_created_on>2019-07-17 09:24:52</sys_created_on>
        <sys_id>a4089404dbfe3300291d61ca0b961938</sys_id>
        <sys_mod_count>103</sys_mod_count>
        <sys_name>CAS_activitiesListDataTable</sys_name>
        <sys_package display_value="VMware vRealize Automation ITSM Application 8.3" source="x_vmw_cloudservice">0d6a0ec1db11bb407c83712ebf96194d</sys_package>
        <sys_policy/>
        <sys_scope display_value="VMware vRealize Automation ITSM Application 8.3">0d6a0ec1db11bb407c83712ebf96194d</sys_scope>
        <sys_update_name>sp_widget_a4089404dbfe3300291d61ca0b961938</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2020-01-16 06:19:27</sys_updated_on>
        <template><![CDATA[<div class="main-container">
<div class="panel panel-{{options.color}} b">
  <div class="panel container-fluid">
    <div class="row">
      <div  class="col-md-6">
        <div class="header-content">
          {{c.data.name}}
        </div>
      </div>
      <a class="layout-container" href="?id={{data.activitiesGridPage}}&table_name={{data.display}}&tableFilter={{c.data.filter}}">
        <i class="fa fa-table layout-icon"></i><span class="layout-name">&nbsp;Grid</span>
      </a>
    </div>
  </div>
  <div class="scrollable-container">
    <div class="content-container">
      <div style="border: none;" ng-if="options.show_breadcrumbs && (data.filter || data.enable_filter)" class="filter-breadcrumbs">
        <sp-widget class="widget" widget="data.filterBreadcrumbs"></sp-widget>
      </div>
      <div class="pull-right" ng-if="options.show_keywords">
        <form ng-submit="setSearch(true)">
          <div class="input-group">
            <input type="text" name="datatable-search" ng-model="data.keywords" class="form-control" placeholder="${Keyword Search}">
            <span class="input-group-btn">
              <button name="search" class="btn btn-default" type="submit" aria-label="${Search}"><span class="glyphicon glyphicon-search"></span></button>
            </span>
          </div>
        </form>
      </div>
      <div class="clearfix"></div>
    </div>
    <!-- body -->
    <div class="panel-body">
      <h2 class="sr-only data-table-title">{{data.title || data.table_plural}} ${table} - ${page} {{data.p}}</h2>
      <div class="alert alert-info" ng-if="!data.list.length && !data.num_pages && !data.invalid_table && !loadingData">
        ${No records in {{data.table_label}} <span ng-if="data.filter">using this filter</span>}
      </div>
      <div class="alert alert-info" ng-if="loadingData">
        <fa name="spinner" spin="true"></fa> ${Loading data}...
      </div>
      <table class="table content-table" ng-if="data.list.length">
        <thead class="table-head">
          <tr>
            <th class="sr-only"></th>
            <th ng-repeat="field in data.fields_array track by $index" ng-click="setOrderBy(field)" tabindex="0">
              <div class="th-title" style="float:left;" aria-label="${Sort by } {{data.column_labels[field]}}">{{data.column_labels[field]}}</div>
              <i class="fa" ng-if="field == data.o" ng-class="{'asc': 'fa-chevron-up', 'desc': 'fa-chevron-down'}[data.d]" aria-label="${Sorted by } {{data.column_labels[field]}} {{data.d == 'asc' ?  '${Ascending}': '${Descending}' }}"></i>
            </th>
          </tr>
        </thead>
        <tbody>
          <tr class="table_row" ng-repeat="item in data.list track by item.sys_id">
            <td class="sr-only" tabindex="0" role="link" ng-click="go(data.table, item)" aria-label="${Open record}"></td>
            <td role="text" aria-label="{{item[field].display_value}}" class="pointer" ng-class="{selected: item.selected}" ng-click="go(data.table, item)" ng-repeat="field in data.fields_array" data-field="{{field}}" data-th="{{data.column_labels[field]}}">{{item[field].display_value}}</td>
          </tr>
        </tbody>
      </table>
      <div ng-class="{'pruned-msg-filter-pad': (!options.show_breadcrumbs || !data.filter) && !data.list.length}" class="pruned-msg" ng-if="rowsWerePruned()">
        <span ng-if="rowsPruned == 1">${{{rowsPruned}} row removed by security constraints}</span>
        <span ng-if="rowsPruned > 1">${{{rowsPruned}} rows removed by security constraints}</span>
      </div>
    </div>
  </div>
  <!-- footer -->
  <div class="panel-footer" ng-hide="options.hide_footer" ng-if="data.row_count">
    <div class="btn-toolbar m-r pull-left" style="display:inline;">
      <!----------------------------------Pagination------------------------------>
      <div class="pagination-container">
        <div class="pagination">
          <li class="pagination-item item-left">
            <a ng-disabled="data.p == 1"  class="btn btn-default" href="javascript:void(0)" ng-class="{disabled : c.data.current_record < c.data.window}" ng-click="setPageNum(1)" aria-label="${Previous page}"><i class="fa">&#xf0d9;&#xf0d9;</i></a>
          </li>
          <li class="pagination-item item-left">
            <a ng-disabled="data.p == 1"  class="btn btn-default" href="javascript:void(0)" ng-click="setPageNum(data.p - 1)" aria-label="${Previous page}"><i class="fa">&#xf0d9;</i></a>
          </li>
          <li class="pagination-item item-search"><input id="input-search" type="text" ng-model="c.input"  placeholder="${Page {{data.p}} of {{data.num_pages}}}"></li>
          <li class="pagination-item item-right">
            <a ng-disabled="data.p == data.num_pages"  class="btn btn-default" href="javascript:void(0)" ng-click="setPageNum(data.num_pages)" aria-label="${Next page}"><i class="fa">&#xf0da;&#xf0da;</i></a>
          </li>
          <li class="pagination-item item-right">
            <a ng-disabled="data.p == data.num_pages"  class="btn btn-default" href="javascript:void(0)" ng-click="setPageNum(data.p + 1)" aria-label="${Next page}"><i class="fa">&#xf0da;</i></a>
          </li>
          <li class="pagination-item item-right search-button"><a class="fa fa-search btn btn-default" id="search-button"  href="javascript:void(0)" ng-click="setPageNum(c.input); c.input = undefined;" aria-label="${Next page}"></a></li>
        </div>
        <div class="inline error_msg" ng-if="c.data.error_msg">
          &nbsp;&nbsp;{{c.data.error_msg}}
        </div>
      </div>
      <!----------------------------------Pagination------------------------------>
    </div>
    <div class="m-t-xs panel-title"></div>

    <span class="clearfix"></span>

  </div>
</div>
</div>]]></template>
    </sp_widget>
</record_update>
